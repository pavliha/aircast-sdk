"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: proto/aircast.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeviceCameraSelectedError = exports.DeviceCameraSelectedResponse = exports.DeviceCameraSwitchError = exports.DeviceCameraSwitchSuccess = exports.DeviceCameraRemoveError = exports.DeviceCameraRemoveSuccess = exports.DeviceCameraUpdateError = exports.DeviceCameraUpdateSuccess = exports.DeviceCameraAddError = exports.DeviceCameraAddSuccess = exports.DeviceCameraListError = exports.DeviceCameraListResponse = exports.DeviceWebrtcDataChannelOpen = exports.DeviceWebrtcPeerConnecting = exports.DeviceWebrtcSessionStopWarning = exports.DeviceWebrtcOfferError = exports.DeviceWebrtcError = exports.DeviceWebrtcIceCandidateAck = exports.DeviceWebrtcAnswerAck = exports.DeviceWebrtcOfferAck = exports.DeviceWebrtcIceDisconnected = exports.DeviceWebrtcIceConnected = exports.DeviceWebrtcPeerDisconnected = exports.DeviceWebrtcPeerConnected = exports.DeviceWebrtcIceCandidate = exports.DeviceWebrtcAnswer = exports.DeviceWebrtcOffer = exports.DeviceWebrtcSessionStarted = exports.DeviceMavlinkDialError = exports.DeviceMavlinkConnected = exports.DeviceRtspRedialError = exports.DeviceRtspConnectFailed = exports.DeviceRtspDisconnected = exports.DeviceRtspClientError = exports.DeviceRtspListenError = exports.DeviceRtspDecodeError = exports.DeviceRtspPacketLost = exports.DeviceRtspPublishError = exports.DeviceRtspDescribeError = exports.DeviceRtspDialError = exports.DeviceRtspError = exports.DeviceRtspStreamReady = exports.DeviceRtspConnected = exports.DeviceModemInfoResponse = exports.DeviceModemConnectionError = exports.DeviceModemSignalQuality = exports.DeviceModemInfo = exports.DeviceModemConnected = exports.Message = exports.protobufPackage = void 0;
exports.Error_DetailsEntry = exports.Error = exports.ClientModemInfoRequest = exports.ClientStatusRequest = exports.ClientDeviceReboot = exports.ClientWebrtcIceCandidate = exports.ClientWebrtcAnswer = exports.ClientWebrtcOffer = exports.ClientWebrtcSessionStart = exports.ClientCameraSelectedRequest = exports.ClientCameraSwitch = exports.ClientCameraRemove = exports.ClientCameraUpdate = exports.ClientCameraAdd = exports.ClientCameraListRequest = exports.ClientNetworkInterfacesRequest = exports.ClientRtspDial = exports.ApiDeviceDisconnected = exports.ApiDeviceConnected = exports.DeviceStatusResponse = exports.DeviceNetworkInterfacesResponse = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const common_1 = require("./common");
exports.protobufPackage = "aircast.protocol";
function createBaseMessage() {
    return {
        messageId: "",
        correlationId: "",
        protocolVersion: "",
        timestamp: 0,
        deviceModemConnected: undefined,
        deviceModemInfo: undefined,
        deviceModemSignalQuality: undefined,
        deviceModemConnectionError: undefined,
        deviceModemInfoResponse: undefined,
        deviceRtspConnected: undefined,
        deviceRtspStreamReady: undefined,
        deviceRtspError: undefined,
        deviceRtspDialError: undefined,
        deviceRtspDescribeError: undefined,
        deviceRtspPublishError: undefined,
        deviceRtspPacketLost: undefined,
        deviceRtspDecodeError: undefined,
        deviceRtspListenError: undefined,
        deviceRtspClientError: undefined,
        deviceRtspDisconnected: undefined,
        deviceRtspConnectFailed: undefined,
        deviceRtspRedialError: undefined,
        deviceMavlinkConnected: undefined,
        deviceMavlinkDialError: undefined,
        deviceWebrtcSessionStarted: undefined,
        deviceWebrtcOffer: undefined,
        deviceWebrtcAnswer: undefined,
        deviceWebrtcIceCandidate: undefined,
        deviceWebrtcPeerConnected: undefined,
        deviceWebrtcPeerDisconnected: undefined,
        deviceWebrtcIceConnected: undefined,
        deviceWebrtcIceDisconnected: undefined,
        deviceWebrtcOfferAck: undefined,
        deviceWebrtcAnswerAck: undefined,
        deviceWebrtcIceCandidateAck: undefined,
        deviceWebrtcError: undefined,
        deviceWebrtcOfferError: undefined,
        deviceWebrtcSessionStopWarning: undefined,
        deviceWebrtcPeerConnecting: undefined,
        deviceWebrtcDataChannelOpen: undefined,
        deviceCameraListResponse: undefined,
        deviceCameraListError: undefined,
        deviceCameraAddSuccess: undefined,
        deviceCameraAddError: undefined,
        deviceCameraUpdateSuccess: undefined,
        deviceCameraUpdateError: undefined,
        deviceCameraRemoveSuccess: undefined,
        deviceCameraRemoveError: undefined,
        deviceCameraSwitchSuccess: undefined,
        deviceCameraSwitchError: undefined,
        deviceCameraSelectedResponse: undefined,
        deviceCameraSelectedError: undefined,
        deviceNetworkInterfacesResponse: undefined,
        deviceStatusResponse: undefined,
        apiDeviceConnected: undefined,
        apiDeviceDisconnected: undefined,
        clientRtspDial: undefined,
        clientNetworkInterfacesRequest: undefined,
        clientCameraListRequest: undefined,
        clientCameraAdd: undefined,
        clientCameraUpdate: undefined,
        clientCameraRemove: undefined,
        clientCameraSwitch: undefined,
        clientCameraSelectedRequest: undefined,
        clientWebrtcSessionStart: undefined,
        clientWebrtcOffer: undefined,
        clientWebrtcAnswer: undefined,
        clientWebrtcIceCandidate: undefined,
        clientDeviceReboot: undefined,
        clientStatusRequest: undefined,
        clientModemInfoRequest: undefined,
        error: undefined,
    };
}
exports.Message = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.messageId !== "") {
            writer.uint32(10).string(message.messageId);
        }
        if (message.correlationId !== "") {
            writer.uint32(18).string(message.correlationId);
        }
        if (message.protocolVersion !== "") {
            writer.uint32(26).string(message.protocolVersion);
        }
        if (message.timestamp !== 0) {
            writer.uint32(32).int64(message.timestamp);
        }
        if (message.deviceModemConnected !== undefined) {
            exports.DeviceModemConnected.encode(message.deviceModemConnected, writer.uint32(82).fork()).ldelim();
        }
        if (message.deviceModemInfo !== undefined) {
            exports.DeviceModemInfo.encode(message.deviceModemInfo, writer.uint32(90).fork()).ldelim();
        }
        if (message.deviceModemSignalQuality !== undefined) {
            exports.DeviceModemSignalQuality.encode(message.deviceModemSignalQuality, writer.uint32(98).fork()).ldelim();
        }
        if (message.deviceModemConnectionError !== undefined) {
            exports.DeviceModemConnectionError.encode(message.deviceModemConnectionError, writer.uint32(106).fork()).ldelim();
        }
        if (message.deviceModemInfoResponse !== undefined) {
            exports.DeviceModemInfoResponse.encode(message.deviceModemInfoResponse, writer.uint32(114).fork()).ldelim();
        }
        if (message.deviceRtspConnected !== undefined) {
            exports.DeviceRtspConnected.encode(message.deviceRtspConnected, writer.uint32(162).fork()).ldelim();
        }
        if (message.deviceRtspStreamReady !== undefined) {
            exports.DeviceRtspStreamReady.encode(message.deviceRtspStreamReady, writer.uint32(170).fork()).ldelim();
        }
        if (message.deviceRtspError !== undefined) {
            exports.DeviceRtspError.encode(message.deviceRtspError, writer.uint32(178).fork()).ldelim();
        }
        if (message.deviceRtspDialError !== undefined) {
            exports.DeviceRtspDialError.encode(message.deviceRtspDialError, writer.uint32(186).fork()).ldelim();
        }
        if (message.deviceRtspDescribeError !== undefined) {
            exports.DeviceRtspDescribeError.encode(message.deviceRtspDescribeError, writer.uint32(194).fork()).ldelim();
        }
        if (message.deviceRtspPublishError !== undefined) {
            exports.DeviceRtspPublishError.encode(message.deviceRtspPublishError, writer.uint32(202).fork()).ldelim();
        }
        if (message.deviceRtspPacketLost !== undefined) {
            exports.DeviceRtspPacketLost.encode(message.deviceRtspPacketLost, writer.uint32(210).fork()).ldelim();
        }
        if (message.deviceRtspDecodeError !== undefined) {
            exports.DeviceRtspDecodeError.encode(message.deviceRtspDecodeError, writer.uint32(218).fork()).ldelim();
        }
        if (message.deviceRtspListenError !== undefined) {
            exports.DeviceRtspListenError.encode(message.deviceRtspListenError, writer.uint32(226).fork()).ldelim();
        }
        if (message.deviceRtspClientError !== undefined) {
            exports.DeviceRtspClientError.encode(message.deviceRtspClientError, writer.uint32(234).fork()).ldelim();
        }
        if (message.deviceRtspDisconnected !== undefined) {
            exports.DeviceRtspDisconnected.encode(message.deviceRtspDisconnected, writer.uint32(242).fork()).ldelim();
        }
        if (message.deviceRtspConnectFailed !== undefined) {
            exports.DeviceRtspConnectFailed.encode(message.deviceRtspConnectFailed, writer.uint32(250).fork()).ldelim();
        }
        if (message.deviceRtspRedialError !== undefined) {
            exports.DeviceRtspRedialError.encode(message.deviceRtspRedialError, writer.uint32(258).fork()).ldelim();
        }
        if (message.deviceMavlinkConnected !== undefined) {
            exports.DeviceMavlinkConnected.encode(message.deviceMavlinkConnected, writer.uint32(322).fork()).ldelim();
        }
        if (message.deviceMavlinkDialError !== undefined) {
            exports.DeviceMavlinkDialError.encode(message.deviceMavlinkDialError, writer.uint32(330).fork()).ldelim();
        }
        if (message.deviceWebrtcSessionStarted !== undefined) {
            exports.DeviceWebrtcSessionStarted.encode(message.deviceWebrtcSessionStarted, writer.uint32(402).fork()).ldelim();
        }
        if (message.deviceWebrtcOffer !== undefined) {
            exports.DeviceWebrtcOffer.encode(message.deviceWebrtcOffer, writer.uint32(410).fork()).ldelim();
        }
        if (message.deviceWebrtcAnswer !== undefined) {
            exports.DeviceWebrtcAnswer.encode(message.deviceWebrtcAnswer, writer.uint32(418).fork()).ldelim();
        }
        if (message.deviceWebrtcIceCandidate !== undefined) {
            exports.DeviceWebrtcIceCandidate.encode(message.deviceWebrtcIceCandidate, writer.uint32(426).fork()).ldelim();
        }
        if (message.deviceWebrtcPeerConnected !== undefined) {
            exports.DeviceWebrtcPeerConnected.encode(message.deviceWebrtcPeerConnected, writer.uint32(434).fork()).ldelim();
        }
        if (message.deviceWebrtcPeerDisconnected !== undefined) {
            exports.DeviceWebrtcPeerDisconnected.encode(message.deviceWebrtcPeerDisconnected, writer.uint32(442).fork()).ldelim();
        }
        if (message.deviceWebrtcIceConnected !== undefined) {
            exports.DeviceWebrtcIceConnected.encode(message.deviceWebrtcIceConnected, writer.uint32(450).fork()).ldelim();
        }
        if (message.deviceWebrtcIceDisconnected !== undefined) {
            exports.DeviceWebrtcIceDisconnected.encode(message.deviceWebrtcIceDisconnected, writer.uint32(458).fork()).ldelim();
        }
        if (message.deviceWebrtcOfferAck !== undefined) {
            exports.DeviceWebrtcOfferAck.encode(message.deviceWebrtcOfferAck, writer.uint32(466).fork()).ldelim();
        }
        if (message.deviceWebrtcAnswerAck !== undefined) {
            exports.DeviceWebrtcAnswerAck.encode(message.deviceWebrtcAnswerAck, writer.uint32(474).fork()).ldelim();
        }
        if (message.deviceWebrtcIceCandidateAck !== undefined) {
            exports.DeviceWebrtcIceCandidateAck.encode(message.deviceWebrtcIceCandidateAck, writer.uint32(482).fork()).ldelim();
        }
        if (message.deviceWebrtcError !== undefined) {
            exports.DeviceWebrtcError.encode(message.deviceWebrtcError, writer.uint32(490).fork()).ldelim();
        }
        if (message.deviceWebrtcOfferError !== undefined) {
            exports.DeviceWebrtcOfferError.encode(message.deviceWebrtcOfferError, writer.uint32(498).fork()).ldelim();
        }
        if (message.deviceWebrtcSessionStopWarning !== undefined) {
            exports.DeviceWebrtcSessionStopWarning.encode(message.deviceWebrtcSessionStopWarning, writer.uint32(506).fork()).ldelim();
        }
        if (message.deviceWebrtcPeerConnecting !== undefined) {
            exports.DeviceWebrtcPeerConnecting.encode(message.deviceWebrtcPeerConnecting, writer.uint32(514).fork()).ldelim();
        }
        if (message.deviceWebrtcDataChannelOpen !== undefined) {
            exports.DeviceWebrtcDataChannelOpen.encode(message.deviceWebrtcDataChannelOpen, writer.uint32(522).fork()).ldelim();
        }
        if (message.deviceCameraListResponse !== undefined) {
            exports.DeviceCameraListResponse.encode(message.deviceCameraListResponse, writer.uint32(562).fork()).ldelim();
        }
        if (message.deviceCameraListError !== undefined) {
            exports.DeviceCameraListError.encode(message.deviceCameraListError, writer.uint32(570).fork()).ldelim();
        }
        if (message.deviceCameraAddSuccess !== undefined) {
            exports.DeviceCameraAddSuccess.encode(message.deviceCameraAddSuccess, writer.uint32(578).fork()).ldelim();
        }
        if (message.deviceCameraAddError !== undefined) {
            exports.DeviceCameraAddError.encode(message.deviceCameraAddError, writer.uint32(586).fork()).ldelim();
        }
        if (message.deviceCameraUpdateSuccess !== undefined) {
            exports.DeviceCameraUpdateSuccess.encode(message.deviceCameraUpdateSuccess, writer.uint32(594).fork()).ldelim();
        }
        if (message.deviceCameraUpdateError !== undefined) {
            exports.DeviceCameraUpdateError.encode(message.deviceCameraUpdateError, writer.uint32(602).fork()).ldelim();
        }
        if (message.deviceCameraRemoveSuccess !== undefined) {
            exports.DeviceCameraRemoveSuccess.encode(message.deviceCameraRemoveSuccess, writer.uint32(610).fork()).ldelim();
        }
        if (message.deviceCameraRemoveError !== undefined) {
            exports.DeviceCameraRemoveError.encode(message.deviceCameraRemoveError, writer.uint32(618).fork()).ldelim();
        }
        if (message.deviceCameraSwitchSuccess !== undefined) {
            exports.DeviceCameraSwitchSuccess.encode(message.deviceCameraSwitchSuccess, writer.uint32(626).fork()).ldelim();
        }
        if (message.deviceCameraSwitchError !== undefined) {
            exports.DeviceCameraSwitchError.encode(message.deviceCameraSwitchError, writer.uint32(634).fork()).ldelim();
        }
        if (message.deviceCameraSelectedResponse !== undefined) {
            exports.DeviceCameraSelectedResponse.encode(message.deviceCameraSelectedResponse, writer.uint32(642).fork()).ldelim();
        }
        if (message.deviceCameraSelectedError !== undefined) {
            exports.DeviceCameraSelectedError.encode(message.deviceCameraSelectedError, writer.uint32(650).fork()).ldelim();
        }
        if (message.deviceNetworkInterfacesResponse !== undefined) {
            exports.DeviceNetworkInterfacesResponse.encode(message.deviceNetworkInterfacesResponse, writer.uint32(722).fork())
                .ldelim();
        }
        if (message.deviceStatusResponse !== undefined) {
            exports.DeviceStatusResponse.encode(message.deviceStatusResponse, writer.uint32(730).fork()).ldelim();
        }
        if (message.apiDeviceConnected !== undefined) {
            exports.ApiDeviceConnected.encode(message.apiDeviceConnected, writer.uint32(802).fork()).ldelim();
        }
        if (message.apiDeviceDisconnected !== undefined) {
            exports.ApiDeviceDisconnected.encode(message.apiDeviceDisconnected, writer.uint32(810).fork()).ldelim();
        }
        if (message.clientRtspDial !== undefined) {
            exports.ClientRtspDial.encode(message.clientRtspDial, writer.uint32(1602).fork()).ldelim();
        }
        if (message.clientNetworkInterfacesRequest !== undefined) {
            exports.ClientNetworkInterfacesRequest.encode(message.clientNetworkInterfacesRequest, writer.uint32(1610).fork())
                .ldelim();
        }
        if (message.clientCameraListRequest !== undefined) {
            exports.ClientCameraListRequest.encode(message.clientCameraListRequest, writer.uint32(1618).fork()).ldelim();
        }
        if (message.clientCameraAdd !== undefined) {
            exports.ClientCameraAdd.encode(message.clientCameraAdd, writer.uint32(1626).fork()).ldelim();
        }
        if (message.clientCameraUpdate !== undefined) {
            exports.ClientCameraUpdate.encode(message.clientCameraUpdate, writer.uint32(1634).fork()).ldelim();
        }
        if (message.clientCameraRemove !== undefined) {
            exports.ClientCameraRemove.encode(message.clientCameraRemove, writer.uint32(1642).fork()).ldelim();
        }
        if (message.clientCameraSwitch !== undefined) {
            exports.ClientCameraSwitch.encode(message.clientCameraSwitch, writer.uint32(1650).fork()).ldelim();
        }
        if (message.clientCameraSelectedRequest !== undefined) {
            exports.ClientCameraSelectedRequest.encode(message.clientCameraSelectedRequest, writer.uint32(1658).fork()).ldelim();
        }
        if (message.clientWebrtcSessionStart !== undefined) {
            exports.ClientWebrtcSessionStart.encode(message.clientWebrtcSessionStart, writer.uint32(1666).fork()).ldelim();
        }
        if (message.clientWebrtcOffer !== undefined) {
            exports.ClientWebrtcOffer.encode(message.clientWebrtcOffer, writer.uint32(1674).fork()).ldelim();
        }
        if (message.clientWebrtcAnswer !== undefined) {
            exports.ClientWebrtcAnswer.encode(message.clientWebrtcAnswer, writer.uint32(1682).fork()).ldelim();
        }
        if (message.clientWebrtcIceCandidate !== undefined) {
            exports.ClientWebrtcIceCandidate.encode(message.clientWebrtcIceCandidate, writer.uint32(1690).fork()).ldelim();
        }
        if (message.clientDeviceReboot !== undefined) {
            exports.ClientDeviceReboot.encode(message.clientDeviceReboot, writer.uint32(1698).fork()).ldelim();
        }
        if (message.clientStatusRequest !== undefined) {
            exports.ClientStatusRequest.encode(message.clientStatusRequest, writer.uint32(1706).fork()).ldelim();
        }
        if (message.clientModemInfoRequest !== undefined) {
            exports.ClientModemInfoRequest.encode(message.clientModemInfoRequest, writer.uint32(1714).fork()).ldelim();
        }
        if (message.error !== undefined) {
            exports.Error.encode(message.error, writer.uint32(7994).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.messageId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.correlationId = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.protocolVersion = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.timestamp = longToNumber(reader.int64());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.deviceModemConnected = exports.DeviceModemConnected.decode(reader, reader.uint32());
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.deviceModemInfo = exports.DeviceModemInfo.decode(reader, reader.uint32());
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.deviceModemSignalQuality = exports.DeviceModemSignalQuality.decode(reader, reader.uint32());
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.deviceModemConnectionError = exports.DeviceModemConnectionError.decode(reader, reader.uint32());
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.deviceModemInfoResponse = exports.DeviceModemInfoResponse.decode(reader, reader.uint32());
                    continue;
                case 20:
                    if (tag !== 162) {
                        break;
                    }
                    message.deviceRtspConnected = exports.DeviceRtspConnected.decode(reader, reader.uint32());
                    continue;
                case 21:
                    if (tag !== 170) {
                        break;
                    }
                    message.deviceRtspStreamReady = exports.DeviceRtspStreamReady.decode(reader, reader.uint32());
                    continue;
                case 22:
                    if (tag !== 178) {
                        break;
                    }
                    message.deviceRtspError = exports.DeviceRtspError.decode(reader, reader.uint32());
                    continue;
                case 23:
                    if (tag !== 186) {
                        break;
                    }
                    message.deviceRtspDialError = exports.DeviceRtspDialError.decode(reader, reader.uint32());
                    continue;
                case 24:
                    if (tag !== 194) {
                        break;
                    }
                    message.deviceRtspDescribeError = exports.DeviceRtspDescribeError.decode(reader, reader.uint32());
                    continue;
                case 25:
                    if (tag !== 202) {
                        break;
                    }
                    message.deviceRtspPublishError = exports.DeviceRtspPublishError.decode(reader, reader.uint32());
                    continue;
                case 26:
                    if (tag !== 210) {
                        break;
                    }
                    message.deviceRtspPacketLost = exports.DeviceRtspPacketLost.decode(reader, reader.uint32());
                    continue;
                case 27:
                    if (tag !== 218) {
                        break;
                    }
                    message.deviceRtspDecodeError = exports.DeviceRtspDecodeError.decode(reader, reader.uint32());
                    continue;
                case 28:
                    if (tag !== 226) {
                        break;
                    }
                    message.deviceRtspListenError = exports.DeviceRtspListenError.decode(reader, reader.uint32());
                    continue;
                case 29:
                    if (tag !== 234) {
                        break;
                    }
                    message.deviceRtspClientError = exports.DeviceRtspClientError.decode(reader, reader.uint32());
                    continue;
                case 30:
                    if (tag !== 242) {
                        break;
                    }
                    message.deviceRtspDisconnected = exports.DeviceRtspDisconnected.decode(reader, reader.uint32());
                    continue;
                case 31:
                    if (tag !== 250) {
                        break;
                    }
                    message.deviceRtspConnectFailed = exports.DeviceRtspConnectFailed.decode(reader, reader.uint32());
                    continue;
                case 32:
                    if (tag !== 258) {
                        break;
                    }
                    message.deviceRtspRedialError = exports.DeviceRtspRedialError.decode(reader, reader.uint32());
                    continue;
                case 40:
                    if (tag !== 322) {
                        break;
                    }
                    message.deviceMavlinkConnected = exports.DeviceMavlinkConnected.decode(reader, reader.uint32());
                    continue;
                case 41:
                    if (tag !== 330) {
                        break;
                    }
                    message.deviceMavlinkDialError = exports.DeviceMavlinkDialError.decode(reader, reader.uint32());
                    continue;
                case 50:
                    if (tag !== 402) {
                        break;
                    }
                    message.deviceWebrtcSessionStarted = exports.DeviceWebrtcSessionStarted.decode(reader, reader.uint32());
                    continue;
                case 51:
                    if (tag !== 410) {
                        break;
                    }
                    message.deviceWebrtcOffer = exports.DeviceWebrtcOffer.decode(reader, reader.uint32());
                    continue;
                case 52:
                    if (tag !== 418) {
                        break;
                    }
                    message.deviceWebrtcAnswer = exports.DeviceWebrtcAnswer.decode(reader, reader.uint32());
                    continue;
                case 53:
                    if (tag !== 426) {
                        break;
                    }
                    message.deviceWebrtcIceCandidate = exports.DeviceWebrtcIceCandidate.decode(reader, reader.uint32());
                    continue;
                case 54:
                    if (tag !== 434) {
                        break;
                    }
                    message.deviceWebrtcPeerConnected = exports.DeviceWebrtcPeerConnected.decode(reader, reader.uint32());
                    continue;
                case 55:
                    if (tag !== 442) {
                        break;
                    }
                    message.deviceWebrtcPeerDisconnected = exports.DeviceWebrtcPeerDisconnected.decode(reader, reader.uint32());
                    continue;
                case 56:
                    if (tag !== 450) {
                        break;
                    }
                    message.deviceWebrtcIceConnected = exports.DeviceWebrtcIceConnected.decode(reader, reader.uint32());
                    continue;
                case 57:
                    if (tag !== 458) {
                        break;
                    }
                    message.deviceWebrtcIceDisconnected = exports.DeviceWebrtcIceDisconnected.decode(reader, reader.uint32());
                    continue;
                case 58:
                    if (tag !== 466) {
                        break;
                    }
                    message.deviceWebrtcOfferAck = exports.DeviceWebrtcOfferAck.decode(reader, reader.uint32());
                    continue;
                case 59:
                    if (tag !== 474) {
                        break;
                    }
                    message.deviceWebrtcAnswerAck = exports.DeviceWebrtcAnswerAck.decode(reader, reader.uint32());
                    continue;
                case 60:
                    if (tag !== 482) {
                        break;
                    }
                    message.deviceWebrtcIceCandidateAck = exports.DeviceWebrtcIceCandidateAck.decode(reader, reader.uint32());
                    continue;
                case 61:
                    if (tag !== 490) {
                        break;
                    }
                    message.deviceWebrtcError = exports.DeviceWebrtcError.decode(reader, reader.uint32());
                    continue;
                case 62:
                    if (tag !== 498) {
                        break;
                    }
                    message.deviceWebrtcOfferError = exports.DeviceWebrtcOfferError.decode(reader, reader.uint32());
                    continue;
                case 63:
                    if (tag !== 506) {
                        break;
                    }
                    message.deviceWebrtcSessionStopWarning = exports.DeviceWebrtcSessionStopWarning.decode(reader, reader.uint32());
                    continue;
                case 64:
                    if (tag !== 514) {
                        break;
                    }
                    message.deviceWebrtcPeerConnecting = exports.DeviceWebrtcPeerConnecting.decode(reader, reader.uint32());
                    continue;
                case 65:
                    if (tag !== 522) {
                        break;
                    }
                    message.deviceWebrtcDataChannelOpen = exports.DeviceWebrtcDataChannelOpen.decode(reader, reader.uint32());
                    continue;
                case 70:
                    if (tag !== 562) {
                        break;
                    }
                    message.deviceCameraListResponse = exports.DeviceCameraListResponse.decode(reader, reader.uint32());
                    continue;
                case 71:
                    if (tag !== 570) {
                        break;
                    }
                    message.deviceCameraListError = exports.DeviceCameraListError.decode(reader, reader.uint32());
                    continue;
                case 72:
                    if (tag !== 578) {
                        break;
                    }
                    message.deviceCameraAddSuccess = exports.DeviceCameraAddSuccess.decode(reader, reader.uint32());
                    continue;
                case 73:
                    if (tag !== 586) {
                        break;
                    }
                    message.deviceCameraAddError = exports.DeviceCameraAddError.decode(reader, reader.uint32());
                    continue;
                case 74:
                    if (tag !== 594) {
                        break;
                    }
                    message.deviceCameraUpdateSuccess = exports.DeviceCameraUpdateSuccess.decode(reader, reader.uint32());
                    continue;
                case 75:
                    if (tag !== 602) {
                        break;
                    }
                    message.deviceCameraUpdateError = exports.DeviceCameraUpdateError.decode(reader, reader.uint32());
                    continue;
                case 76:
                    if (tag !== 610) {
                        break;
                    }
                    message.deviceCameraRemoveSuccess = exports.DeviceCameraRemoveSuccess.decode(reader, reader.uint32());
                    continue;
                case 77:
                    if (tag !== 618) {
                        break;
                    }
                    message.deviceCameraRemoveError = exports.DeviceCameraRemoveError.decode(reader, reader.uint32());
                    continue;
                case 78:
                    if (tag !== 626) {
                        break;
                    }
                    message.deviceCameraSwitchSuccess = exports.DeviceCameraSwitchSuccess.decode(reader, reader.uint32());
                    continue;
                case 79:
                    if (tag !== 634) {
                        break;
                    }
                    message.deviceCameraSwitchError = exports.DeviceCameraSwitchError.decode(reader, reader.uint32());
                    continue;
                case 80:
                    if (tag !== 642) {
                        break;
                    }
                    message.deviceCameraSelectedResponse = exports.DeviceCameraSelectedResponse.decode(reader, reader.uint32());
                    continue;
                case 81:
                    if (tag !== 650) {
                        break;
                    }
                    message.deviceCameraSelectedError = exports.DeviceCameraSelectedError.decode(reader, reader.uint32());
                    continue;
                case 90:
                    if (tag !== 722) {
                        break;
                    }
                    message.deviceNetworkInterfacesResponse = exports.DeviceNetworkInterfacesResponse.decode(reader, reader.uint32());
                    continue;
                case 91:
                    if (tag !== 730) {
                        break;
                    }
                    message.deviceStatusResponse = exports.DeviceStatusResponse.decode(reader, reader.uint32());
                    continue;
                case 100:
                    if (tag !== 802) {
                        break;
                    }
                    message.apiDeviceConnected = exports.ApiDeviceConnected.decode(reader, reader.uint32());
                    continue;
                case 101:
                    if (tag !== 810) {
                        break;
                    }
                    message.apiDeviceDisconnected = exports.ApiDeviceDisconnected.decode(reader, reader.uint32());
                    continue;
                case 200:
                    if (tag !== 1602) {
                        break;
                    }
                    message.clientRtspDial = exports.ClientRtspDial.decode(reader, reader.uint32());
                    continue;
                case 201:
                    if (tag !== 1610) {
                        break;
                    }
                    message.clientNetworkInterfacesRequest = exports.ClientNetworkInterfacesRequest.decode(reader, reader.uint32());
                    continue;
                case 202:
                    if (tag !== 1618) {
                        break;
                    }
                    message.clientCameraListRequest = exports.ClientCameraListRequest.decode(reader, reader.uint32());
                    continue;
                case 203:
                    if (tag !== 1626) {
                        break;
                    }
                    message.clientCameraAdd = exports.ClientCameraAdd.decode(reader, reader.uint32());
                    continue;
                case 204:
                    if (tag !== 1634) {
                        break;
                    }
                    message.clientCameraUpdate = exports.ClientCameraUpdate.decode(reader, reader.uint32());
                    continue;
                case 205:
                    if (tag !== 1642) {
                        break;
                    }
                    message.clientCameraRemove = exports.ClientCameraRemove.decode(reader, reader.uint32());
                    continue;
                case 206:
                    if (tag !== 1650) {
                        break;
                    }
                    message.clientCameraSwitch = exports.ClientCameraSwitch.decode(reader, reader.uint32());
                    continue;
                case 207:
                    if (tag !== 1658) {
                        break;
                    }
                    message.clientCameraSelectedRequest = exports.ClientCameraSelectedRequest.decode(reader, reader.uint32());
                    continue;
                case 208:
                    if (tag !== 1666) {
                        break;
                    }
                    message.clientWebrtcSessionStart = exports.ClientWebrtcSessionStart.decode(reader, reader.uint32());
                    continue;
                case 209:
                    if (tag !== 1674) {
                        break;
                    }
                    message.clientWebrtcOffer = exports.ClientWebrtcOffer.decode(reader, reader.uint32());
                    continue;
                case 210:
                    if (tag !== 1682) {
                        break;
                    }
                    message.clientWebrtcAnswer = exports.ClientWebrtcAnswer.decode(reader, reader.uint32());
                    continue;
                case 211:
                    if (tag !== 1690) {
                        break;
                    }
                    message.clientWebrtcIceCandidate = exports.ClientWebrtcIceCandidate.decode(reader, reader.uint32());
                    continue;
                case 212:
                    if (tag !== 1698) {
                        break;
                    }
                    message.clientDeviceReboot = exports.ClientDeviceReboot.decode(reader, reader.uint32());
                    continue;
                case 213:
                    if (tag !== 1706) {
                        break;
                    }
                    message.clientStatusRequest = exports.ClientStatusRequest.decode(reader, reader.uint32());
                    continue;
                case 214:
                    if (tag !== 1714) {
                        break;
                    }
                    message.clientModemInfoRequest = exports.ClientModemInfoRequest.decode(reader, reader.uint32());
                    continue;
                case 999:
                    if (tag !== 7994) {
                        break;
                    }
                    message.error = exports.Error.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            messageId: isSet(object.messageId) ? globalThis.String(object.messageId) : "",
            correlationId: isSet(object.correlationId) ? globalThis.String(object.correlationId) : "",
            protocolVersion: isSet(object.protocolVersion) ? globalThis.String(object.protocolVersion) : "",
            timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
            deviceModemConnected: isSet(object.deviceModemConnected)
                ? exports.DeviceModemConnected.fromJSON(object.deviceModemConnected)
                : undefined,
            deviceModemInfo: isSet(object.deviceModemInfo) ? exports.DeviceModemInfo.fromJSON(object.deviceModemInfo) : undefined,
            deviceModemSignalQuality: isSet(object.deviceModemSignalQuality)
                ? exports.DeviceModemSignalQuality.fromJSON(object.deviceModemSignalQuality)
                : undefined,
            deviceModemConnectionError: isSet(object.deviceModemConnectionError)
                ? exports.DeviceModemConnectionError.fromJSON(object.deviceModemConnectionError)
                : undefined,
            deviceModemInfoResponse: isSet(object.deviceModemInfoResponse)
                ? exports.DeviceModemInfoResponse.fromJSON(object.deviceModemInfoResponse)
                : undefined,
            deviceRtspConnected: isSet(object.deviceRtspConnected)
                ? exports.DeviceRtspConnected.fromJSON(object.deviceRtspConnected)
                : undefined,
            deviceRtspStreamReady: isSet(object.deviceRtspStreamReady)
                ? exports.DeviceRtspStreamReady.fromJSON(object.deviceRtspStreamReady)
                : undefined,
            deviceRtspError: isSet(object.deviceRtspError) ? exports.DeviceRtspError.fromJSON(object.deviceRtspError) : undefined,
            deviceRtspDialError: isSet(object.deviceRtspDialError)
                ? exports.DeviceRtspDialError.fromJSON(object.deviceRtspDialError)
                : undefined,
            deviceRtspDescribeError: isSet(object.deviceRtspDescribeError)
                ? exports.DeviceRtspDescribeError.fromJSON(object.deviceRtspDescribeError)
                : undefined,
            deviceRtspPublishError: isSet(object.deviceRtspPublishError)
                ? exports.DeviceRtspPublishError.fromJSON(object.deviceRtspPublishError)
                : undefined,
            deviceRtspPacketLost: isSet(object.deviceRtspPacketLost)
                ? exports.DeviceRtspPacketLost.fromJSON(object.deviceRtspPacketLost)
                : undefined,
            deviceRtspDecodeError: isSet(object.deviceRtspDecodeError)
                ? exports.DeviceRtspDecodeError.fromJSON(object.deviceRtspDecodeError)
                : undefined,
            deviceRtspListenError: isSet(object.deviceRtspListenError)
                ? exports.DeviceRtspListenError.fromJSON(object.deviceRtspListenError)
                : undefined,
            deviceRtspClientError: isSet(object.deviceRtspClientError)
                ? exports.DeviceRtspClientError.fromJSON(object.deviceRtspClientError)
                : undefined,
            deviceRtspDisconnected: isSet(object.deviceRtspDisconnected)
                ? exports.DeviceRtspDisconnected.fromJSON(object.deviceRtspDisconnected)
                : undefined,
            deviceRtspConnectFailed: isSet(object.deviceRtspConnectFailed)
                ? exports.DeviceRtspConnectFailed.fromJSON(object.deviceRtspConnectFailed)
                : undefined,
            deviceRtspRedialError: isSet(object.deviceRtspRedialError)
                ? exports.DeviceRtspRedialError.fromJSON(object.deviceRtspRedialError)
                : undefined,
            deviceMavlinkConnected: isSet(object.deviceMavlinkConnected)
                ? exports.DeviceMavlinkConnected.fromJSON(object.deviceMavlinkConnected)
                : undefined,
            deviceMavlinkDialError: isSet(object.deviceMavlinkDialError)
                ? exports.DeviceMavlinkDialError.fromJSON(object.deviceMavlinkDialError)
                : undefined,
            deviceWebrtcSessionStarted: isSet(object.deviceWebrtcSessionStarted)
                ? exports.DeviceWebrtcSessionStarted.fromJSON(object.deviceWebrtcSessionStarted)
                : undefined,
            deviceWebrtcOffer: isSet(object.deviceWebrtcOffer)
                ? exports.DeviceWebrtcOffer.fromJSON(object.deviceWebrtcOffer)
                : undefined,
            deviceWebrtcAnswer: isSet(object.deviceWebrtcAnswer)
                ? exports.DeviceWebrtcAnswer.fromJSON(object.deviceWebrtcAnswer)
                : undefined,
            deviceWebrtcIceCandidate: isSet(object.deviceWebrtcIceCandidate)
                ? exports.DeviceWebrtcIceCandidate.fromJSON(object.deviceWebrtcIceCandidate)
                : undefined,
            deviceWebrtcPeerConnected: isSet(object.deviceWebrtcPeerConnected)
                ? exports.DeviceWebrtcPeerConnected.fromJSON(object.deviceWebrtcPeerConnected)
                : undefined,
            deviceWebrtcPeerDisconnected: isSet(object.deviceWebrtcPeerDisconnected)
                ? exports.DeviceWebrtcPeerDisconnected.fromJSON(object.deviceWebrtcPeerDisconnected)
                : undefined,
            deviceWebrtcIceConnected: isSet(object.deviceWebrtcIceConnected)
                ? exports.DeviceWebrtcIceConnected.fromJSON(object.deviceWebrtcIceConnected)
                : undefined,
            deviceWebrtcIceDisconnected: isSet(object.deviceWebrtcIceDisconnected)
                ? exports.DeviceWebrtcIceDisconnected.fromJSON(object.deviceWebrtcIceDisconnected)
                : undefined,
            deviceWebrtcOfferAck: isSet(object.deviceWebrtcOfferAck)
                ? exports.DeviceWebrtcOfferAck.fromJSON(object.deviceWebrtcOfferAck)
                : undefined,
            deviceWebrtcAnswerAck: isSet(object.deviceWebrtcAnswerAck)
                ? exports.DeviceWebrtcAnswerAck.fromJSON(object.deviceWebrtcAnswerAck)
                : undefined,
            deviceWebrtcIceCandidateAck: isSet(object.deviceWebrtcIceCandidateAck)
                ? exports.DeviceWebrtcIceCandidateAck.fromJSON(object.deviceWebrtcIceCandidateAck)
                : undefined,
            deviceWebrtcError: isSet(object.deviceWebrtcError)
                ? exports.DeviceWebrtcError.fromJSON(object.deviceWebrtcError)
                : undefined,
            deviceWebrtcOfferError: isSet(object.deviceWebrtcOfferError)
                ? exports.DeviceWebrtcOfferError.fromJSON(object.deviceWebrtcOfferError)
                : undefined,
            deviceWebrtcSessionStopWarning: isSet(object.deviceWebrtcSessionStopWarning)
                ? exports.DeviceWebrtcSessionStopWarning.fromJSON(object.deviceWebrtcSessionStopWarning)
                : undefined,
            deviceWebrtcPeerConnecting: isSet(object.deviceWebrtcPeerConnecting)
                ? exports.DeviceWebrtcPeerConnecting.fromJSON(object.deviceWebrtcPeerConnecting)
                : undefined,
            deviceWebrtcDataChannelOpen: isSet(object.deviceWebrtcDataChannelOpen)
                ? exports.DeviceWebrtcDataChannelOpen.fromJSON(object.deviceWebrtcDataChannelOpen)
                : undefined,
            deviceCameraListResponse: isSet(object.deviceCameraListResponse)
                ? exports.DeviceCameraListResponse.fromJSON(object.deviceCameraListResponse)
                : undefined,
            deviceCameraListError: isSet(object.deviceCameraListError)
                ? exports.DeviceCameraListError.fromJSON(object.deviceCameraListError)
                : undefined,
            deviceCameraAddSuccess: isSet(object.deviceCameraAddSuccess)
                ? exports.DeviceCameraAddSuccess.fromJSON(object.deviceCameraAddSuccess)
                : undefined,
            deviceCameraAddError: isSet(object.deviceCameraAddError)
                ? exports.DeviceCameraAddError.fromJSON(object.deviceCameraAddError)
                : undefined,
            deviceCameraUpdateSuccess: isSet(object.deviceCameraUpdateSuccess)
                ? exports.DeviceCameraUpdateSuccess.fromJSON(object.deviceCameraUpdateSuccess)
                : undefined,
            deviceCameraUpdateError: isSet(object.deviceCameraUpdateError)
                ? exports.DeviceCameraUpdateError.fromJSON(object.deviceCameraUpdateError)
                : undefined,
            deviceCameraRemoveSuccess: isSet(object.deviceCameraRemoveSuccess)
                ? exports.DeviceCameraRemoveSuccess.fromJSON(object.deviceCameraRemoveSuccess)
                : undefined,
            deviceCameraRemoveError: isSet(object.deviceCameraRemoveError)
                ? exports.DeviceCameraRemoveError.fromJSON(object.deviceCameraRemoveError)
                : undefined,
            deviceCameraSwitchSuccess: isSet(object.deviceCameraSwitchSuccess)
                ? exports.DeviceCameraSwitchSuccess.fromJSON(object.deviceCameraSwitchSuccess)
                : undefined,
            deviceCameraSwitchError: isSet(object.deviceCameraSwitchError)
                ? exports.DeviceCameraSwitchError.fromJSON(object.deviceCameraSwitchError)
                : undefined,
            deviceCameraSelectedResponse: isSet(object.deviceCameraSelectedResponse)
                ? exports.DeviceCameraSelectedResponse.fromJSON(object.deviceCameraSelectedResponse)
                : undefined,
            deviceCameraSelectedError: isSet(object.deviceCameraSelectedError)
                ? exports.DeviceCameraSelectedError.fromJSON(object.deviceCameraSelectedError)
                : undefined,
            deviceNetworkInterfacesResponse: isSet(object.deviceNetworkInterfacesResponse)
                ? exports.DeviceNetworkInterfacesResponse.fromJSON(object.deviceNetworkInterfacesResponse)
                : undefined,
            deviceStatusResponse: isSet(object.deviceStatusResponse)
                ? exports.DeviceStatusResponse.fromJSON(object.deviceStatusResponse)
                : undefined,
            apiDeviceConnected: isSet(object.apiDeviceConnected)
                ? exports.ApiDeviceConnected.fromJSON(object.apiDeviceConnected)
                : undefined,
            apiDeviceDisconnected: isSet(object.apiDeviceDisconnected)
                ? exports.ApiDeviceDisconnected.fromJSON(object.apiDeviceDisconnected)
                : undefined,
            clientRtspDial: isSet(object.clientRtspDial) ? exports.ClientRtspDial.fromJSON(object.clientRtspDial) : undefined,
            clientNetworkInterfacesRequest: isSet(object.clientNetworkInterfacesRequest)
                ? exports.ClientNetworkInterfacesRequest.fromJSON(object.clientNetworkInterfacesRequest)
                : undefined,
            clientCameraListRequest: isSet(object.clientCameraListRequest)
                ? exports.ClientCameraListRequest.fromJSON(object.clientCameraListRequest)
                : undefined,
            clientCameraAdd: isSet(object.clientCameraAdd) ? exports.ClientCameraAdd.fromJSON(object.clientCameraAdd) : undefined,
            clientCameraUpdate: isSet(object.clientCameraUpdate)
                ? exports.ClientCameraUpdate.fromJSON(object.clientCameraUpdate)
                : undefined,
            clientCameraRemove: isSet(object.clientCameraRemove)
                ? exports.ClientCameraRemove.fromJSON(object.clientCameraRemove)
                : undefined,
            clientCameraSwitch: isSet(object.clientCameraSwitch)
                ? exports.ClientCameraSwitch.fromJSON(object.clientCameraSwitch)
                : undefined,
            clientCameraSelectedRequest: isSet(object.clientCameraSelectedRequest)
                ? exports.ClientCameraSelectedRequest.fromJSON(object.clientCameraSelectedRequest)
                : undefined,
            clientWebrtcSessionStart: isSet(object.clientWebrtcSessionStart)
                ? exports.ClientWebrtcSessionStart.fromJSON(object.clientWebrtcSessionStart)
                : undefined,
            clientWebrtcOffer: isSet(object.clientWebrtcOffer)
                ? exports.ClientWebrtcOffer.fromJSON(object.clientWebrtcOffer)
                : undefined,
            clientWebrtcAnswer: isSet(object.clientWebrtcAnswer)
                ? exports.ClientWebrtcAnswer.fromJSON(object.clientWebrtcAnswer)
                : undefined,
            clientWebrtcIceCandidate: isSet(object.clientWebrtcIceCandidate)
                ? exports.ClientWebrtcIceCandidate.fromJSON(object.clientWebrtcIceCandidate)
                : undefined,
            clientDeviceReboot: isSet(object.clientDeviceReboot)
                ? exports.ClientDeviceReboot.fromJSON(object.clientDeviceReboot)
                : undefined,
            clientStatusRequest: isSet(object.clientStatusRequest)
                ? exports.ClientStatusRequest.fromJSON(object.clientStatusRequest)
                : undefined,
            clientModemInfoRequest: isSet(object.clientModemInfoRequest)
                ? exports.ClientModemInfoRequest.fromJSON(object.clientModemInfoRequest)
                : undefined,
            error: isSet(object.error) ? exports.Error.fromJSON(object.error) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.messageId !== "") {
            obj.messageId = message.messageId;
        }
        if (message.correlationId !== "") {
            obj.correlationId = message.correlationId;
        }
        if (message.protocolVersion !== "") {
            obj.protocolVersion = message.protocolVersion;
        }
        if (message.timestamp !== 0) {
            obj.timestamp = Math.round(message.timestamp);
        }
        if (message.deviceModemConnected !== undefined) {
            obj.deviceModemConnected = exports.DeviceModemConnected.toJSON(message.deviceModemConnected);
        }
        if (message.deviceModemInfo !== undefined) {
            obj.deviceModemInfo = exports.DeviceModemInfo.toJSON(message.deviceModemInfo);
        }
        if (message.deviceModemSignalQuality !== undefined) {
            obj.deviceModemSignalQuality = exports.DeviceModemSignalQuality.toJSON(message.deviceModemSignalQuality);
        }
        if (message.deviceModemConnectionError !== undefined) {
            obj.deviceModemConnectionError = exports.DeviceModemConnectionError.toJSON(message.deviceModemConnectionError);
        }
        if (message.deviceModemInfoResponse !== undefined) {
            obj.deviceModemInfoResponse = exports.DeviceModemInfoResponse.toJSON(message.deviceModemInfoResponse);
        }
        if (message.deviceRtspConnected !== undefined) {
            obj.deviceRtspConnected = exports.DeviceRtspConnected.toJSON(message.deviceRtspConnected);
        }
        if (message.deviceRtspStreamReady !== undefined) {
            obj.deviceRtspStreamReady = exports.DeviceRtspStreamReady.toJSON(message.deviceRtspStreamReady);
        }
        if (message.deviceRtspError !== undefined) {
            obj.deviceRtspError = exports.DeviceRtspError.toJSON(message.deviceRtspError);
        }
        if (message.deviceRtspDialError !== undefined) {
            obj.deviceRtspDialError = exports.DeviceRtspDialError.toJSON(message.deviceRtspDialError);
        }
        if (message.deviceRtspDescribeError !== undefined) {
            obj.deviceRtspDescribeError = exports.DeviceRtspDescribeError.toJSON(message.deviceRtspDescribeError);
        }
        if (message.deviceRtspPublishError !== undefined) {
            obj.deviceRtspPublishError = exports.DeviceRtspPublishError.toJSON(message.deviceRtspPublishError);
        }
        if (message.deviceRtspPacketLost !== undefined) {
            obj.deviceRtspPacketLost = exports.DeviceRtspPacketLost.toJSON(message.deviceRtspPacketLost);
        }
        if (message.deviceRtspDecodeError !== undefined) {
            obj.deviceRtspDecodeError = exports.DeviceRtspDecodeError.toJSON(message.deviceRtspDecodeError);
        }
        if (message.deviceRtspListenError !== undefined) {
            obj.deviceRtspListenError = exports.DeviceRtspListenError.toJSON(message.deviceRtspListenError);
        }
        if (message.deviceRtspClientError !== undefined) {
            obj.deviceRtspClientError = exports.DeviceRtspClientError.toJSON(message.deviceRtspClientError);
        }
        if (message.deviceRtspDisconnected !== undefined) {
            obj.deviceRtspDisconnected = exports.DeviceRtspDisconnected.toJSON(message.deviceRtspDisconnected);
        }
        if (message.deviceRtspConnectFailed !== undefined) {
            obj.deviceRtspConnectFailed = exports.DeviceRtspConnectFailed.toJSON(message.deviceRtspConnectFailed);
        }
        if (message.deviceRtspRedialError !== undefined) {
            obj.deviceRtspRedialError = exports.DeviceRtspRedialError.toJSON(message.deviceRtspRedialError);
        }
        if (message.deviceMavlinkConnected !== undefined) {
            obj.deviceMavlinkConnected = exports.DeviceMavlinkConnected.toJSON(message.deviceMavlinkConnected);
        }
        if (message.deviceMavlinkDialError !== undefined) {
            obj.deviceMavlinkDialError = exports.DeviceMavlinkDialError.toJSON(message.deviceMavlinkDialError);
        }
        if (message.deviceWebrtcSessionStarted !== undefined) {
            obj.deviceWebrtcSessionStarted = exports.DeviceWebrtcSessionStarted.toJSON(message.deviceWebrtcSessionStarted);
        }
        if (message.deviceWebrtcOffer !== undefined) {
            obj.deviceWebrtcOffer = exports.DeviceWebrtcOffer.toJSON(message.deviceWebrtcOffer);
        }
        if (message.deviceWebrtcAnswer !== undefined) {
            obj.deviceWebrtcAnswer = exports.DeviceWebrtcAnswer.toJSON(message.deviceWebrtcAnswer);
        }
        if (message.deviceWebrtcIceCandidate !== undefined) {
            obj.deviceWebrtcIceCandidate = exports.DeviceWebrtcIceCandidate.toJSON(message.deviceWebrtcIceCandidate);
        }
        if (message.deviceWebrtcPeerConnected !== undefined) {
            obj.deviceWebrtcPeerConnected = exports.DeviceWebrtcPeerConnected.toJSON(message.deviceWebrtcPeerConnected);
        }
        if (message.deviceWebrtcPeerDisconnected !== undefined) {
            obj.deviceWebrtcPeerDisconnected = exports.DeviceWebrtcPeerDisconnected.toJSON(message.deviceWebrtcPeerDisconnected);
        }
        if (message.deviceWebrtcIceConnected !== undefined) {
            obj.deviceWebrtcIceConnected = exports.DeviceWebrtcIceConnected.toJSON(message.deviceWebrtcIceConnected);
        }
        if (message.deviceWebrtcIceDisconnected !== undefined) {
            obj.deviceWebrtcIceDisconnected = exports.DeviceWebrtcIceDisconnected.toJSON(message.deviceWebrtcIceDisconnected);
        }
        if (message.deviceWebrtcOfferAck !== undefined) {
            obj.deviceWebrtcOfferAck = exports.DeviceWebrtcOfferAck.toJSON(message.deviceWebrtcOfferAck);
        }
        if (message.deviceWebrtcAnswerAck !== undefined) {
            obj.deviceWebrtcAnswerAck = exports.DeviceWebrtcAnswerAck.toJSON(message.deviceWebrtcAnswerAck);
        }
        if (message.deviceWebrtcIceCandidateAck !== undefined) {
            obj.deviceWebrtcIceCandidateAck = exports.DeviceWebrtcIceCandidateAck.toJSON(message.deviceWebrtcIceCandidateAck);
        }
        if (message.deviceWebrtcError !== undefined) {
            obj.deviceWebrtcError = exports.DeviceWebrtcError.toJSON(message.deviceWebrtcError);
        }
        if (message.deviceWebrtcOfferError !== undefined) {
            obj.deviceWebrtcOfferError = exports.DeviceWebrtcOfferError.toJSON(message.deviceWebrtcOfferError);
        }
        if (message.deviceWebrtcSessionStopWarning !== undefined) {
            obj.deviceWebrtcSessionStopWarning = exports.DeviceWebrtcSessionStopWarning.toJSON(message.deviceWebrtcSessionStopWarning);
        }
        if (message.deviceWebrtcPeerConnecting !== undefined) {
            obj.deviceWebrtcPeerConnecting = exports.DeviceWebrtcPeerConnecting.toJSON(message.deviceWebrtcPeerConnecting);
        }
        if (message.deviceWebrtcDataChannelOpen !== undefined) {
            obj.deviceWebrtcDataChannelOpen = exports.DeviceWebrtcDataChannelOpen.toJSON(message.deviceWebrtcDataChannelOpen);
        }
        if (message.deviceCameraListResponse !== undefined) {
            obj.deviceCameraListResponse = exports.DeviceCameraListResponse.toJSON(message.deviceCameraListResponse);
        }
        if (message.deviceCameraListError !== undefined) {
            obj.deviceCameraListError = exports.DeviceCameraListError.toJSON(message.deviceCameraListError);
        }
        if (message.deviceCameraAddSuccess !== undefined) {
            obj.deviceCameraAddSuccess = exports.DeviceCameraAddSuccess.toJSON(message.deviceCameraAddSuccess);
        }
        if (message.deviceCameraAddError !== undefined) {
            obj.deviceCameraAddError = exports.DeviceCameraAddError.toJSON(message.deviceCameraAddError);
        }
        if (message.deviceCameraUpdateSuccess !== undefined) {
            obj.deviceCameraUpdateSuccess = exports.DeviceCameraUpdateSuccess.toJSON(message.deviceCameraUpdateSuccess);
        }
        if (message.deviceCameraUpdateError !== undefined) {
            obj.deviceCameraUpdateError = exports.DeviceCameraUpdateError.toJSON(message.deviceCameraUpdateError);
        }
        if (message.deviceCameraRemoveSuccess !== undefined) {
            obj.deviceCameraRemoveSuccess = exports.DeviceCameraRemoveSuccess.toJSON(message.deviceCameraRemoveSuccess);
        }
        if (message.deviceCameraRemoveError !== undefined) {
            obj.deviceCameraRemoveError = exports.DeviceCameraRemoveError.toJSON(message.deviceCameraRemoveError);
        }
        if (message.deviceCameraSwitchSuccess !== undefined) {
            obj.deviceCameraSwitchSuccess = exports.DeviceCameraSwitchSuccess.toJSON(message.deviceCameraSwitchSuccess);
        }
        if (message.deviceCameraSwitchError !== undefined) {
            obj.deviceCameraSwitchError = exports.DeviceCameraSwitchError.toJSON(message.deviceCameraSwitchError);
        }
        if (message.deviceCameraSelectedResponse !== undefined) {
            obj.deviceCameraSelectedResponse = exports.DeviceCameraSelectedResponse.toJSON(message.deviceCameraSelectedResponse);
        }
        if (message.deviceCameraSelectedError !== undefined) {
            obj.deviceCameraSelectedError = exports.DeviceCameraSelectedError.toJSON(message.deviceCameraSelectedError);
        }
        if (message.deviceNetworkInterfacesResponse !== undefined) {
            obj.deviceNetworkInterfacesResponse = exports.DeviceNetworkInterfacesResponse.toJSON(message.deviceNetworkInterfacesResponse);
        }
        if (message.deviceStatusResponse !== undefined) {
            obj.deviceStatusResponse = exports.DeviceStatusResponse.toJSON(message.deviceStatusResponse);
        }
        if (message.apiDeviceConnected !== undefined) {
            obj.apiDeviceConnected = exports.ApiDeviceConnected.toJSON(message.apiDeviceConnected);
        }
        if (message.apiDeviceDisconnected !== undefined) {
            obj.apiDeviceDisconnected = exports.ApiDeviceDisconnected.toJSON(message.apiDeviceDisconnected);
        }
        if (message.clientRtspDial !== undefined) {
            obj.clientRtspDial = exports.ClientRtspDial.toJSON(message.clientRtspDial);
        }
        if (message.clientNetworkInterfacesRequest !== undefined) {
            obj.clientNetworkInterfacesRequest = exports.ClientNetworkInterfacesRequest.toJSON(message.clientNetworkInterfacesRequest);
        }
        if (message.clientCameraListRequest !== undefined) {
            obj.clientCameraListRequest = exports.ClientCameraListRequest.toJSON(message.clientCameraListRequest);
        }
        if (message.clientCameraAdd !== undefined) {
            obj.clientCameraAdd = exports.ClientCameraAdd.toJSON(message.clientCameraAdd);
        }
        if (message.clientCameraUpdate !== undefined) {
            obj.clientCameraUpdate = exports.ClientCameraUpdate.toJSON(message.clientCameraUpdate);
        }
        if (message.clientCameraRemove !== undefined) {
            obj.clientCameraRemove = exports.ClientCameraRemove.toJSON(message.clientCameraRemove);
        }
        if (message.clientCameraSwitch !== undefined) {
            obj.clientCameraSwitch = exports.ClientCameraSwitch.toJSON(message.clientCameraSwitch);
        }
        if (message.clientCameraSelectedRequest !== undefined) {
            obj.clientCameraSelectedRequest = exports.ClientCameraSelectedRequest.toJSON(message.clientCameraSelectedRequest);
        }
        if (message.clientWebrtcSessionStart !== undefined) {
            obj.clientWebrtcSessionStart = exports.ClientWebrtcSessionStart.toJSON(message.clientWebrtcSessionStart);
        }
        if (message.clientWebrtcOffer !== undefined) {
            obj.clientWebrtcOffer = exports.ClientWebrtcOffer.toJSON(message.clientWebrtcOffer);
        }
        if (message.clientWebrtcAnswer !== undefined) {
            obj.clientWebrtcAnswer = exports.ClientWebrtcAnswer.toJSON(message.clientWebrtcAnswer);
        }
        if (message.clientWebrtcIceCandidate !== undefined) {
            obj.clientWebrtcIceCandidate = exports.ClientWebrtcIceCandidate.toJSON(message.clientWebrtcIceCandidate);
        }
        if (message.clientDeviceReboot !== undefined) {
            obj.clientDeviceReboot = exports.ClientDeviceReboot.toJSON(message.clientDeviceReboot);
        }
        if (message.clientStatusRequest !== undefined) {
            obj.clientStatusRequest = exports.ClientStatusRequest.toJSON(message.clientStatusRequest);
        }
        if (message.clientModemInfoRequest !== undefined) {
            obj.clientModemInfoRequest = exports.ClientModemInfoRequest.toJSON(message.clientModemInfoRequest);
        }
        if (message.error !== undefined) {
            obj.error = exports.Error.toJSON(message.error);
        }
        return obj;
    },
    create(base) {
        return exports.Message.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMessage();
        message.messageId = object.messageId ?? "";
        message.correlationId = object.correlationId ?? "";
        message.protocolVersion = object.protocolVersion ?? "";
        message.timestamp = object.timestamp ?? 0;
        message.deviceModemConnected = (object.deviceModemConnected !== undefined && object.deviceModemConnected !== null)
            ? exports.DeviceModemConnected.fromPartial(object.deviceModemConnected)
            : undefined;
        message.deviceModemInfo = (object.deviceModemInfo !== undefined && object.deviceModemInfo !== null)
            ? exports.DeviceModemInfo.fromPartial(object.deviceModemInfo)
            : undefined;
        message.deviceModemSignalQuality =
            (object.deviceModemSignalQuality !== undefined && object.deviceModemSignalQuality !== null)
                ? exports.DeviceModemSignalQuality.fromPartial(object.deviceModemSignalQuality)
                : undefined;
        message.deviceModemConnectionError =
            (object.deviceModemConnectionError !== undefined && object.deviceModemConnectionError !== null)
                ? exports.DeviceModemConnectionError.fromPartial(object.deviceModemConnectionError)
                : undefined;
        message.deviceModemInfoResponse =
            (object.deviceModemInfoResponse !== undefined && object.deviceModemInfoResponse !== null)
                ? exports.DeviceModemInfoResponse.fromPartial(object.deviceModemInfoResponse)
                : undefined;
        message.deviceRtspConnected = (object.deviceRtspConnected !== undefined && object.deviceRtspConnected !== null)
            ? exports.DeviceRtspConnected.fromPartial(object.deviceRtspConnected)
            : undefined;
        message.deviceRtspStreamReady =
            (object.deviceRtspStreamReady !== undefined && object.deviceRtspStreamReady !== null)
                ? exports.DeviceRtspStreamReady.fromPartial(object.deviceRtspStreamReady)
                : undefined;
        message.deviceRtspError = (object.deviceRtspError !== undefined && object.deviceRtspError !== null)
            ? exports.DeviceRtspError.fromPartial(object.deviceRtspError)
            : undefined;
        message.deviceRtspDialError = (object.deviceRtspDialError !== undefined && object.deviceRtspDialError !== null)
            ? exports.DeviceRtspDialError.fromPartial(object.deviceRtspDialError)
            : undefined;
        message.deviceRtspDescribeError =
            (object.deviceRtspDescribeError !== undefined && object.deviceRtspDescribeError !== null)
                ? exports.DeviceRtspDescribeError.fromPartial(object.deviceRtspDescribeError)
                : undefined;
        message.deviceRtspPublishError =
            (object.deviceRtspPublishError !== undefined && object.deviceRtspPublishError !== null)
                ? exports.DeviceRtspPublishError.fromPartial(object.deviceRtspPublishError)
                : undefined;
        message.deviceRtspPacketLost = (object.deviceRtspPacketLost !== undefined && object.deviceRtspPacketLost !== null)
            ? exports.DeviceRtspPacketLost.fromPartial(object.deviceRtspPacketLost)
            : undefined;
        message.deviceRtspDecodeError =
            (object.deviceRtspDecodeError !== undefined && object.deviceRtspDecodeError !== null)
                ? exports.DeviceRtspDecodeError.fromPartial(object.deviceRtspDecodeError)
                : undefined;
        message.deviceRtspListenError =
            (object.deviceRtspListenError !== undefined && object.deviceRtspListenError !== null)
                ? exports.DeviceRtspListenError.fromPartial(object.deviceRtspListenError)
                : undefined;
        message.deviceRtspClientError =
            (object.deviceRtspClientError !== undefined && object.deviceRtspClientError !== null)
                ? exports.DeviceRtspClientError.fromPartial(object.deviceRtspClientError)
                : undefined;
        message.deviceRtspDisconnected =
            (object.deviceRtspDisconnected !== undefined && object.deviceRtspDisconnected !== null)
                ? exports.DeviceRtspDisconnected.fromPartial(object.deviceRtspDisconnected)
                : undefined;
        message.deviceRtspConnectFailed =
            (object.deviceRtspConnectFailed !== undefined && object.deviceRtspConnectFailed !== null)
                ? exports.DeviceRtspConnectFailed.fromPartial(object.deviceRtspConnectFailed)
                : undefined;
        message.deviceRtspRedialError =
            (object.deviceRtspRedialError !== undefined && object.deviceRtspRedialError !== null)
                ? exports.DeviceRtspRedialError.fromPartial(object.deviceRtspRedialError)
                : undefined;
        message.deviceMavlinkConnected =
            (object.deviceMavlinkConnected !== undefined && object.deviceMavlinkConnected !== null)
                ? exports.DeviceMavlinkConnected.fromPartial(object.deviceMavlinkConnected)
                : undefined;
        message.deviceMavlinkDialError =
            (object.deviceMavlinkDialError !== undefined && object.deviceMavlinkDialError !== null)
                ? exports.DeviceMavlinkDialError.fromPartial(object.deviceMavlinkDialError)
                : undefined;
        message.deviceWebrtcSessionStarted =
            (object.deviceWebrtcSessionStarted !== undefined && object.deviceWebrtcSessionStarted !== null)
                ? exports.DeviceWebrtcSessionStarted.fromPartial(object.deviceWebrtcSessionStarted)
                : undefined;
        message.deviceWebrtcOffer = (object.deviceWebrtcOffer !== undefined && object.deviceWebrtcOffer !== null)
            ? exports.DeviceWebrtcOffer.fromPartial(object.deviceWebrtcOffer)
            : undefined;
        message.deviceWebrtcAnswer = (object.deviceWebrtcAnswer !== undefined && object.deviceWebrtcAnswer !== null)
            ? exports.DeviceWebrtcAnswer.fromPartial(object.deviceWebrtcAnswer)
            : undefined;
        message.deviceWebrtcIceCandidate =
            (object.deviceWebrtcIceCandidate !== undefined && object.deviceWebrtcIceCandidate !== null)
                ? exports.DeviceWebrtcIceCandidate.fromPartial(object.deviceWebrtcIceCandidate)
                : undefined;
        message.deviceWebrtcPeerConnected =
            (object.deviceWebrtcPeerConnected !== undefined && object.deviceWebrtcPeerConnected !== null)
                ? exports.DeviceWebrtcPeerConnected.fromPartial(object.deviceWebrtcPeerConnected)
                : undefined;
        message.deviceWebrtcPeerDisconnected =
            (object.deviceWebrtcPeerDisconnected !== undefined && object.deviceWebrtcPeerDisconnected !== null)
                ? exports.DeviceWebrtcPeerDisconnected.fromPartial(object.deviceWebrtcPeerDisconnected)
                : undefined;
        message.deviceWebrtcIceConnected =
            (object.deviceWebrtcIceConnected !== undefined && object.deviceWebrtcIceConnected !== null)
                ? exports.DeviceWebrtcIceConnected.fromPartial(object.deviceWebrtcIceConnected)
                : undefined;
        message.deviceWebrtcIceDisconnected =
            (object.deviceWebrtcIceDisconnected !== undefined && object.deviceWebrtcIceDisconnected !== null)
                ? exports.DeviceWebrtcIceDisconnected.fromPartial(object.deviceWebrtcIceDisconnected)
                : undefined;
        message.deviceWebrtcOfferAck = (object.deviceWebrtcOfferAck !== undefined && object.deviceWebrtcOfferAck !== null)
            ? exports.DeviceWebrtcOfferAck.fromPartial(object.deviceWebrtcOfferAck)
            : undefined;
        message.deviceWebrtcAnswerAck =
            (object.deviceWebrtcAnswerAck !== undefined && object.deviceWebrtcAnswerAck !== null)
                ? exports.DeviceWebrtcAnswerAck.fromPartial(object.deviceWebrtcAnswerAck)
                : undefined;
        message.deviceWebrtcIceCandidateAck =
            (object.deviceWebrtcIceCandidateAck !== undefined && object.deviceWebrtcIceCandidateAck !== null)
                ? exports.DeviceWebrtcIceCandidateAck.fromPartial(object.deviceWebrtcIceCandidateAck)
                : undefined;
        message.deviceWebrtcError = (object.deviceWebrtcError !== undefined && object.deviceWebrtcError !== null)
            ? exports.DeviceWebrtcError.fromPartial(object.deviceWebrtcError)
            : undefined;
        message.deviceWebrtcOfferError =
            (object.deviceWebrtcOfferError !== undefined && object.deviceWebrtcOfferError !== null)
                ? exports.DeviceWebrtcOfferError.fromPartial(object.deviceWebrtcOfferError)
                : undefined;
        message.deviceWebrtcSessionStopWarning =
            (object.deviceWebrtcSessionStopWarning !== undefined && object.deviceWebrtcSessionStopWarning !== null)
                ? exports.DeviceWebrtcSessionStopWarning.fromPartial(object.deviceWebrtcSessionStopWarning)
                : undefined;
        message.deviceWebrtcPeerConnecting =
            (object.deviceWebrtcPeerConnecting !== undefined && object.deviceWebrtcPeerConnecting !== null)
                ? exports.DeviceWebrtcPeerConnecting.fromPartial(object.deviceWebrtcPeerConnecting)
                : undefined;
        message.deviceWebrtcDataChannelOpen =
            (object.deviceWebrtcDataChannelOpen !== undefined && object.deviceWebrtcDataChannelOpen !== null)
                ? exports.DeviceWebrtcDataChannelOpen.fromPartial(object.deviceWebrtcDataChannelOpen)
                : undefined;
        message.deviceCameraListResponse =
            (object.deviceCameraListResponse !== undefined && object.deviceCameraListResponse !== null)
                ? exports.DeviceCameraListResponse.fromPartial(object.deviceCameraListResponse)
                : undefined;
        message.deviceCameraListError =
            (object.deviceCameraListError !== undefined && object.deviceCameraListError !== null)
                ? exports.DeviceCameraListError.fromPartial(object.deviceCameraListError)
                : undefined;
        message.deviceCameraAddSuccess =
            (object.deviceCameraAddSuccess !== undefined && object.deviceCameraAddSuccess !== null)
                ? exports.DeviceCameraAddSuccess.fromPartial(object.deviceCameraAddSuccess)
                : undefined;
        message.deviceCameraAddError = (object.deviceCameraAddError !== undefined && object.deviceCameraAddError !== null)
            ? exports.DeviceCameraAddError.fromPartial(object.deviceCameraAddError)
            : undefined;
        message.deviceCameraUpdateSuccess =
            (object.deviceCameraUpdateSuccess !== undefined && object.deviceCameraUpdateSuccess !== null)
                ? exports.DeviceCameraUpdateSuccess.fromPartial(object.deviceCameraUpdateSuccess)
                : undefined;
        message.deviceCameraUpdateError =
            (object.deviceCameraUpdateError !== undefined && object.deviceCameraUpdateError !== null)
                ? exports.DeviceCameraUpdateError.fromPartial(object.deviceCameraUpdateError)
                : undefined;
        message.deviceCameraRemoveSuccess =
            (object.deviceCameraRemoveSuccess !== undefined && object.deviceCameraRemoveSuccess !== null)
                ? exports.DeviceCameraRemoveSuccess.fromPartial(object.deviceCameraRemoveSuccess)
                : undefined;
        message.deviceCameraRemoveError =
            (object.deviceCameraRemoveError !== undefined && object.deviceCameraRemoveError !== null)
                ? exports.DeviceCameraRemoveError.fromPartial(object.deviceCameraRemoveError)
                : undefined;
        message.deviceCameraSwitchSuccess =
            (object.deviceCameraSwitchSuccess !== undefined && object.deviceCameraSwitchSuccess !== null)
                ? exports.DeviceCameraSwitchSuccess.fromPartial(object.deviceCameraSwitchSuccess)
                : undefined;
        message.deviceCameraSwitchError =
            (object.deviceCameraSwitchError !== undefined && object.deviceCameraSwitchError !== null)
                ? exports.DeviceCameraSwitchError.fromPartial(object.deviceCameraSwitchError)
                : undefined;
        message.deviceCameraSelectedResponse =
            (object.deviceCameraSelectedResponse !== undefined && object.deviceCameraSelectedResponse !== null)
                ? exports.DeviceCameraSelectedResponse.fromPartial(object.deviceCameraSelectedResponse)
                : undefined;
        message.deviceCameraSelectedError =
            (object.deviceCameraSelectedError !== undefined && object.deviceCameraSelectedError !== null)
                ? exports.DeviceCameraSelectedError.fromPartial(object.deviceCameraSelectedError)
                : undefined;
        message.deviceNetworkInterfacesResponse =
            (object.deviceNetworkInterfacesResponse !== undefined && object.deviceNetworkInterfacesResponse !== null)
                ? exports.DeviceNetworkInterfacesResponse.fromPartial(object.deviceNetworkInterfacesResponse)
                : undefined;
        message.deviceStatusResponse = (object.deviceStatusResponse !== undefined && object.deviceStatusResponse !== null)
            ? exports.DeviceStatusResponse.fromPartial(object.deviceStatusResponse)
            : undefined;
        message.apiDeviceConnected = (object.apiDeviceConnected !== undefined && object.apiDeviceConnected !== null)
            ? exports.ApiDeviceConnected.fromPartial(object.apiDeviceConnected)
            : undefined;
        message.apiDeviceDisconnected =
            (object.apiDeviceDisconnected !== undefined && object.apiDeviceDisconnected !== null)
                ? exports.ApiDeviceDisconnected.fromPartial(object.apiDeviceDisconnected)
                : undefined;
        message.clientRtspDial = (object.clientRtspDial !== undefined && object.clientRtspDial !== null)
            ? exports.ClientRtspDial.fromPartial(object.clientRtspDial)
            : undefined;
        message.clientNetworkInterfacesRequest =
            (object.clientNetworkInterfacesRequest !== undefined && object.clientNetworkInterfacesRequest !== null)
                ? exports.ClientNetworkInterfacesRequest.fromPartial(object.clientNetworkInterfacesRequest)
                : undefined;
        message.clientCameraListRequest =
            (object.clientCameraListRequest !== undefined && object.clientCameraListRequest !== null)
                ? exports.ClientCameraListRequest.fromPartial(object.clientCameraListRequest)
                : undefined;
        message.clientCameraAdd = (object.clientCameraAdd !== undefined && object.clientCameraAdd !== null)
            ? exports.ClientCameraAdd.fromPartial(object.clientCameraAdd)
            : undefined;
        message.clientCameraUpdate = (object.clientCameraUpdate !== undefined && object.clientCameraUpdate !== null)
            ? exports.ClientCameraUpdate.fromPartial(object.clientCameraUpdate)
            : undefined;
        message.clientCameraRemove = (object.clientCameraRemove !== undefined && object.clientCameraRemove !== null)
            ? exports.ClientCameraRemove.fromPartial(object.clientCameraRemove)
            : undefined;
        message.clientCameraSwitch = (object.clientCameraSwitch !== undefined && object.clientCameraSwitch !== null)
            ? exports.ClientCameraSwitch.fromPartial(object.clientCameraSwitch)
            : undefined;
        message.clientCameraSelectedRequest =
            (object.clientCameraSelectedRequest !== undefined && object.clientCameraSelectedRequest !== null)
                ? exports.ClientCameraSelectedRequest.fromPartial(object.clientCameraSelectedRequest)
                : undefined;
        message.clientWebrtcSessionStart =
            (object.clientWebrtcSessionStart !== undefined && object.clientWebrtcSessionStart !== null)
                ? exports.ClientWebrtcSessionStart.fromPartial(object.clientWebrtcSessionStart)
                : undefined;
        message.clientWebrtcOffer = (object.clientWebrtcOffer !== undefined && object.clientWebrtcOffer !== null)
            ? exports.ClientWebrtcOffer.fromPartial(object.clientWebrtcOffer)
            : undefined;
        message.clientWebrtcAnswer = (object.clientWebrtcAnswer !== undefined && object.clientWebrtcAnswer !== null)
            ? exports.ClientWebrtcAnswer.fromPartial(object.clientWebrtcAnswer)
            : undefined;
        message.clientWebrtcIceCandidate =
            (object.clientWebrtcIceCandidate !== undefined && object.clientWebrtcIceCandidate !== null)
                ? exports.ClientWebrtcIceCandidate.fromPartial(object.clientWebrtcIceCandidate)
                : undefined;
        message.clientDeviceReboot = (object.clientDeviceReboot !== undefined && object.clientDeviceReboot !== null)
            ? exports.ClientDeviceReboot.fromPartial(object.clientDeviceReboot)
            : undefined;
        message.clientStatusRequest = (object.clientStatusRequest !== undefined && object.clientStatusRequest !== null)
            ? exports.ClientStatusRequest.fromPartial(object.clientStatusRequest)
            : undefined;
        message.clientModemInfoRequest =
            (object.clientModemInfoRequest !== undefined && object.clientModemInfoRequest !== null)
                ? exports.ClientModemInfoRequest.fromPartial(object.clientModemInfoRequest)
                : undefined;
        message.error = (object.error !== undefined && object.error !== null) ? exports.Error.fromPartial(object.error) : undefined;
        return message;
    },
};
function createBaseDeviceModemConnected() {
    return { status: "" };
}
exports.DeviceModemConnected = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.status !== "") {
            writer.uint32(10).string(message.status);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceModemConnected();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.status = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { status: isSet(object.status) ? globalThis.String(object.status) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.status !== "") {
            obj.status = message.status;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceModemConnected.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceModemConnected();
        message.status = object.status ?? "";
        return message;
    },
};
function createBaseDeviceModemInfo() {
    return { event: undefined, signalQuality: undefined };
}
exports.DeviceModemInfo = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.event !== undefined) {
            common_1.Event.encode(message.event, writer.uint32(10).fork()).ldelim();
        }
        if (message.signalQuality !== undefined) {
            common_1.SignalQuality.encode(message.signalQuality, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceModemInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.event = common_1.Event.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.signalQuality = common_1.SignalQuality.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            event: isSet(object.event) ? common_1.Event.fromJSON(object.event) : undefined,
            signalQuality: isSet(object.signalQuality) ? common_1.SignalQuality.fromJSON(object.signalQuality) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.event !== undefined) {
            obj.event = common_1.Event.toJSON(message.event);
        }
        if (message.signalQuality !== undefined) {
            obj.signalQuality = common_1.SignalQuality.toJSON(message.signalQuality);
        }
        return obj;
    },
    create(base) {
        return exports.DeviceModemInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceModemInfo();
        message.event = (object.event !== undefined && object.event !== null) ? common_1.Event.fromPartial(object.event) : undefined;
        message.signalQuality = (object.signalQuality !== undefined && object.signalQuality !== null)
            ? common_1.SignalQuality.fromPartial(object.signalQuality)
            : undefined;
        return message;
    },
};
function createBaseDeviceModemSignalQuality() {
    return { event: undefined, signalQuality: undefined };
}
exports.DeviceModemSignalQuality = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.event !== undefined) {
            common_1.Event.encode(message.event, writer.uint32(10).fork()).ldelim();
        }
        if (message.signalQuality !== undefined) {
            common_1.SignalQuality.encode(message.signalQuality, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceModemSignalQuality();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.event = common_1.Event.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.signalQuality = common_1.SignalQuality.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            event: isSet(object.event) ? common_1.Event.fromJSON(object.event) : undefined,
            signalQuality: isSet(object.signalQuality) ? common_1.SignalQuality.fromJSON(object.signalQuality) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.event !== undefined) {
            obj.event = common_1.Event.toJSON(message.event);
        }
        if (message.signalQuality !== undefined) {
            obj.signalQuality = common_1.SignalQuality.toJSON(message.signalQuality);
        }
        return obj;
    },
    create(base) {
        return exports.DeviceModemSignalQuality.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceModemSignalQuality();
        message.event = (object.event !== undefined && object.event !== null) ? common_1.Event.fromPartial(object.event) : undefined;
        message.signalQuality = (object.signalQuality !== undefined && object.signalQuality !== null)
            ? common_1.SignalQuality.fromPartial(object.signalQuality)
            : undefined;
        return message;
    },
};
function createBaseDeviceModemConnectionError() {
    return { error: "" };
}
exports.DeviceModemConnectionError = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.error !== "") {
            writer.uint32(10).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceModemConnectionError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.error !== "") {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceModemConnectionError.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceModemConnectionError();
        message.error = object.error ?? "";
        return message;
    },
};
function createBaseDeviceModemInfoResponse() {
    return { status: "", model: "", manufacturer: "", imei: "", signalQuality: undefined };
}
exports.DeviceModemInfoResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.status !== "") {
            writer.uint32(10).string(message.status);
        }
        if (message.model !== "") {
            writer.uint32(18).string(message.model);
        }
        if (message.manufacturer !== "") {
            writer.uint32(26).string(message.manufacturer);
        }
        if (message.imei !== "") {
            writer.uint32(34).string(message.imei);
        }
        if (message.signalQuality !== undefined) {
            common_1.SignalQuality.encode(message.signalQuality, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceModemInfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.status = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.model = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.manufacturer = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.imei = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.signalQuality = common_1.SignalQuality.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            status: isSet(object.status) ? globalThis.String(object.status) : "",
            model: isSet(object.model) ? globalThis.String(object.model) : "",
            manufacturer: isSet(object.manufacturer) ? globalThis.String(object.manufacturer) : "",
            imei: isSet(object.imei) ? globalThis.String(object.imei) : "",
            signalQuality: isSet(object.signalQuality) ? common_1.SignalQuality.fromJSON(object.signalQuality) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.status !== "") {
            obj.status = message.status;
        }
        if (message.model !== "") {
            obj.model = message.model;
        }
        if (message.manufacturer !== "") {
            obj.manufacturer = message.manufacturer;
        }
        if (message.imei !== "") {
            obj.imei = message.imei;
        }
        if (message.signalQuality !== undefined) {
            obj.signalQuality = common_1.SignalQuality.toJSON(message.signalQuality);
        }
        return obj;
    },
    create(base) {
        return exports.DeviceModemInfoResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceModemInfoResponse();
        message.status = object.status ?? "";
        message.model = object.model ?? "";
        message.manufacturer = object.manufacturer ?? "";
        message.imei = object.imei ?? "";
        message.signalQuality = (object.signalQuality !== undefined && object.signalQuality !== null)
            ? common_1.SignalQuality.fromPartial(object.signalQuality)
            : undefined;
        return message;
    },
};
function createBaseDeviceRtspConnected() {
    return { status: "" };
}
exports.DeviceRtspConnected = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.status !== "") {
            writer.uint32(10).string(message.status);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceRtspConnected();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.status = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { status: isSet(object.status) ? globalThis.String(object.status) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.status !== "") {
            obj.status = message.status;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceRtspConnected.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceRtspConnected();
        message.status = object.status ?? "";
        return message;
    },
};
function createBaseDeviceRtspStreamReady() {
    return { status: "" };
}
exports.DeviceRtspStreamReady = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.status !== "") {
            writer.uint32(10).string(message.status);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceRtspStreamReady();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.status = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { status: isSet(object.status) ? globalThis.String(object.status) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.status !== "") {
            obj.status = message.status;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceRtspStreamReady.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceRtspStreamReady();
        message.status = object.status ?? "";
        return message;
    },
};
function createBaseDeviceRtspError() {
    return { error: "" };
}
exports.DeviceRtspError = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.error !== "") {
            writer.uint32(10).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceRtspError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.error !== "") {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceRtspError.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceRtspError();
        message.error = object.error ?? "";
        return message;
    },
};
function createBaseDeviceRtspDialError() {
    return { error: "" };
}
exports.DeviceRtspDialError = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.error !== "") {
            writer.uint32(10).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceRtspDialError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.error !== "") {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceRtspDialError.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceRtspDialError();
        message.error = object.error ?? "";
        return message;
    },
};
function createBaseDeviceRtspDescribeError() {
    return { error: "" };
}
exports.DeviceRtspDescribeError = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.error !== "") {
            writer.uint32(10).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceRtspDescribeError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.error !== "") {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceRtspDescribeError.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceRtspDescribeError();
        message.error = object.error ?? "";
        return message;
    },
};
function createBaseDeviceRtspPublishError() {
    return { error: "" };
}
exports.DeviceRtspPublishError = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.error !== "") {
            writer.uint32(10).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceRtspPublishError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.error !== "") {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceRtspPublishError.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceRtspPublishError();
        message.error = object.error ?? "";
        return message;
    },
};
function createBaseDeviceRtspPacketLost() {
    return { details: "" };
}
exports.DeviceRtspPacketLost = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.details !== "") {
            writer.uint32(10).string(message.details);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceRtspPacketLost();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? globalThis.String(object.details) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== "") {
            obj.details = message.details;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceRtspPacketLost.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceRtspPacketLost();
        message.details = object.details ?? "";
        return message;
    },
};
function createBaseDeviceRtspDecodeError() {
    return { error: "" };
}
exports.DeviceRtspDecodeError = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.error !== "") {
            writer.uint32(10).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceRtspDecodeError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.error !== "") {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceRtspDecodeError.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceRtspDecodeError();
        message.error = object.error ?? "";
        return message;
    },
};
function createBaseDeviceRtspListenError() {
    return { error: "" };
}
exports.DeviceRtspListenError = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.error !== "") {
            writer.uint32(10).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceRtspListenError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.error !== "") {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceRtspListenError.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceRtspListenError();
        message.error = object.error ?? "";
        return message;
    },
};
function createBaseDeviceRtspClientError() {
    return { error: "" };
}
exports.DeviceRtspClientError = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.error !== "") {
            writer.uint32(10).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceRtspClientError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.error !== "") {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceRtspClientError.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceRtspClientError();
        message.error = object.error ?? "";
        return message;
    },
};
function createBaseDeviceRtspDisconnected() {
    return { reason: "" };
}
exports.DeviceRtspDisconnected = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.reason !== "") {
            writer.uint32(10).string(message.reason);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceRtspDisconnected();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.reason = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { reason: isSet(object.reason) ? globalThis.String(object.reason) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.reason !== "") {
            obj.reason = message.reason;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceRtspDisconnected.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceRtspDisconnected();
        message.reason = object.reason ?? "";
        return message;
    },
};
function createBaseDeviceRtspConnectFailed() {
    return { error: "" };
}
exports.DeviceRtspConnectFailed = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.error !== "") {
            writer.uint32(10).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceRtspConnectFailed();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.error !== "") {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceRtspConnectFailed.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceRtspConnectFailed();
        message.error = object.error ?? "";
        return message;
    },
};
function createBaseDeviceRtspRedialError() {
    return { error: "" };
}
exports.DeviceRtspRedialError = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.error !== "") {
            writer.uint32(10).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceRtspRedialError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.error !== "") {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceRtspRedialError.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceRtspRedialError();
        message.error = object.error ?? "";
        return message;
    },
};
function createBaseDeviceMavlinkConnected() {
    return { status: "" };
}
exports.DeviceMavlinkConnected = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.status !== "") {
            writer.uint32(10).string(message.status);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceMavlinkConnected();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.status = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { status: isSet(object.status) ? globalThis.String(object.status) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.status !== "") {
            obj.status = message.status;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceMavlinkConnected.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceMavlinkConnected();
        message.status = object.status ?? "";
        return message;
    },
};
function createBaseDeviceMavlinkDialError() {
    return { error: "" };
}
exports.DeviceMavlinkDialError = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.error !== "") {
            writer.uint32(10).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceMavlinkDialError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.error !== "") {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceMavlinkDialError.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceMavlinkDialError();
        message.error = object.error ?? "";
        return message;
    },
};
function createBaseDeviceWebrtcSessionStarted() {
    return {};
}
exports.DeviceWebrtcSessionStarted = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceWebrtcSessionStarted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.DeviceWebrtcSessionStarted.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseDeviceWebrtcSessionStarted();
        return message;
    },
};
function createBaseDeviceWebrtcOffer() {
    return { sdp: "" };
}
exports.DeviceWebrtcOffer = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sdp !== "") {
            writer.uint32(10).string(message.sdp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceWebrtcOffer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sdp = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { sdp: isSet(object.sdp) ? globalThis.String(object.sdp) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.sdp !== "") {
            obj.sdp = message.sdp;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceWebrtcOffer.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceWebrtcOffer();
        message.sdp = object.sdp ?? "";
        return message;
    },
};
function createBaseDeviceWebrtcAnswer() {
    return { sdp: "" };
}
exports.DeviceWebrtcAnswer = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sdp !== "") {
            writer.uint32(10).string(message.sdp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceWebrtcAnswer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sdp = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { sdp: isSet(object.sdp) ? globalThis.String(object.sdp) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.sdp !== "") {
            obj.sdp = message.sdp;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceWebrtcAnswer.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceWebrtcAnswer();
        message.sdp = object.sdp ?? "";
        return message;
    },
};
function createBaseDeviceWebrtcIceCandidate() {
    return { candidate: "", sdpMid: "", sdpMLineIndex: 0, usernameFragment: "" };
}
exports.DeviceWebrtcIceCandidate = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.candidate !== "") {
            writer.uint32(10).string(message.candidate);
        }
        if (message.sdpMid !== "") {
            writer.uint32(18).string(message.sdpMid);
        }
        if (message.sdpMLineIndex !== 0) {
            writer.uint32(24).int32(message.sdpMLineIndex);
        }
        if (message.usernameFragment !== "") {
            writer.uint32(34).string(message.usernameFragment);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceWebrtcIceCandidate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.candidate = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.sdpMid = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.sdpMLineIndex = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.usernameFragment = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            candidate: isSet(object.candidate) ? globalThis.String(object.candidate) : "",
            sdpMid: isSet(object.sdpMid) ? globalThis.String(object.sdpMid) : "",
            sdpMLineIndex: isSet(object.sdpMLineIndex) ? globalThis.Number(object.sdpMLineIndex) : 0,
            usernameFragment: isSet(object.usernameFragment) ? globalThis.String(object.usernameFragment) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.candidate !== "") {
            obj.candidate = message.candidate;
        }
        if (message.sdpMid !== "") {
            obj.sdpMid = message.sdpMid;
        }
        if (message.sdpMLineIndex !== 0) {
            obj.sdpMLineIndex = Math.round(message.sdpMLineIndex);
        }
        if (message.usernameFragment !== "") {
            obj.usernameFragment = message.usernameFragment;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceWebrtcIceCandidate.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceWebrtcIceCandidate();
        message.candidate = object.candidate ?? "";
        message.sdpMid = object.sdpMid ?? "";
        message.sdpMLineIndex = object.sdpMLineIndex ?? 0;
        message.usernameFragment = object.usernameFragment ?? "";
        return message;
    },
};
function createBaseDeviceWebrtcPeerConnected() {
    return {};
}
exports.DeviceWebrtcPeerConnected = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceWebrtcPeerConnected();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.DeviceWebrtcPeerConnected.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseDeviceWebrtcPeerConnected();
        return message;
    },
};
function createBaseDeviceWebrtcPeerDisconnected() {
    return { reason: "" };
}
exports.DeviceWebrtcPeerDisconnected = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.reason !== "") {
            writer.uint32(10).string(message.reason);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceWebrtcPeerDisconnected();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.reason = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { reason: isSet(object.reason) ? globalThis.String(object.reason) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.reason !== "") {
            obj.reason = message.reason;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceWebrtcPeerDisconnected.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceWebrtcPeerDisconnected();
        message.reason = object.reason ?? "";
        return message;
    },
};
function createBaseDeviceWebrtcIceConnected() {
    return {};
}
exports.DeviceWebrtcIceConnected = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceWebrtcIceConnected();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.DeviceWebrtcIceConnected.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseDeviceWebrtcIceConnected();
        return message;
    },
};
function createBaseDeviceWebrtcIceDisconnected() {
    return { reason: "" };
}
exports.DeviceWebrtcIceDisconnected = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.reason !== "") {
            writer.uint32(10).string(message.reason);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceWebrtcIceDisconnected();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.reason = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { reason: isSet(object.reason) ? globalThis.String(object.reason) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.reason !== "") {
            obj.reason = message.reason;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceWebrtcIceDisconnected.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceWebrtcIceDisconnected();
        message.reason = object.reason ?? "";
        return message;
    },
};
function createBaseDeviceWebrtcOfferAck() {
    return {};
}
exports.DeviceWebrtcOfferAck = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceWebrtcOfferAck();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.DeviceWebrtcOfferAck.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseDeviceWebrtcOfferAck();
        return message;
    },
};
function createBaseDeviceWebrtcAnswerAck() {
    return {};
}
exports.DeviceWebrtcAnswerAck = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceWebrtcAnswerAck();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.DeviceWebrtcAnswerAck.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseDeviceWebrtcAnswerAck();
        return message;
    },
};
function createBaseDeviceWebrtcIceCandidateAck() {
    return {};
}
exports.DeviceWebrtcIceCandidateAck = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceWebrtcIceCandidateAck();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.DeviceWebrtcIceCandidateAck.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseDeviceWebrtcIceCandidateAck();
        return message;
    },
};
function createBaseDeviceWebrtcError() {
    return { error: "" };
}
exports.DeviceWebrtcError = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.error !== "") {
            writer.uint32(10).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceWebrtcError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.error !== "") {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceWebrtcError.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceWebrtcError();
        message.error = object.error ?? "";
        return message;
    },
};
function createBaseDeviceWebrtcOfferError() {
    return { error: "" };
}
exports.DeviceWebrtcOfferError = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.error !== "") {
            writer.uint32(10).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceWebrtcOfferError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.error !== "") {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceWebrtcOfferError.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceWebrtcOfferError();
        message.error = object.error ?? "";
        return message;
    },
};
function createBaseDeviceWebrtcSessionStopWarning() {
    return { reason: "" };
}
exports.DeviceWebrtcSessionStopWarning = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.reason !== "") {
            writer.uint32(10).string(message.reason);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceWebrtcSessionStopWarning();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.reason = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { reason: isSet(object.reason) ? globalThis.String(object.reason) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.reason !== "") {
            obj.reason = message.reason;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceWebrtcSessionStopWarning.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceWebrtcSessionStopWarning();
        message.reason = object.reason ?? "";
        return message;
    },
};
function createBaseDeviceWebrtcPeerConnecting() {
    return { status: "" };
}
exports.DeviceWebrtcPeerConnecting = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.status !== "") {
            writer.uint32(10).string(message.status);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceWebrtcPeerConnecting();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.status = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { status: isSet(object.status) ? globalThis.String(object.status) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.status !== "") {
            obj.status = message.status;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceWebrtcPeerConnecting.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceWebrtcPeerConnecting();
        message.status = object.status ?? "";
        return message;
    },
};
function createBaseDeviceWebrtcDataChannelOpen() {
    return { channelId: "" };
}
exports.DeviceWebrtcDataChannelOpen = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channelId !== "") {
            writer.uint32(10).string(message.channelId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceWebrtcDataChannelOpen();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channelId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { channelId: isSet(object.channelId) ? globalThis.String(object.channelId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.channelId !== "") {
            obj.channelId = message.channelId;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceWebrtcDataChannelOpen.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceWebrtcDataChannelOpen();
        message.channelId = object.channelId ?? "";
        return message;
    },
};
function createBaseDeviceCameraListResponse() {
    return { cameras: [] };
}
exports.DeviceCameraListResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.cameras) {
            common_1.Camera.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceCameraListResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.cameras.push(common_1.Camera.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            cameras: globalThis.Array.isArray(object?.cameras) ? object.cameras.map((e) => common_1.Camera.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.cameras?.length) {
            obj.cameras = message.cameras.map((e) => common_1.Camera.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.DeviceCameraListResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceCameraListResponse();
        message.cameras = object.cameras?.map((e) => common_1.Camera.fromPartial(e)) || [];
        return message;
    },
};
function createBaseDeviceCameraListError() {
    return { error: "" };
}
exports.DeviceCameraListError = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.error !== "") {
            writer.uint32(10).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceCameraListError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.error !== "") {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceCameraListError.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceCameraListError();
        message.error = object.error ?? "";
        return message;
    },
};
function createBaseDeviceCameraAddSuccess() {
    return { camera: undefined };
}
exports.DeviceCameraAddSuccess = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.camera !== undefined) {
            common_1.Camera.encode(message.camera, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceCameraAddSuccess();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.camera = common_1.Camera.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { camera: isSet(object.camera) ? common_1.Camera.fromJSON(object.camera) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.camera !== undefined) {
            obj.camera = common_1.Camera.toJSON(message.camera);
        }
        return obj;
    },
    create(base) {
        return exports.DeviceCameraAddSuccess.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceCameraAddSuccess();
        message.camera = (object.camera !== undefined && object.camera !== null)
            ? common_1.Camera.fromPartial(object.camera)
            : undefined;
        return message;
    },
};
function createBaseDeviceCameraAddError() {
    return { error: "" };
}
exports.DeviceCameraAddError = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.error !== "") {
            writer.uint32(10).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceCameraAddError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.error !== "") {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceCameraAddError.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceCameraAddError();
        message.error = object.error ?? "";
        return message;
    },
};
function createBaseDeviceCameraUpdateSuccess() {
    return { camera: undefined };
}
exports.DeviceCameraUpdateSuccess = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.camera !== undefined) {
            common_1.Camera.encode(message.camera, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceCameraUpdateSuccess();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.camera = common_1.Camera.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { camera: isSet(object.camera) ? common_1.Camera.fromJSON(object.camera) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.camera !== undefined) {
            obj.camera = common_1.Camera.toJSON(message.camera);
        }
        return obj;
    },
    create(base) {
        return exports.DeviceCameraUpdateSuccess.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceCameraUpdateSuccess();
        message.camera = (object.camera !== undefined && object.camera !== null)
            ? common_1.Camera.fromPartial(object.camera)
            : undefined;
        return message;
    },
};
function createBaseDeviceCameraUpdateError() {
    return { error: "" };
}
exports.DeviceCameraUpdateError = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.error !== "") {
            writer.uint32(10).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceCameraUpdateError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.error !== "") {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceCameraUpdateError.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceCameraUpdateError();
        message.error = object.error ?? "";
        return message;
    },
};
function createBaseDeviceCameraRemoveSuccess() {
    return { cameraId: "" };
}
exports.DeviceCameraRemoveSuccess = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.cameraId !== "") {
            writer.uint32(10).string(message.cameraId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceCameraRemoveSuccess();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.cameraId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { cameraId: isSet(object.cameraId) ? globalThis.String(object.cameraId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.cameraId !== "") {
            obj.cameraId = message.cameraId;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceCameraRemoveSuccess.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceCameraRemoveSuccess();
        message.cameraId = object.cameraId ?? "";
        return message;
    },
};
function createBaseDeviceCameraRemoveError() {
    return { error: "" };
}
exports.DeviceCameraRemoveError = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.error !== "") {
            writer.uint32(10).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceCameraRemoveError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.error !== "") {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceCameraRemoveError.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceCameraRemoveError();
        message.error = object.error ?? "";
        return message;
    },
};
function createBaseDeviceCameraSwitchSuccess() {
    return { cameraId: "" };
}
exports.DeviceCameraSwitchSuccess = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.cameraId !== "") {
            writer.uint32(10).string(message.cameraId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceCameraSwitchSuccess();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.cameraId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { cameraId: isSet(object.cameraId) ? globalThis.String(object.cameraId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.cameraId !== "") {
            obj.cameraId = message.cameraId;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceCameraSwitchSuccess.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceCameraSwitchSuccess();
        message.cameraId = object.cameraId ?? "";
        return message;
    },
};
function createBaseDeviceCameraSwitchError() {
    return { error: "" };
}
exports.DeviceCameraSwitchError = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.error !== "") {
            writer.uint32(10).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceCameraSwitchError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.error !== "") {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceCameraSwitchError.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceCameraSwitchError();
        message.error = object.error ?? "";
        return message;
    },
};
function createBaseDeviceCameraSelectedResponse() {
    return { camera: undefined };
}
exports.DeviceCameraSelectedResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.camera !== undefined) {
            common_1.Camera.encode(message.camera, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceCameraSelectedResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.camera = common_1.Camera.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { camera: isSet(object.camera) ? common_1.Camera.fromJSON(object.camera) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.camera !== undefined) {
            obj.camera = common_1.Camera.toJSON(message.camera);
        }
        return obj;
    },
    create(base) {
        return exports.DeviceCameraSelectedResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceCameraSelectedResponse();
        message.camera = (object.camera !== undefined && object.camera !== null)
            ? common_1.Camera.fromPartial(object.camera)
            : undefined;
        return message;
    },
};
function createBaseDeviceCameraSelectedError() {
    return { error: "" };
}
exports.DeviceCameraSelectedError = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.error !== "") {
            writer.uint32(10).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceCameraSelectedError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.error !== "") {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.DeviceCameraSelectedError.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceCameraSelectedError();
        message.error = object.error ?? "";
        return message;
    },
};
function createBaseDeviceNetworkInterfacesResponse() {
    return { interfaces: [] };
}
exports.DeviceNetworkInterfacesResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.interfaces) {
            common_1.InterfaceInfo.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceNetworkInterfacesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.interfaces.push(common_1.InterfaceInfo.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            interfaces: globalThis.Array.isArray(object?.interfaces)
                ? object.interfaces.map((e) => common_1.InterfaceInfo.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.interfaces?.length) {
            obj.interfaces = message.interfaces.map((e) => common_1.InterfaceInfo.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.DeviceNetworkInterfacesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceNetworkInterfacesResponse();
        message.interfaces = object.interfaces?.map((e) => common_1.InterfaceInfo.fromPartial(e)) || [];
        return message;
    },
};
function createBaseDeviceStatusResponse() {
    return { status: undefined };
}
exports.DeviceStatusResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.status !== undefined) {
            common_1.ServiceStatus.encode(message.status, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeviceStatusResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.status = common_1.ServiceStatus.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { status: isSet(object.status) ? common_1.ServiceStatus.fromJSON(object.status) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.status !== undefined) {
            obj.status = common_1.ServiceStatus.toJSON(message.status);
        }
        return obj;
    },
    create(base) {
        return exports.DeviceStatusResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeviceStatusResponse();
        message.status = (object.status !== undefined && object.status !== null)
            ? common_1.ServiceStatus.fromPartial(object.status)
            : undefined;
        return message;
    },
};
function createBaseApiDeviceConnected() {
    return { deviceId: "" };
}
exports.ApiDeviceConnected = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.deviceId !== "") {
            writer.uint32(10).string(message.deviceId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseApiDeviceConnected();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.deviceId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { deviceId: isSet(object.deviceId) ? globalThis.String(object.deviceId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.deviceId !== "") {
            obj.deviceId = message.deviceId;
        }
        return obj;
    },
    create(base) {
        return exports.ApiDeviceConnected.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseApiDeviceConnected();
        message.deviceId = object.deviceId ?? "";
        return message;
    },
};
function createBaseApiDeviceDisconnected() {
    return { deviceId: "", reason: "" };
}
exports.ApiDeviceDisconnected = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.deviceId !== "") {
            writer.uint32(10).string(message.deviceId);
        }
        if (message.reason !== "") {
            writer.uint32(18).string(message.reason);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseApiDeviceDisconnected();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.deviceId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.reason = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            deviceId: isSet(object.deviceId) ? globalThis.String(object.deviceId) : "",
            reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.deviceId !== "") {
            obj.deviceId = message.deviceId;
        }
        if (message.reason !== "") {
            obj.reason = message.reason;
        }
        return obj;
    },
    create(base) {
        return exports.ApiDeviceDisconnected.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseApiDeviceDisconnected();
        message.deviceId = object.deviceId ?? "";
        message.reason = object.reason ?? "";
        return message;
    },
};
function createBaseClientRtspDial() {
    return { url: "" };
}
exports.ClientRtspDial = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.url !== "") {
            writer.uint32(10).string(message.url);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClientRtspDial();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { url: isSet(object.url) ? globalThis.String(object.url) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.url !== "") {
            obj.url = message.url;
        }
        return obj;
    },
    create(base) {
        return exports.ClientRtspDial.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseClientRtspDial();
        message.url = object.url ?? "";
        return message;
    },
};
function createBaseClientNetworkInterfacesRequest() {
    return {};
}
exports.ClientNetworkInterfacesRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClientNetworkInterfacesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ClientNetworkInterfacesRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseClientNetworkInterfacesRequest();
        return message;
    },
};
function createBaseClientCameraListRequest() {
    return {};
}
exports.ClientCameraListRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClientCameraListRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ClientCameraListRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseClientCameraListRequest();
        return message;
    },
};
function createBaseClientCameraAdd() {
    return { name: "", rtspUrl: "", networkInterface: "" };
}
exports.ClientCameraAdd = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.rtspUrl !== "") {
            writer.uint32(18).string(message.rtspUrl);
        }
        if (message.networkInterface !== "") {
            writer.uint32(26).string(message.networkInterface);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClientCameraAdd();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.rtspUrl = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.networkInterface = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            rtspUrl: isSet(object.rtspUrl) ? globalThis.String(object.rtspUrl) : "",
            networkInterface: isSet(object.networkInterface) ? globalThis.String(object.networkInterface) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.rtspUrl !== "") {
            obj.rtspUrl = message.rtspUrl;
        }
        if (message.networkInterface !== "") {
            obj.networkInterface = message.networkInterface;
        }
        return obj;
    },
    create(base) {
        return exports.ClientCameraAdd.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseClientCameraAdd();
        message.name = object.name ?? "";
        message.rtspUrl = object.rtspUrl ?? "";
        message.networkInterface = object.networkInterface ?? "";
        return message;
    },
};
function createBaseClientCameraUpdate() {
    return { camera: undefined };
}
exports.ClientCameraUpdate = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.camera !== undefined) {
            common_1.Camera.encode(message.camera, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClientCameraUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.camera = common_1.Camera.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { camera: isSet(object.camera) ? common_1.Camera.fromJSON(object.camera) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.camera !== undefined) {
            obj.camera = common_1.Camera.toJSON(message.camera);
        }
        return obj;
    },
    create(base) {
        return exports.ClientCameraUpdate.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseClientCameraUpdate();
        message.camera = (object.camera !== undefined && object.camera !== null)
            ? common_1.Camera.fromPartial(object.camera)
            : undefined;
        return message;
    },
};
function createBaseClientCameraRemove() {
    return { cameraId: "" };
}
exports.ClientCameraRemove = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.cameraId !== "") {
            writer.uint32(10).string(message.cameraId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClientCameraRemove();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.cameraId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { cameraId: isSet(object.cameraId) ? globalThis.String(object.cameraId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.cameraId !== "") {
            obj.cameraId = message.cameraId;
        }
        return obj;
    },
    create(base) {
        return exports.ClientCameraRemove.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseClientCameraRemove();
        message.cameraId = object.cameraId ?? "";
        return message;
    },
};
function createBaseClientCameraSwitch() {
    return { cameraId: "" };
}
exports.ClientCameraSwitch = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.cameraId !== "") {
            writer.uint32(10).string(message.cameraId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClientCameraSwitch();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.cameraId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { cameraId: isSet(object.cameraId) ? globalThis.String(object.cameraId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.cameraId !== "") {
            obj.cameraId = message.cameraId;
        }
        return obj;
    },
    create(base) {
        return exports.ClientCameraSwitch.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseClientCameraSwitch();
        message.cameraId = object.cameraId ?? "";
        return message;
    },
};
function createBaseClientCameraSelectedRequest() {
    return {};
}
exports.ClientCameraSelectedRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClientCameraSelectedRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ClientCameraSelectedRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseClientCameraSelectedRequest();
        return message;
    },
};
function createBaseClientWebrtcSessionStart() {
    return {};
}
exports.ClientWebrtcSessionStart = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClientWebrtcSessionStart();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ClientWebrtcSessionStart.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseClientWebrtcSessionStart();
        return message;
    },
};
function createBaseClientWebrtcOffer() {
    return { sdp: "" };
}
exports.ClientWebrtcOffer = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sdp !== "") {
            writer.uint32(10).string(message.sdp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClientWebrtcOffer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sdp = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { sdp: isSet(object.sdp) ? globalThis.String(object.sdp) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.sdp !== "") {
            obj.sdp = message.sdp;
        }
        return obj;
    },
    create(base) {
        return exports.ClientWebrtcOffer.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseClientWebrtcOffer();
        message.sdp = object.sdp ?? "";
        return message;
    },
};
function createBaseClientWebrtcAnswer() {
    return { sdp: "" };
}
exports.ClientWebrtcAnswer = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sdp !== "") {
            writer.uint32(10).string(message.sdp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClientWebrtcAnswer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sdp = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { sdp: isSet(object.sdp) ? globalThis.String(object.sdp) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.sdp !== "") {
            obj.sdp = message.sdp;
        }
        return obj;
    },
    create(base) {
        return exports.ClientWebrtcAnswer.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseClientWebrtcAnswer();
        message.sdp = object.sdp ?? "";
        return message;
    },
};
function createBaseClientWebrtcIceCandidate() {
    return { candidate: "", sdpMid: "", sdpMLineIndex: 0, usernameFragment: "" };
}
exports.ClientWebrtcIceCandidate = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.candidate !== "") {
            writer.uint32(10).string(message.candidate);
        }
        if (message.sdpMid !== "") {
            writer.uint32(18).string(message.sdpMid);
        }
        if (message.sdpMLineIndex !== 0) {
            writer.uint32(24).int32(message.sdpMLineIndex);
        }
        if (message.usernameFragment !== "") {
            writer.uint32(34).string(message.usernameFragment);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClientWebrtcIceCandidate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.candidate = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.sdpMid = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.sdpMLineIndex = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.usernameFragment = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            candidate: isSet(object.candidate) ? globalThis.String(object.candidate) : "",
            sdpMid: isSet(object.sdpMid) ? globalThis.String(object.sdpMid) : "",
            sdpMLineIndex: isSet(object.sdpMLineIndex) ? globalThis.Number(object.sdpMLineIndex) : 0,
            usernameFragment: isSet(object.usernameFragment) ? globalThis.String(object.usernameFragment) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.candidate !== "") {
            obj.candidate = message.candidate;
        }
        if (message.sdpMid !== "") {
            obj.sdpMid = message.sdpMid;
        }
        if (message.sdpMLineIndex !== 0) {
            obj.sdpMLineIndex = Math.round(message.sdpMLineIndex);
        }
        if (message.usernameFragment !== "") {
            obj.usernameFragment = message.usernameFragment;
        }
        return obj;
    },
    create(base) {
        return exports.ClientWebrtcIceCandidate.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseClientWebrtcIceCandidate();
        message.candidate = object.candidate ?? "";
        message.sdpMid = object.sdpMid ?? "";
        message.sdpMLineIndex = object.sdpMLineIndex ?? 0;
        message.usernameFragment = object.usernameFragment ?? "";
        return message;
    },
};
function createBaseClientDeviceReboot() {
    return {};
}
exports.ClientDeviceReboot = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClientDeviceReboot();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ClientDeviceReboot.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseClientDeviceReboot();
        return message;
    },
};
function createBaseClientStatusRequest() {
    return {};
}
exports.ClientStatusRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClientStatusRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ClientStatusRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseClientStatusRequest();
        return message;
    },
};
function createBaseClientModemInfoRequest() {
    return {};
}
exports.ClientModemInfoRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClientModemInfoRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ClientModemInfoRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseClientModemInfoRequest();
        return message;
    },
};
function createBaseError() {
    return { code: 0, message: "", details: {} };
}
exports.Error = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.code !== 0) {
            writer.uint32(8).int32(message.code);
        }
        if (message.message !== "") {
            writer.uint32(18).string(message.message);
        }
        Object.entries(message.details).forEach(([key, value]) => {
            exports.Error_DetailsEntry.encode({ key: key, value }, writer.uint32(26).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.code = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    const entry3 = exports.Error_DetailsEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.details[entry3.key] = entry3.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            code: isSet(object.code) ? globalThis.Number(object.code) : 0,
            message: isSet(object.message) ? globalThis.String(object.message) : "",
            details: isObject(object.details)
                ? Object.entries(object.details).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.code !== 0) {
            obj.code = Math.round(message.code);
        }
        if (message.message !== "") {
            obj.message = message.message;
        }
        if (message.details) {
            const entries = Object.entries(message.details);
            if (entries.length > 0) {
                obj.details = {};
                entries.forEach(([k, v]) => {
                    obj.details[k] = v;
                });
            }
        }
        return obj;
    },
    create(base) {
        return exports.Error.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseError();
        message.code = object.code ?? 0;
        message.message = object.message ?? "";
        message.details = Object.entries(object.details ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseError_DetailsEntry() {
    return { key: "", value: "" };
}
exports.Error_DetailsEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseError_DetailsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.Error_DetailsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseError_DetailsEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
function longToNumber(long) {
    if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
