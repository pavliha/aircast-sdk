// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.29.3
// source: proto/aircast.proto

package _go

import (
	common "github.com/pavliha/aircast-protocol/gen/go/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Main message wrapper that encapsulates all possible messages
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard message envelope
	MessageId       string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`                   // Unique identifier for this message
	CorrelationId   string `protobuf:"bytes,2,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`       // For response correlation with request
	ProtocolVersion string `protobuf:"bytes,3,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"` // Version of the protocol (e.g., "1.0")
	Timestamp       int64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                   // Unix timestamp in milliseconds
	// The actual message content - only one will be set
	//
	// Types that are assignable to Content:
	//
	//	*Message_DeviceModemConnected
	//	*Message_DeviceModemInfo
	//	*Message_DeviceModemSignalQuality
	//	*Message_DeviceModemConnectionError
	//	*Message_DeviceModemInfoResponse
	//	*Message_DeviceRtspConnected
	//	*Message_DeviceRtspStreamReady
	//	*Message_DeviceRtspError
	//	*Message_DeviceRtspDialError
	//	*Message_DeviceRtspDescribeError
	//	*Message_DeviceRtspPublishError
	//	*Message_DeviceRtspPacketLost
	//	*Message_DeviceRtspDecodeError
	//	*Message_DeviceRtspListenError
	//	*Message_DeviceRtspClientError
	//	*Message_DeviceRtspDisconnected
	//	*Message_DeviceRtspConnectFailed
	//	*Message_DeviceRtspRedialError
	//	*Message_DeviceMavlinkConnected
	//	*Message_DeviceMavlinkDialError
	//	*Message_DeviceWebrtcSessionStarted
	//	*Message_DeviceWebrtcOffer
	//	*Message_DeviceWebrtcAnswer
	//	*Message_DeviceWebrtcIceCandidate
	//	*Message_DeviceWebrtcPeerConnected
	//	*Message_DeviceWebrtcPeerDisconnected
	//	*Message_DeviceWebrtcIceConnected
	//	*Message_DeviceWebrtcIceDisconnected
	//	*Message_DeviceWebrtcOfferAck
	//	*Message_DeviceWebrtcAnswerAck
	//	*Message_DeviceWebrtcIceCandidateAck
	//	*Message_DeviceWebrtcError
	//	*Message_DeviceWebrtcOfferError
	//	*Message_DeviceWebrtcSessionStopWarning
	//	*Message_DeviceWebrtcPeerConnecting
	//	*Message_DeviceWebrtcDataChannelOpen
	//	*Message_DeviceCameraListResponse
	//	*Message_DeviceCameraListError
	//	*Message_DeviceCameraAddSuccess
	//	*Message_DeviceCameraAddError
	//	*Message_DeviceCameraUpdateSuccess
	//	*Message_DeviceCameraUpdateError
	//	*Message_DeviceCameraRemoveSuccess
	//	*Message_DeviceCameraRemoveError
	//	*Message_DeviceCameraSwitchSuccess
	//	*Message_DeviceCameraSwitchError
	//	*Message_DeviceCameraSelectedResponse
	//	*Message_DeviceCameraSelectedError
	//	*Message_DeviceNetworkInterfacesResponse
	//	*Message_DeviceStatusResponse
	//	*Message_ApiDeviceConnected
	//	*Message_ApiDeviceDisconnected
	//	*Message_ClientRtspDial
	//	*Message_ClientNetworkInterfacesRequest
	//	*Message_ClientCameraListRequest
	//	*Message_ClientCameraAdd
	//	*Message_ClientCameraUpdate
	//	*Message_ClientCameraRemove
	//	*Message_ClientCameraSwitch
	//	*Message_ClientCameraSelectedRequest
	//	*Message_ClientWebrtcSessionStart
	//	*Message_ClientWebrtcOffer
	//	*Message_ClientWebrtcAnswer
	//	*Message_ClientWebrtcIceCandidate
	//	*Message_ClientDeviceReboot
	//	*Message_ClientStatusRequest
	//	*Message_ClientModemInfoRequest
	//	*Message_Error
	Content isMessage_Content `protobuf_oneof:"content"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *Message) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *Message) GetProtocolVersion() string {
	if x != nil {
		return x.ProtocolVersion
	}
	return ""
}

func (x *Message) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (m *Message) GetContent() isMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Message) GetDeviceModemConnected() *DeviceModemConnected {
	if x, ok := x.GetContent().(*Message_DeviceModemConnected); ok {
		return x.DeviceModemConnected
	}
	return nil
}

func (x *Message) GetDeviceModemInfo() *DeviceModemInfo {
	if x, ok := x.GetContent().(*Message_DeviceModemInfo); ok {
		return x.DeviceModemInfo
	}
	return nil
}

func (x *Message) GetDeviceModemSignalQuality() *DeviceModemSignalQuality {
	if x, ok := x.GetContent().(*Message_DeviceModemSignalQuality); ok {
		return x.DeviceModemSignalQuality
	}
	return nil
}

func (x *Message) GetDeviceModemConnectionError() *DeviceModemConnectionError {
	if x, ok := x.GetContent().(*Message_DeviceModemConnectionError); ok {
		return x.DeviceModemConnectionError
	}
	return nil
}

func (x *Message) GetDeviceModemInfoResponse() *DeviceModemInfoResponse {
	if x, ok := x.GetContent().(*Message_DeviceModemInfoResponse); ok {
		return x.DeviceModemInfoResponse
	}
	return nil
}

func (x *Message) GetDeviceRtspConnected() *DeviceRtspConnected {
	if x, ok := x.GetContent().(*Message_DeviceRtspConnected); ok {
		return x.DeviceRtspConnected
	}
	return nil
}

func (x *Message) GetDeviceRtspStreamReady() *DeviceRtspStreamReady {
	if x, ok := x.GetContent().(*Message_DeviceRtspStreamReady); ok {
		return x.DeviceRtspStreamReady
	}
	return nil
}

func (x *Message) GetDeviceRtspError() *DeviceRtspError {
	if x, ok := x.GetContent().(*Message_DeviceRtspError); ok {
		return x.DeviceRtspError
	}
	return nil
}

func (x *Message) GetDeviceRtspDialError() *DeviceRtspDialError {
	if x, ok := x.GetContent().(*Message_DeviceRtspDialError); ok {
		return x.DeviceRtspDialError
	}
	return nil
}

func (x *Message) GetDeviceRtspDescribeError() *DeviceRtspDescribeError {
	if x, ok := x.GetContent().(*Message_DeviceRtspDescribeError); ok {
		return x.DeviceRtspDescribeError
	}
	return nil
}

func (x *Message) GetDeviceRtspPublishError() *DeviceRtspPublishError {
	if x, ok := x.GetContent().(*Message_DeviceRtspPublishError); ok {
		return x.DeviceRtspPublishError
	}
	return nil
}

func (x *Message) GetDeviceRtspPacketLost() *DeviceRtspPacketLost {
	if x, ok := x.GetContent().(*Message_DeviceRtspPacketLost); ok {
		return x.DeviceRtspPacketLost
	}
	return nil
}

func (x *Message) GetDeviceRtspDecodeError() *DeviceRtspDecodeError {
	if x, ok := x.GetContent().(*Message_DeviceRtspDecodeError); ok {
		return x.DeviceRtspDecodeError
	}
	return nil
}

func (x *Message) GetDeviceRtspListenError() *DeviceRtspListenError {
	if x, ok := x.GetContent().(*Message_DeviceRtspListenError); ok {
		return x.DeviceRtspListenError
	}
	return nil
}

func (x *Message) GetDeviceRtspClientError() *DeviceRtspClientError {
	if x, ok := x.GetContent().(*Message_DeviceRtspClientError); ok {
		return x.DeviceRtspClientError
	}
	return nil
}

func (x *Message) GetDeviceRtspDisconnected() *DeviceRtspDisconnected {
	if x, ok := x.GetContent().(*Message_DeviceRtspDisconnected); ok {
		return x.DeviceRtspDisconnected
	}
	return nil
}

func (x *Message) GetDeviceRtspConnectFailed() *DeviceRtspConnectFailed {
	if x, ok := x.GetContent().(*Message_DeviceRtspConnectFailed); ok {
		return x.DeviceRtspConnectFailed
	}
	return nil
}

func (x *Message) GetDeviceRtspRedialError() *DeviceRtspRedialError {
	if x, ok := x.GetContent().(*Message_DeviceRtspRedialError); ok {
		return x.DeviceRtspRedialError
	}
	return nil
}

func (x *Message) GetDeviceMavlinkConnected() *DeviceMavlinkConnected {
	if x, ok := x.GetContent().(*Message_DeviceMavlinkConnected); ok {
		return x.DeviceMavlinkConnected
	}
	return nil
}

func (x *Message) GetDeviceMavlinkDialError() *DeviceMavlinkDialError {
	if x, ok := x.GetContent().(*Message_DeviceMavlinkDialError); ok {
		return x.DeviceMavlinkDialError
	}
	return nil
}

func (x *Message) GetDeviceWebrtcSessionStarted() *DeviceWebrtcSessionStarted {
	if x, ok := x.GetContent().(*Message_DeviceWebrtcSessionStarted); ok {
		return x.DeviceWebrtcSessionStarted
	}
	return nil
}

func (x *Message) GetDeviceWebrtcOffer() *DeviceWebrtcOffer {
	if x, ok := x.GetContent().(*Message_DeviceWebrtcOffer); ok {
		return x.DeviceWebrtcOffer
	}
	return nil
}

func (x *Message) GetDeviceWebrtcAnswer() *DeviceWebrtcAnswer {
	if x, ok := x.GetContent().(*Message_DeviceWebrtcAnswer); ok {
		return x.DeviceWebrtcAnswer
	}
	return nil
}

func (x *Message) GetDeviceWebrtcIceCandidate() *DeviceWebrtcIceCandidate {
	if x, ok := x.GetContent().(*Message_DeviceWebrtcIceCandidate); ok {
		return x.DeviceWebrtcIceCandidate
	}
	return nil
}

func (x *Message) GetDeviceWebrtcPeerConnected() *DeviceWebrtcPeerConnected {
	if x, ok := x.GetContent().(*Message_DeviceWebrtcPeerConnected); ok {
		return x.DeviceWebrtcPeerConnected
	}
	return nil
}

func (x *Message) GetDeviceWebrtcPeerDisconnected() *DeviceWebrtcPeerDisconnected {
	if x, ok := x.GetContent().(*Message_DeviceWebrtcPeerDisconnected); ok {
		return x.DeviceWebrtcPeerDisconnected
	}
	return nil
}

func (x *Message) GetDeviceWebrtcIceConnected() *DeviceWebrtcIceConnected {
	if x, ok := x.GetContent().(*Message_DeviceWebrtcIceConnected); ok {
		return x.DeviceWebrtcIceConnected
	}
	return nil
}

func (x *Message) GetDeviceWebrtcIceDisconnected() *DeviceWebrtcIceDisconnected {
	if x, ok := x.GetContent().(*Message_DeviceWebrtcIceDisconnected); ok {
		return x.DeviceWebrtcIceDisconnected
	}
	return nil
}

func (x *Message) GetDeviceWebrtcOfferAck() *DeviceWebrtcOfferAck {
	if x, ok := x.GetContent().(*Message_DeviceWebrtcOfferAck); ok {
		return x.DeviceWebrtcOfferAck
	}
	return nil
}

func (x *Message) GetDeviceWebrtcAnswerAck() *DeviceWebrtcAnswerAck {
	if x, ok := x.GetContent().(*Message_DeviceWebrtcAnswerAck); ok {
		return x.DeviceWebrtcAnswerAck
	}
	return nil
}

func (x *Message) GetDeviceWebrtcIceCandidateAck() *DeviceWebrtcIceCandidateAck {
	if x, ok := x.GetContent().(*Message_DeviceWebrtcIceCandidateAck); ok {
		return x.DeviceWebrtcIceCandidateAck
	}
	return nil
}

func (x *Message) GetDeviceWebrtcError() *DeviceWebrtcError {
	if x, ok := x.GetContent().(*Message_DeviceWebrtcError); ok {
		return x.DeviceWebrtcError
	}
	return nil
}

func (x *Message) GetDeviceWebrtcOfferError() *DeviceWebrtcOfferError {
	if x, ok := x.GetContent().(*Message_DeviceWebrtcOfferError); ok {
		return x.DeviceWebrtcOfferError
	}
	return nil
}

func (x *Message) GetDeviceWebrtcSessionStopWarning() *DeviceWebrtcSessionStopWarning {
	if x, ok := x.GetContent().(*Message_DeviceWebrtcSessionStopWarning); ok {
		return x.DeviceWebrtcSessionStopWarning
	}
	return nil
}

func (x *Message) GetDeviceWebrtcPeerConnecting() *DeviceWebrtcPeerConnecting {
	if x, ok := x.GetContent().(*Message_DeviceWebrtcPeerConnecting); ok {
		return x.DeviceWebrtcPeerConnecting
	}
	return nil
}

func (x *Message) GetDeviceWebrtcDataChannelOpen() *DeviceWebrtcDataChannelOpen {
	if x, ok := x.GetContent().(*Message_DeviceWebrtcDataChannelOpen); ok {
		return x.DeviceWebrtcDataChannelOpen
	}
	return nil
}

func (x *Message) GetDeviceCameraListResponse() *DeviceCameraListResponse {
	if x, ok := x.GetContent().(*Message_DeviceCameraListResponse); ok {
		return x.DeviceCameraListResponse
	}
	return nil
}

func (x *Message) GetDeviceCameraListError() *DeviceCameraListError {
	if x, ok := x.GetContent().(*Message_DeviceCameraListError); ok {
		return x.DeviceCameraListError
	}
	return nil
}

func (x *Message) GetDeviceCameraAddSuccess() *DeviceCameraAddSuccess {
	if x, ok := x.GetContent().(*Message_DeviceCameraAddSuccess); ok {
		return x.DeviceCameraAddSuccess
	}
	return nil
}

func (x *Message) GetDeviceCameraAddError() *DeviceCameraAddError {
	if x, ok := x.GetContent().(*Message_DeviceCameraAddError); ok {
		return x.DeviceCameraAddError
	}
	return nil
}

func (x *Message) GetDeviceCameraUpdateSuccess() *DeviceCameraUpdateSuccess {
	if x, ok := x.GetContent().(*Message_DeviceCameraUpdateSuccess); ok {
		return x.DeviceCameraUpdateSuccess
	}
	return nil
}

func (x *Message) GetDeviceCameraUpdateError() *DeviceCameraUpdateError {
	if x, ok := x.GetContent().(*Message_DeviceCameraUpdateError); ok {
		return x.DeviceCameraUpdateError
	}
	return nil
}

func (x *Message) GetDeviceCameraRemoveSuccess() *DeviceCameraRemoveSuccess {
	if x, ok := x.GetContent().(*Message_DeviceCameraRemoveSuccess); ok {
		return x.DeviceCameraRemoveSuccess
	}
	return nil
}

func (x *Message) GetDeviceCameraRemoveError() *DeviceCameraRemoveError {
	if x, ok := x.GetContent().(*Message_DeviceCameraRemoveError); ok {
		return x.DeviceCameraRemoveError
	}
	return nil
}

func (x *Message) GetDeviceCameraSwitchSuccess() *DeviceCameraSwitchSuccess {
	if x, ok := x.GetContent().(*Message_DeviceCameraSwitchSuccess); ok {
		return x.DeviceCameraSwitchSuccess
	}
	return nil
}

func (x *Message) GetDeviceCameraSwitchError() *DeviceCameraSwitchError {
	if x, ok := x.GetContent().(*Message_DeviceCameraSwitchError); ok {
		return x.DeviceCameraSwitchError
	}
	return nil
}

func (x *Message) GetDeviceCameraSelectedResponse() *DeviceCameraSelectedResponse {
	if x, ok := x.GetContent().(*Message_DeviceCameraSelectedResponse); ok {
		return x.DeviceCameraSelectedResponse
	}
	return nil
}

func (x *Message) GetDeviceCameraSelectedError() *DeviceCameraSelectedError {
	if x, ok := x.GetContent().(*Message_DeviceCameraSelectedError); ok {
		return x.DeviceCameraSelectedError
	}
	return nil
}

func (x *Message) GetDeviceNetworkInterfacesResponse() *DeviceNetworkInterfacesResponse {
	if x, ok := x.GetContent().(*Message_DeviceNetworkInterfacesResponse); ok {
		return x.DeviceNetworkInterfacesResponse
	}
	return nil
}

func (x *Message) GetDeviceStatusResponse() *DeviceStatusResponse {
	if x, ok := x.GetContent().(*Message_DeviceStatusResponse); ok {
		return x.DeviceStatusResponse
	}
	return nil
}

func (x *Message) GetApiDeviceConnected() *ApiDeviceConnected {
	if x, ok := x.GetContent().(*Message_ApiDeviceConnected); ok {
		return x.ApiDeviceConnected
	}
	return nil
}

func (x *Message) GetApiDeviceDisconnected() *ApiDeviceDisconnected {
	if x, ok := x.GetContent().(*Message_ApiDeviceDisconnected); ok {
		return x.ApiDeviceDisconnected
	}
	return nil
}

func (x *Message) GetClientRtspDial() *ClientRtspDial {
	if x, ok := x.GetContent().(*Message_ClientRtspDial); ok {
		return x.ClientRtspDial
	}
	return nil
}

func (x *Message) GetClientNetworkInterfacesRequest() *ClientNetworkInterfacesRequest {
	if x, ok := x.GetContent().(*Message_ClientNetworkInterfacesRequest); ok {
		return x.ClientNetworkInterfacesRequest
	}
	return nil
}

func (x *Message) GetClientCameraListRequest() *ClientCameraListRequest {
	if x, ok := x.GetContent().(*Message_ClientCameraListRequest); ok {
		return x.ClientCameraListRequest
	}
	return nil
}

func (x *Message) GetClientCameraAdd() *ClientCameraAdd {
	if x, ok := x.GetContent().(*Message_ClientCameraAdd); ok {
		return x.ClientCameraAdd
	}
	return nil
}

func (x *Message) GetClientCameraUpdate() *ClientCameraUpdate {
	if x, ok := x.GetContent().(*Message_ClientCameraUpdate); ok {
		return x.ClientCameraUpdate
	}
	return nil
}

func (x *Message) GetClientCameraRemove() *ClientCameraRemove {
	if x, ok := x.GetContent().(*Message_ClientCameraRemove); ok {
		return x.ClientCameraRemove
	}
	return nil
}

func (x *Message) GetClientCameraSwitch() *ClientCameraSwitch {
	if x, ok := x.GetContent().(*Message_ClientCameraSwitch); ok {
		return x.ClientCameraSwitch
	}
	return nil
}

func (x *Message) GetClientCameraSelectedRequest() *ClientCameraSelectedRequest {
	if x, ok := x.GetContent().(*Message_ClientCameraSelectedRequest); ok {
		return x.ClientCameraSelectedRequest
	}
	return nil
}

func (x *Message) GetClientWebrtcSessionStart() *ClientWebrtcSessionStart {
	if x, ok := x.GetContent().(*Message_ClientWebrtcSessionStart); ok {
		return x.ClientWebrtcSessionStart
	}
	return nil
}

func (x *Message) GetClientWebrtcOffer() *ClientWebrtcOffer {
	if x, ok := x.GetContent().(*Message_ClientWebrtcOffer); ok {
		return x.ClientWebrtcOffer
	}
	return nil
}

func (x *Message) GetClientWebrtcAnswer() *ClientWebrtcAnswer {
	if x, ok := x.GetContent().(*Message_ClientWebrtcAnswer); ok {
		return x.ClientWebrtcAnswer
	}
	return nil
}

func (x *Message) GetClientWebrtcIceCandidate() *ClientWebrtcIceCandidate {
	if x, ok := x.GetContent().(*Message_ClientWebrtcIceCandidate); ok {
		return x.ClientWebrtcIceCandidate
	}
	return nil
}

func (x *Message) GetClientDeviceReboot() *ClientDeviceReboot {
	if x, ok := x.GetContent().(*Message_ClientDeviceReboot); ok {
		return x.ClientDeviceReboot
	}
	return nil
}

func (x *Message) GetClientStatusRequest() *ClientStatusRequest {
	if x, ok := x.GetContent().(*Message_ClientStatusRequest); ok {
		return x.ClientStatusRequest
	}
	return nil
}

func (x *Message) GetClientModemInfoRequest() *ClientModemInfoRequest {
	if x, ok := x.GetContent().(*Message_ClientModemInfoRequest); ok {
		return x.ClientModemInfoRequest
	}
	return nil
}

func (x *Message) GetError() *Error {
	if x, ok := x.GetContent().(*Message_Error); ok {
		return x.Error
	}
	return nil
}

type isMessage_Content interface {
	isMessage_Content()
}

type Message_DeviceModemConnected struct {
	// Device events and responses
	DeviceModemConnected *DeviceModemConnected `protobuf:"bytes,10,opt,name=device_modem_connected,json=deviceModemConnected,proto3,oneof"`
}

type Message_DeviceModemInfo struct {
	DeviceModemInfo *DeviceModemInfo `protobuf:"bytes,11,opt,name=device_modem_info,json=deviceModemInfo,proto3,oneof"`
}

type Message_DeviceModemSignalQuality struct {
	DeviceModemSignalQuality *DeviceModemSignalQuality `protobuf:"bytes,12,opt,name=device_modem_signal_quality,json=deviceModemSignalQuality,proto3,oneof"`
}

type Message_DeviceModemConnectionError struct {
	DeviceModemConnectionError *DeviceModemConnectionError `protobuf:"bytes,13,opt,name=device_modem_connection_error,json=deviceModemConnectionError,proto3,oneof"`
}

type Message_DeviceModemInfoResponse struct {
	DeviceModemInfoResponse *DeviceModemInfoResponse `protobuf:"bytes,14,opt,name=device_modem_info_response,json=deviceModemInfoResponse,proto3,oneof"`
}

type Message_DeviceRtspConnected struct {
	DeviceRtspConnected *DeviceRtspConnected `protobuf:"bytes,20,opt,name=device_rtsp_connected,json=deviceRtspConnected,proto3,oneof"`
}

type Message_DeviceRtspStreamReady struct {
	DeviceRtspStreamReady *DeviceRtspStreamReady `protobuf:"bytes,21,opt,name=device_rtsp_stream_ready,json=deviceRtspStreamReady,proto3,oneof"`
}

type Message_DeviceRtspError struct {
	DeviceRtspError *DeviceRtspError `protobuf:"bytes,22,opt,name=device_rtsp_error,json=deviceRtspError,proto3,oneof"`
}

type Message_DeviceRtspDialError struct {
	DeviceRtspDialError *DeviceRtspDialError `protobuf:"bytes,23,opt,name=device_rtsp_dial_error,json=deviceRtspDialError,proto3,oneof"`
}

type Message_DeviceRtspDescribeError struct {
	DeviceRtspDescribeError *DeviceRtspDescribeError `protobuf:"bytes,24,opt,name=device_rtsp_describe_error,json=deviceRtspDescribeError,proto3,oneof"`
}

type Message_DeviceRtspPublishError struct {
	DeviceRtspPublishError *DeviceRtspPublishError `protobuf:"bytes,25,opt,name=device_rtsp_publish_error,json=deviceRtspPublishError,proto3,oneof"`
}

type Message_DeviceRtspPacketLost struct {
	DeviceRtspPacketLost *DeviceRtspPacketLost `protobuf:"bytes,26,opt,name=device_rtsp_packet_lost,json=deviceRtspPacketLost,proto3,oneof"`
}

type Message_DeviceRtspDecodeError struct {
	DeviceRtspDecodeError *DeviceRtspDecodeError `protobuf:"bytes,27,opt,name=device_rtsp_decode_error,json=deviceRtspDecodeError,proto3,oneof"`
}

type Message_DeviceRtspListenError struct {
	DeviceRtspListenError *DeviceRtspListenError `protobuf:"bytes,28,opt,name=device_rtsp_listen_error,json=deviceRtspListenError,proto3,oneof"`
}

type Message_DeviceRtspClientError struct {
	DeviceRtspClientError *DeviceRtspClientError `protobuf:"bytes,29,opt,name=device_rtsp_client_error,json=deviceRtspClientError,proto3,oneof"`
}

type Message_DeviceRtspDisconnected struct {
	DeviceRtspDisconnected *DeviceRtspDisconnected `protobuf:"bytes,30,opt,name=device_rtsp_disconnected,json=deviceRtspDisconnected,proto3,oneof"`
}

type Message_DeviceRtspConnectFailed struct {
	DeviceRtspConnectFailed *DeviceRtspConnectFailed `protobuf:"bytes,31,opt,name=device_rtsp_connect_failed,json=deviceRtspConnectFailed,proto3,oneof"`
}

type Message_DeviceRtspRedialError struct {
	DeviceRtspRedialError *DeviceRtspRedialError `protobuf:"bytes,32,opt,name=device_rtsp_redial_error,json=deviceRtspRedialError,proto3,oneof"`
}

type Message_DeviceMavlinkConnected struct {
	DeviceMavlinkConnected *DeviceMavlinkConnected `protobuf:"bytes,40,opt,name=device_mavlink_connected,json=deviceMavlinkConnected,proto3,oneof"`
}

type Message_DeviceMavlinkDialError struct {
	DeviceMavlinkDialError *DeviceMavlinkDialError `protobuf:"bytes,41,opt,name=device_mavlink_dial_error,json=deviceMavlinkDialError,proto3,oneof"`
}

type Message_DeviceWebrtcSessionStarted struct {
	DeviceWebrtcSessionStarted *DeviceWebrtcSessionStarted `protobuf:"bytes,50,opt,name=device_webrtc_session_started,json=deviceWebrtcSessionStarted,proto3,oneof"`
}

type Message_DeviceWebrtcOffer struct {
	DeviceWebrtcOffer *DeviceWebrtcOffer `protobuf:"bytes,51,opt,name=device_webrtc_offer,json=deviceWebrtcOffer,proto3,oneof"`
}

type Message_DeviceWebrtcAnswer struct {
	DeviceWebrtcAnswer *DeviceWebrtcAnswer `protobuf:"bytes,52,opt,name=device_webrtc_answer,json=deviceWebrtcAnswer,proto3,oneof"`
}

type Message_DeviceWebrtcIceCandidate struct {
	DeviceWebrtcIceCandidate *DeviceWebrtcIceCandidate `protobuf:"bytes,53,opt,name=device_webrtc_ice_candidate,json=deviceWebrtcIceCandidate,proto3,oneof"`
}

type Message_DeviceWebrtcPeerConnected struct {
	DeviceWebrtcPeerConnected *DeviceWebrtcPeerConnected `protobuf:"bytes,54,opt,name=device_webrtc_peer_connected,json=deviceWebrtcPeerConnected,proto3,oneof"`
}

type Message_DeviceWebrtcPeerDisconnected struct {
	DeviceWebrtcPeerDisconnected *DeviceWebrtcPeerDisconnected `protobuf:"bytes,55,opt,name=device_webrtc_peer_disconnected,json=deviceWebrtcPeerDisconnected,proto3,oneof"`
}

type Message_DeviceWebrtcIceConnected struct {
	DeviceWebrtcIceConnected *DeviceWebrtcIceConnected `protobuf:"bytes,56,opt,name=device_webrtc_ice_connected,json=deviceWebrtcIceConnected,proto3,oneof"`
}

type Message_DeviceWebrtcIceDisconnected struct {
	DeviceWebrtcIceDisconnected *DeviceWebrtcIceDisconnected `protobuf:"bytes,57,opt,name=device_webrtc_ice_disconnected,json=deviceWebrtcIceDisconnected,proto3,oneof"`
}

type Message_DeviceWebrtcOfferAck struct {
	DeviceWebrtcOfferAck *DeviceWebrtcOfferAck `protobuf:"bytes,58,opt,name=device_webrtc_offer_ack,json=deviceWebrtcOfferAck,proto3,oneof"`
}

type Message_DeviceWebrtcAnswerAck struct {
	DeviceWebrtcAnswerAck *DeviceWebrtcAnswerAck `protobuf:"bytes,59,opt,name=device_webrtc_answer_ack,json=deviceWebrtcAnswerAck,proto3,oneof"`
}

type Message_DeviceWebrtcIceCandidateAck struct {
	DeviceWebrtcIceCandidateAck *DeviceWebrtcIceCandidateAck `protobuf:"bytes,60,opt,name=device_webrtc_ice_candidate_ack,json=deviceWebrtcIceCandidateAck,proto3,oneof"`
}

type Message_DeviceWebrtcError struct {
	DeviceWebrtcError *DeviceWebrtcError `protobuf:"bytes,61,opt,name=device_webrtc_error,json=deviceWebrtcError,proto3,oneof"`
}

type Message_DeviceWebrtcOfferError struct {
	DeviceWebrtcOfferError *DeviceWebrtcOfferError `protobuf:"bytes,62,opt,name=device_webrtc_offer_error,json=deviceWebrtcOfferError,proto3,oneof"`
}

type Message_DeviceWebrtcSessionStopWarning struct {
	DeviceWebrtcSessionStopWarning *DeviceWebrtcSessionStopWarning `protobuf:"bytes,63,opt,name=device_webrtc_session_stop_warning,json=deviceWebrtcSessionStopWarning,proto3,oneof"`
}

type Message_DeviceWebrtcPeerConnecting struct {
	DeviceWebrtcPeerConnecting *DeviceWebrtcPeerConnecting `protobuf:"bytes,64,opt,name=device_webrtc_peer_connecting,json=deviceWebrtcPeerConnecting,proto3,oneof"`
}

type Message_DeviceWebrtcDataChannelOpen struct {
	DeviceWebrtcDataChannelOpen *DeviceWebrtcDataChannelOpen `protobuf:"bytes,65,opt,name=device_webrtc_data_channel_open,json=deviceWebrtcDataChannelOpen,proto3,oneof"`
}

type Message_DeviceCameraListResponse struct {
	DeviceCameraListResponse *DeviceCameraListResponse `protobuf:"bytes,70,opt,name=device_camera_list_response,json=deviceCameraListResponse,proto3,oneof"`
}

type Message_DeviceCameraListError struct {
	DeviceCameraListError *DeviceCameraListError `protobuf:"bytes,71,opt,name=device_camera_list_error,json=deviceCameraListError,proto3,oneof"`
}

type Message_DeviceCameraAddSuccess struct {
	DeviceCameraAddSuccess *DeviceCameraAddSuccess `protobuf:"bytes,72,opt,name=device_camera_add_success,json=deviceCameraAddSuccess,proto3,oneof"`
}

type Message_DeviceCameraAddError struct {
	DeviceCameraAddError *DeviceCameraAddError `protobuf:"bytes,73,opt,name=device_camera_add_error,json=deviceCameraAddError,proto3,oneof"`
}

type Message_DeviceCameraUpdateSuccess struct {
	DeviceCameraUpdateSuccess *DeviceCameraUpdateSuccess `protobuf:"bytes,74,opt,name=device_camera_update_success,json=deviceCameraUpdateSuccess,proto3,oneof"`
}

type Message_DeviceCameraUpdateError struct {
	DeviceCameraUpdateError *DeviceCameraUpdateError `protobuf:"bytes,75,opt,name=device_camera_update_error,json=deviceCameraUpdateError,proto3,oneof"`
}

type Message_DeviceCameraRemoveSuccess struct {
	DeviceCameraRemoveSuccess *DeviceCameraRemoveSuccess `protobuf:"bytes,76,opt,name=device_camera_remove_success,json=deviceCameraRemoveSuccess,proto3,oneof"`
}

type Message_DeviceCameraRemoveError struct {
	DeviceCameraRemoveError *DeviceCameraRemoveError `protobuf:"bytes,77,opt,name=device_camera_remove_error,json=deviceCameraRemoveError,proto3,oneof"`
}

type Message_DeviceCameraSwitchSuccess struct {
	DeviceCameraSwitchSuccess *DeviceCameraSwitchSuccess `protobuf:"bytes,78,opt,name=device_camera_switch_success,json=deviceCameraSwitchSuccess,proto3,oneof"`
}

type Message_DeviceCameraSwitchError struct {
	DeviceCameraSwitchError *DeviceCameraSwitchError `protobuf:"bytes,79,opt,name=device_camera_switch_error,json=deviceCameraSwitchError,proto3,oneof"`
}

type Message_DeviceCameraSelectedResponse struct {
	DeviceCameraSelectedResponse *DeviceCameraSelectedResponse `protobuf:"bytes,80,opt,name=device_camera_selected_response,json=deviceCameraSelectedResponse,proto3,oneof"`
}

type Message_DeviceCameraSelectedError struct {
	DeviceCameraSelectedError *DeviceCameraSelectedError `protobuf:"bytes,81,opt,name=device_camera_selected_error,json=deviceCameraSelectedError,proto3,oneof"`
}

type Message_DeviceNetworkInterfacesResponse struct {
	DeviceNetworkInterfacesResponse *DeviceNetworkInterfacesResponse `protobuf:"bytes,90,opt,name=device_network_interfaces_response,json=deviceNetworkInterfacesResponse,proto3,oneof"`
}

type Message_DeviceStatusResponse struct {
	DeviceStatusResponse *DeviceStatusResponse `protobuf:"bytes,91,opt,name=device_status_response,json=deviceStatusResponse,proto3,oneof"`
}

type Message_ApiDeviceConnected struct {
	// API events
	ApiDeviceConnected *ApiDeviceConnected `protobuf:"bytes,100,opt,name=api_device_connected,json=apiDeviceConnected,proto3,oneof"`
}

type Message_ApiDeviceDisconnected struct {
	ApiDeviceDisconnected *ApiDeviceDisconnected `protobuf:"bytes,101,opt,name=api_device_disconnected,json=apiDeviceDisconnected,proto3,oneof"`
}

type Message_ClientRtspDial struct {
	// Client requests
	ClientRtspDial *ClientRtspDial `protobuf:"bytes,200,opt,name=client_rtsp_dial,json=clientRtspDial,proto3,oneof"`
}

type Message_ClientNetworkInterfacesRequest struct {
	ClientNetworkInterfacesRequest *ClientNetworkInterfacesRequest `protobuf:"bytes,201,opt,name=client_network_interfaces_request,json=clientNetworkInterfacesRequest,proto3,oneof"`
}

type Message_ClientCameraListRequest struct {
	ClientCameraListRequest *ClientCameraListRequest `protobuf:"bytes,202,opt,name=client_camera_list_request,json=clientCameraListRequest,proto3,oneof"`
}

type Message_ClientCameraAdd struct {
	ClientCameraAdd *ClientCameraAdd `protobuf:"bytes,203,opt,name=client_camera_add,json=clientCameraAdd,proto3,oneof"`
}

type Message_ClientCameraUpdate struct {
	ClientCameraUpdate *ClientCameraUpdate `protobuf:"bytes,204,opt,name=client_camera_update,json=clientCameraUpdate,proto3,oneof"`
}

type Message_ClientCameraRemove struct {
	ClientCameraRemove *ClientCameraRemove `protobuf:"bytes,205,opt,name=client_camera_remove,json=clientCameraRemove,proto3,oneof"`
}

type Message_ClientCameraSwitch struct {
	ClientCameraSwitch *ClientCameraSwitch `protobuf:"bytes,206,opt,name=client_camera_switch,json=clientCameraSwitch,proto3,oneof"`
}

type Message_ClientCameraSelectedRequest struct {
	ClientCameraSelectedRequest *ClientCameraSelectedRequest `protobuf:"bytes,207,opt,name=client_camera_selected_request,json=clientCameraSelectedRequest,proto3,oneof"`
}

type Message_ClientWebrtcSessionStart struct {
	ClientWebrtcSessionStart *ClientWebrtcSessionStart `protobuf:"bytes,208,opt,name=client_webrtc_session_start,json=clientWebrtcSessionStart,proto3,oneof"`
}

type Message_ClientWebrtcOffer struct {
	ClientWebrtcOffer *ClientWebrtcOffer `protobuf:"bytes,209,opt,name=client_webrtc_offer,json=clientWebrtcOffer,proto3,oneof"`
}

type Message_ClientWebrtcAnswer struct {
	ClientWebrtcAnswer *ClientWebrtcAnswer `protobuf:"bytes,210,opt,name=client_webrtc_answer,json=clientWebrtcAnswer,proto3,oneof"`
}

type Message_ClientWebrtcIceCandidate struct {
	ClientWebrtcIceCandidate *ClientWebrtcIceCandidate `protobuf:"bytes,211,opt,name=client_webrtc_ice_candidate,json=clientWebrtcIceCandidate,proto3,oneof"`
}

type Message_ClientDeviceReboot struct {
	ClientDeviceReboot *ClientDeviceReboot `protobuf:"bytes,212,opt,name=client_device_reboot,json=clientDeviceReboot,proto3,oneof"`
}

type Message_ClientStatusRequest struct {
	ClientStatusRequest *ClientStatusRequest `protobuf:"bytes,213,opt,name=client_status_request,json=clientStatusRequest,proto3,oneof"`
}

type Message_ClientModemInfoRequest struct {
	ClientModemInfoRequest *ClientModemInfoRequest `protobuf:"bytes,214,opt,name=client_modem_info_request,json=clientModemInfoRequest,proto3,oneof"`
}

type Message_Error struct {
	// Generic error message
	Error *Error `protobuf:"bytes,999,opt,name=error,proto3,oneof"`
}

func (*Message_DeviceModemConnected) isMessage_Content() {}

func (*Message_DeviceModemInfo) isMessage_Content() {}

func (*Message_DeviceModemSignalQuality) isMessage_Content() {}

func (*Message_DeviceModemConnectionError) isMessage_Content() {}

func (*Message_DeviceModemInfoResponse) isMessage_Content() {}

func (*Message_DeviceRtspConnected) isMessage_Content() {}

func (*Message_DeviceRtspStreamReady) isMessage_Content() {}

func (*Message_DeviceRtspError) isMessage_Content() {}

func (*Message_DeviceRtspDialError) isMessage_Content() {}

func (*Message_DeviceRtspDescribeError) isMessage_Content() {}

func (*Message_DeviceRtspPublishError) isMessage_Content() {}

func (*Message_DeviceRtspPacketLost) isMessage_Content() {}

func (*Message_DeviceRtspDecodeError) isMessage_Content() {}

func (*Message_DeviceRtspListenError) isMessage_Content() {}

func (*Message_DeviceRtspClientError) isMessage_Content() {}

func (*Message_DeviceRtspDisconnected) isMessage_Content() {}

func (*Message_DeviceRtspConnectFailed) isMessage_Content() {}

func (*Message_DeviceRtspRedialError) isMessage_Content() {}

func (*Message_DeviceMavlinkConnected) isMessage_Content() {}

func (*Message_DeviceMavlinkDialError) isMessage_Content() {}

func (*Message_DeviceWebrtcSessionStarted) isMessage_Content() {}

func (*Message_DeviceWebrtcOffer) isMessage_Content() {}

func (*Message_DeviceWebrtcAnswer) isMessage_Content() {}

func (*Message_DeviceWebrtcIceCandidate) isMessage_Content() {}

func (*Message_DeviceWebrtcPeerConnected) isMessage_Content() {}

func (*Message_DeviceWebrtcPeerDisconnected) isMessage_Content() {}

func (*Message_DeviceWebrtcIceConnected) isMessage_Content() {}

func (*Message_DeviceWebrtcIceDisconnected) isMessage_Content() {}

func (*Message_DeviceWebrtcOfferAck) isMessage_Content() {}

func (*Message_DeviceWebrtcAnswerAck) isMessage_Content() {}

func (*Message_DeviceWebrtcIceCandidateAck) isMessage_Content() {}

func (*Message_DeviceWebrtcError) isMessage_Content() {}

func (*Message_DeviceWebrtcOfferError) isMessage_Content() {}

func (*Message_DeviceWebrtcSessionStopWarning) isMessage_Content() {}

func (*Message_DeviceWebrtcPeerConnecting) isMessage_Content() {}

func (*Message_DeviceWebrtcDataChannelOpen) isMessage_Content() {}

func (*Message_DeviceCameraListResponse) isMessage_Content() {}

func (*Message_DeviceCameraListError) isMessage_Content() {}

func (*Message_DeviceCameraAddSuccess) isMessage_Content() {}

func (*Message_DeviceCameraAddError) isMessage_Content() {}

func (*Message_DeviceCameraUpdateSuccess) isMessage_Content() {}

func (*Message_DeviceCameraUpdateError) isMessage_Content() {}

func (*Message_DeviceCameraRemoveSuccess) isMessage_Content() {}

func (*Message_DeviceCameraRemoveError) isMessage_Content() {}

func (*Message_DeviceCameraSwitchSuccess) isMessage_Content() {}

func (*Message_DeviceCameraSwitchError) isMessage_Content() {}

func (*Message_DeviceCameraSelectedResponse) isMessage_Content() {}

func (*Message_DeviceCameraSelectedError) isMessage_Content() {}

func (*Message_DeviceNetworkInterfacesResponse) isMessage_Content() {}

func (*Message_DeviceStatusResponse) isMessage_Content() {}

func (*Message_ApiDeviceConnected) isMessage_Content() {}

func (*Message_ApiDeviceDisconnected) isMessage_Content() {}

func (*Message_ClientRtspDial) isMessage_Content() {}

func (*Message_ClientNetworkInterfacesRequest) isMessage_Content() {}

func (*Message_ClientCameraListRequest) isMessage_Content() {}

func (*Message_ClientCameraAdd) isMessage_Content() {}

func (*Message_ClientCameraUpdate) isMessage_Content() {}

func (*Message_ClientCameraRemove) isMessage_Content() {}

func (*Message_ClientCameraSwitch) isMessage_Content() {}

func (*Message_ClientCameraSelectedRequest) isMessage_Content() {}

func (*Message_ClientWebrtcSessionStart) isMessage_Content() {}

func (*Message_ClientWebrtcOffer) isMessage_Content() {}

func (*Message_ClientWebrtcAnswer) isMessage_Content() {}

func (*Message_ClientWebrtcIceCandidate) isMessage_Content() {}

func (*Message_ClientDeviceReboot) isMessage_Content() {}

func (*Message_ClientStatusRequest) isMessage_Content() {}

func (*Message_ClientModemInfoRequest) isMessage_Content() {}

func (*Message_Error) isMessage_Content() {}

// Device modem messages
type DeviceModemConnected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeviceModemConnected) Reset() {
	*x = DeviceModemConnected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceModemConnected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceModemConnected) ProtoMessage() {}

func (x *DeviceModemConnected) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceModemConnected.ProtoReflect.Descriptor instead.
func (*DeviceModemConnected) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceModemConnected) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type DeviceModemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event         *common.Event         `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	SignalQuality *common.SignalQuality `protobuf:"bytes,2,opt,name=signal_quality,json=signalQuality,proto3" json:"signal_quality,omitempty"`
}

func (x *DeviceModemInfo) Reset() {
	*x = DeviceModemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceModemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceModemInfo) ProtoMessage() {}

func (x *DeviceModemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceModemInfo.ProtoReflect.Descriptor instead.
func (*DeviceModemInfo) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{2}
}

func (x *DeviceModemInfo) GetEvent() *common.Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *DeviceModemInfo) GetSignalQuality() *common.SignalQuality {
	if x != nil {
		return x.SignalQuality
	}
	return nil
}

type DeviceModemSignalQuality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event         *common.Event         `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	SignalQuality *common.SignalQuality `protobuf:"bytes,2,opt,name=signal_quality,json=signalQuality,proto3" json:"signal_quality,omitempty"`
}

func (x *DeviceModemSignalQuality) Reset() {
	*x = DeviceModemSignalQuality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceModemSignalQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceModemSignalQuality) ProtoMessage() {}

func (x *DeviceModemSignalQuality) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceModemSignalQuality.ProtoReflect.Descriptor instead.
func (*DeviceModemSignalQuality) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{3}
}

func (x *DeviceModemSignalQuality) GetEvent() *common.Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *DeviceModemSignalQuality) GetSignalQuality() *common.SignalQuality {
	if x != nil {
		return x.SignalQuality
	}
	return nil
}

type DeviceModemConnectionError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeviceModemConnectionError) Reset() {
	*x = DeviceModemConnectionError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceModemConnectionError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceModemConnectionError) ProtoMessage() {}

func (x *DeviceModemConnectionError) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceModemConnectionError.ProtoReflect.Descriptor instead.
func (*DeviceModemConnectionError) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{4}
}

func (x *DeviceModemConnectionError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type DeviceModemInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        string                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Model         string                `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	Manufacturer  string                `protobuf:"bytes,3,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Imei          string                `protobuf:"bytes,4,opt,name=imei,proto3" json:"imei,omitempty"`
	SignalQuality *common.SignalQuality `protobuf:"bytes,5,opt,name=signal_quality,json=signalQuality,proto3" json:"signal_quality,omitempty"`
}

func (x *DeviceModemInfoResponse) Reset() {
	*x = DeviceModemInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceModemInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceModemInfoResponse) ProtoMessage() {}

func (x *DeviceModemInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceModemInfoResponse.ProtoReflect.Descriptor instead.
func (*DeviceModemInfoResponse) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{5}
}

func (x *DeviceModemInfoResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DeviceModemInfoResponse) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *DeviceModemInfoResponse) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *DeviceModemInfoResponse) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *DeviceModemInfoResponse) GetSignalQuality() *common.SignalQuality {
	if x != nil {
		return x.SignalQuality
	}
	return nil
}

// Device RTSP messages
type DeviceRtspConnected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeviceRtspConnected) Reset() {
	*x = DeviceRtspConnected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRtspConnected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRtspConnected) ProtoMessage() {}

func (x *DeviceRtspConnected) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRtspConnected.ProtoReflect.Descriptor instead.
func (*DeviceRtspConnected) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{6}
}

func (x *DeviceRtspConnected) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type DeviceRtspStreamReady struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeviceRtspStreamReady) Reset() {
	*x = DeviceRtspStreamReady{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRtspStreamReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRtspStreamReady) ProtoMessage() {}

func (x *DeviceRtspStreamReady) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRtspStreamReady.ProtoReflect.Descriptor instead.
func (*DeviceRtspStreamReady) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{7}
}

func (x *DeviceRtspStreamReady) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type DeviceRtspError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeviceRtspError) Reset() {
	*x = DeviceRtspError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRtspError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRtspError) ProtoMessage() {}

func (x *DeviceRtspError) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRtspError.ProtoReflect.Descriptor instead.
func (*DeviceRtspError) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{8}
}

func (x *DeviceRtspError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type DeviceRtspDialError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeviceRtspDialError) Reset() {
	*x = DeviceRtspDialError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRtspDialError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRtspDialError) ProtoMessage() {}

func (x *DeviceRtspDialError) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRtspDialError.ProtoReflect.Descriptor instead.
func (*DeviceRtspDialError) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{9}
}

func (x *DeviceRtspDialError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type DeviceRtspDescribeError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeviceRtspDescribeError) Reset() {
	*x = DeviceRtspDescribeError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRtspDescribeError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRtspDescribeError) ProtoMessage() {}

func (x *DeviceRtspDescribeError) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRtspDescribeError.ProtoReflect.Descriptor instead.
func (*DeviceRtspDescribeError) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{10}
}

func (x *DeviceRtspDescribeError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type DeviceRtspPublishError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeviceRtspPublishError) Reset() {
	*x = DeviceRtspPublishError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRtspPublishError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRtspPublishError) ProtoMessage() {}

func (x *DeviceRtspPublishError) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRtspPublishError.ProtoReflect.Descriptor instead.
func (*DeviceRtspPublishError) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{11}
}

func (x *DeviceRtspPublishError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type DeviceRtspPacketLost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details string `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *DeviceRtspPacketLost) Reset() {
	*x = DeviceRtspPacketLost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRtspPacketLost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRtspPacketLost) ProtoMessage() {}

func (x *DeviceRtspPacketLost) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRtspPacketLost.ProtoReflect.Descriptor instead.
func (*DeviceRtspPacketLost) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{12}
}

func (x *DeviceRtspPacketLost) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

type DeviceRtspDecodeError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeviceRtspDecodeError) Reset() {
	*x = DeviceRtspDecodeError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRtspDecodeError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRtspDecodeError) ProtoMessage() {}

func (x *DeviceRtspDecodeError) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRtspDecodeError.ProtoReflect.Descriptor instead.
func (*DeviceRtspDecodeError) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{13}
}

func (x *DeviceRtspDecodeError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type DeviceRtspListenError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeviceRtspListenError) Reset() {
	*x = DeviceRtspListenError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRtspListenError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRtspListenError) ProtoMessage() {}

func (x *DeviceRtspListenError) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRtspListenError.ProtoReflect.Descriptor instead.
func (*DeviceRtspListenError) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{14}
}

func (x *DeviceRtspListenError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type DeviceRtspClientError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeviceRtspClientError) Reset() {
	*x = DeviceRtspClientError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRtspClientError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRtspClientError) ProtoMessage() {}

func (x *DeviceRtspClientError) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRtspClientError.ProtoReflect.Descriptor instead.
func (*DeviceRtspClientError) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{15}
}

func (x *DeviceRtspClientError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type DeviceRtspDisconnected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *DeviceRtspDisconnected) Reset() {
	*x = DeviceRtspDisconnected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRtspDisconnected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRtspDisconnected) ProtoMessage() {}

func (x *DeviceRtspDisconnected) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRtspDisconnected.ProtoReflect.Descriptor instead.
func (*DeviceRtspDisconnected) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{16}
}

func (x *DeviceRtspDisconnected) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type DeviceRtspConnectFailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeviceRtspConnectFailed) Reset() {
	*x = DeviceRtspConnectFailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRtspConnectFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRtspConnectFailed) ProtoMessage() {}

func (x *DeviceRtspConnectFailed) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRtspConnectFailed.ProtoReflect.Descriptor instead.
func (*DeviceRtspConnectFailed) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{17}
}

func (x *DeviceRtspConnectFailed) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type DeviceRtspRedialError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeviceRtspRedialError) Reset() {
	*x = DeviceRtspRedialError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRtspRedialError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRtspRedialError) ProtoMessage() {}

func (x *DeviceRtspRedialError) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRtspRedialError.ProtoReflect.Descriptor instead.
func (*DeviceRtspRedialError) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{18}
}

func (x *DeviceRtspRedialError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Device Mavlink messages
type DeviceMavlinkConnected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeviceMavlinkConnected) Reset() {
	*x = DeviceMavlinkConnected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMavlinkConnected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMavlinkConnected) ProtoMessage() {}

func (x *DeviceMavlinkConnected) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMavlinkConnected.ProtoReflect.Descriptor instead.
func (*DeviceMavlinkConnected) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{19}
}

func (x *DeviceMavlinkConnected) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type DeviceMavlinkDialError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeviceMavlinkDialError) Reset() {
	*x = DeviceMavlinkDialError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMavlinkDialError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMavlinkDialError) ProtoMessage() {}

func (x *DeviceMavlinkDialError) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMavlinkDialError.ProtoReflect.Descriptor instead.
func (*DeviceMavlinkDialError) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{20}
}

func (x *DeviceMavlinkDialError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Device WebRTC messages
type DeviceWebrtcSessionStarted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceWebrtcSessionStarted) Reset() {
	*x = DeviceWebrtcSessionStarted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceWebrtcSessionStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceWebrtcSessionStarted) ProtoMessage() {}

func (x *DeviceWebrtcSessionStarted) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceWebrtcSessionStarted.ProtoReflect.Descriptor instead.
func (*DeviceWebrtcSessionStarted) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{21}
}

type DeviceWebrtcOffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sdp string `protobuf:"bytes,1,opt,name=sdp,proto3" json:"sdp,omitempty"`
}

func (x *DeviceWebrtcOffer) Reset() {
	*x = DeviceWebrtcOffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceWebrtcOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceWebrtcOffer) ProtoMessage() {}

func (x *DeviceWebrtcOffer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceWebrtcOffer.ProtoReflect.Descriptor instead.
func (*DeviceWebrtcOffer) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{22}
}

func (x *DeviceWebrtcOffer) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

type DeviceWebrtcAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sdp string `protobuf:"bytes,1,opt,name=sdp,proto3" json:"sdp,omitempty"`
}

func (x *DeviceWebrtcAnswer) Reset() {
	*x = DeviceWebrtcAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceWebrtcAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceWebrtcAnswer) ProtoMessage() {}

func (x *DeviceWebrtcAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceWebrtcAnswer.ProtoReflect.Descriptor instead.
func (*DeviceWebrtcAnswer) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{23}
}

func (x *DeviceWebrtcAnswer) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

type DeviceWebrtcIceCandidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Candidate        string `protobuf:"bytes,1,opt,name=candidate,proto3" json:"candidate,omitempty"`
	SdpMid           string `protobuf:"bytes,2,opt,name=sdp_mid,json=sdpMid,proto3" json:"sdp_mid,omitempty"`
	SdpMLineIndex    int32  `protobuf:"varint,3,opt,name=sdp_m_line_index,json=sdpMLineIndex,proto3" json:"sdp_m_line_index,omitempty"`
	UsernameFragment string `protobuf:"bytes,4,opt,name=username_fragment,json=usernameFragment,proto3" json:"username_fragment,omitempty"`
}

func (x *DeviceWebrtcIceCandidate) Reset() {
	*x = DeviceWebrtcIceCandidate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceWebrtcIceCandidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceWebrtcIceCandidate) ProtoMessage() {}

func (x *DeviceWebrtcIceCandidate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceWebrtcIceCandidate.ProtoReflect.Descriptor instead.
func (*DeviceWebrtcIceCandidate) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{24}
}

func (x *DeviceWebrtcIceCandidate) GetCandidate() string {
	if x != nil {
		return x.Candidate
	}
	return ""
}

func (x *DeviceWebrtcIceCandidate) GetSdpMid() string {
	if x != nil {
		return x.SdpMid
	}
	return ""
}

func (x *DeviceWebrtcIceCandidate) GetSdpMLineIndex() int32 {
	if x != nil {
		return x.SdpMLineIndex
	}
	return 0
}

func (x *DeviceWebrtcIceCandidate) GetUsernameFragment() string {
	if x != nil {
		return x.UsernameFragment
	}
	return ""
}

type DeviceWebrtcPeerConnected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceWebrtcPeerConnected) Reset() {
	*x = DeviceWebrtcPeerConnected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceWebrtcPeerConnected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceWebrtcPeerConnected) ProtoMessage() {}

func (x *DeviceWebrtcPeerConnected) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceWebrtcPeerConnected.ProtoReflect.Descriptor instead.
func (*DeviceWebrtcPeerConnected) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{25}
}

type DeviceWebrtcPeerDisconnected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *DeviceWebrtcPeerDisconnected) Reset() {
	*x = DeviceWebrtcPeerDisconnected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceWebrtcPeerDisconnected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceWebrtcPeerDisconnected) ProtoMessage() {}

func (x *DeviceWebrtcPeerDisconnected) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceWebrtcPeerDisconnected.ProtoReflect.Descriptor instead.
func (*DeviceWebrtcPeerDisconnected) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{26}
}

func (x *DeviceWebrtcPeerDisconnected) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type DeviceWebrtcIceConnected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceWebrtcIceConnected) Reset() {
	*x = DeviceWebrtcIceConnected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceWebrtcIceConnected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceWebrtcIceConnected) ProtoMessage() {}

func (x *DeviceWebrtcIceConnected) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceWebrtcIceConnected.ProtoReflect.Descriptor instead.
func (*DeviceWebrtcIceConnected) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{27}
}

type DeviceWebrtcIceDisconnected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *DeviceWebrtcIceDisconnected) Reset() {
	*x = DeviceWebrtcIceDisconnected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceWebrtcIceDisconnected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceWebrtcIceDisconnected) ProtoMessage() {}

func (x *DeviceWebrtcIceDisconnected) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceWebrtcIceDisconnected.ProtoReflect.Descriptor instead.
func (*DeviceWebrtcIceDisconnected) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{28}
}

func (x *DeviceWebrtcIceDisconnected) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type DeviceWebrtcOfferAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceWebrtcOfferAck) Reset() {
	*x = DeviceWebrtcOfferAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceWebrtcOfferAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceWebrtcOfferAck) ProtoMessage() {}

func (x *DeviceWebrtcOfferAck) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceWebrtcOfferAck.ProtoReflect.Descriptor instead.
func (*DeviceWebrtcOfferAck) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{29}
}

type DeviceWebrtcAnswerAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceWebrtcAnswerAck) Reset() {
	*x = DeviceWebrtcAnswerAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceWebrtcAnswerAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceWebrtcAnswerAck) ProtoMessage() {}

func (x *DeviceWebrtcAnswerAck) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceWebrtcAnswerAck.ProtoReflect.Descriptor instead.
func (*DeviceWebrtcAnswerAck) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{30}
}

type DeviceWebrtcIceCandidateAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceWebrtcIceCandidateAck) Reset() {
	*x = DeviceWebrtcIceCandidateAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceWebrtcIceCandidateAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceWebrtcIceCandidateAck) ProtoMessage() {}

func (x *DeviceWebrtcIceCandidateAck) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceWebrtcIceCandidateAck.ProtoReflect.Descriptor instead.
func (*DeviceWebrtcIceCandidateAck) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{31}
}

type DeviceWebrtcError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeviceWebrtcError) Reset() {
	*x = DeviceWebrtcError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceWebrtcError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceWebrtcError) ProtoMessage() {}

func (x *DeviceWebrtcError) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceWebrtcError.ProtoReflect.Descriptor instead.
func (*DeviceWebrtcError) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{32}
}

func (x *DeviceWebrtcError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type DeviceWebrtcOfferError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeviceWebrtcOfferError) Reset() {
	*x = DeviceWebrtcOfferError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceWebrtcOfferError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceWebrtcOfferError) ProtoMessage() {}

func (x *DeviceWebrtcOfferError) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceWebrtcOfferError.ProtoReflect.Descriptor instead.
func (*DeviceWebrtcOfferError) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{33}
}

func (x *DeviceWebrtcOfferError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type DeviceWebrtcSessionStopWarning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *DeviceWebrtcSessionStopWarning) Reset() {
	*x = DeviceWebrtcSessionStopWarning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceWebrtcSessionStopWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceWebrtcSessionStopWarning) ProtoMessage() {}

func (x *DeviceWebrtcSessionStopWarning) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceWebrtcSessionStopWarning.ProtoReflect.Descriptor instead.
func (*DeviceWebrtcSessionStopWarning) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{34}
}

func (x *DeviceWebrtcSessionStopWarning) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type DeviceWebrtcPeerConnecting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeviceWebrtcPeerConnecting) Reset() {
	*x = DeviceWebrtcPeerConnecting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceWebrtcPeerConnecting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceWebrtcPeerConnecting) ProtoMessage() {}

func (x *DeviceWebrtcPeerConnecting) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceWebrtcPeerConnecting.ProtoReflect.Descriptor instead.
func (*DeviceWebrtcPeerConnecting) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{35}
}

func (x *DeviceWebrtcPeerConnecting) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type DeviceWebrtcDataChannelOpen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *DeviceWebrtcDataChannelOpen) Reset() {
	*x = DeviceWebrtcDataChannelOpen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceWebrtcDataChannelOpen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceWebrtcDataChannelOpen) ProtoMessage() {}

func (x *DeviceWebrtcDataChannelOpen) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceWebrtcDataChannelOpen.ProtoReflect.Descriptor instead.
func (*DeviceWebrtcDataChannelOpen) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{36}
}

func (x *DeviceWebrtcDataChannelOpen) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

// Device Camera messages
type DeviceCameraListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cameras []*common.Camera `protobuf:"bytes,1,rep,name=cameras,proto3" json:"cameras,omitempty"`
}

func (x *DeviceCameraListResponse) Reset() {
	*x = DeviceCameraListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceCameraListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCameraListResponse) ProtoMessage() {}

func (x *DeviceCameraListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCameraListResponse.ProtoReflect.Descriptor instead.
func (*DeviceCameraListResponse) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{37}
}

func (x *DeviceCameraListResponse) GetCameras() []*common.Camera {
	if x != nil {
		return x.Cameras
	}
	return nil
}

type DeviceCameraListError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeviceCameraListError) Reset() {
	*x = DeviceCameraListError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceCameraListError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCameraListError) ProtoMessage() {}

func (x *DeviceCameraListError) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCameraListError.ProtoReflect.Descriptor instead.
func (*DeviceCameraListError) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{38}
}

func (x *DeviceCameraListError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type DeviceCameraAddSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Camera *common.Camera `protobuf:"bytes,1,opt,name=camera,proto3" json:"camera,omitempty"`
}

func (x *DeviceCameraAddSuccess) Reset() {
	*x = DeviceCameraAddSuccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceCameraAddSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCameraAddSuccess) ProtoMessage() {}

func (x *DeviceCameraAddSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCameraAddSuccess.ProtoReflect.Descriptor instead.
func (*DeviceCameraAddSuccess) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{39}
}

func (x *DeviceCameraAddSuccess) GetCamera() *common.Camera {
	if x != nil {
		return x.Camera
	}
	return nil
}

type DeviceCameraAddError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeviceCameraAddError) Reset() {
	*x = DeviceCameraAddError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceCameraAddError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCameraAddError) ProtoMessage() {}

func (x *DeviceCameraAddError) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCameraAddError.ProtoReflect.Descriptor instead.
func (*DeviceCameraAddError) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{40}
}

func (x *DeviceCameraAddError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type DeviceCameraUpdateSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Camera *common.Camera `protobuf:"bytes,1,opt,name=camera,proto3" json:"camera,omitempty"`
}

func (x *DeviceCameraUpdateSuccess) Reset() {
	*x = DeviceCameraUpdateSuccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceCameraUpdateSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCameraUpdateSuccess) ProtoMessage() {}

func (x *DeviceCameraUpdateSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCameraUpdateSuccess.ProtoReflect.Descriptor instead.
func (*DeviceCameraUpdateSuccess) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{41}
}

func (x *DeviceCameraUpdateSuccess) GetCamera() *common.Camera {
	if x != nil {
		return x.Camera
	}
	return nil
}

type DeviceCameraUpdateError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeviceCameraUpdateError) Reset() {
	*x = DeviceCameraUpdateError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceCameraUpdateError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCameraUpdateError) ProtoMessage() {}

func (x *DeviceCameraUpdateError) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCameraUpdateError.ProtoReflect.Descriptor instead.
func (*DeviceCameraUpdateError) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{42}
}

func (x *DeviceCameraUpdateError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type DeviceCameraRemoveSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraId string `protobuf:"bytes,1,opt,name=camera_id,json=cameraId,proto3" json:"camera_id,omitempty"`
}

func (x *DeviceCameraRemoveSuccess) Reset() {
	*x = DeviceCameraRemoveSuccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceCameraRemoveSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCameraRemoveSuccess) ProtoMessage() {}

func (x *DeviceCameraRemoveSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCameraRemoveSuccess.ProtoReflect.Descriptor instead.
func (*DeviceCameraRemoveSuccess) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{43}
}

func (x *DeviceCameraRemoveSuccess) GetCameraId() string {
	if x != nil {
		return x.CameraId
	}
	return ""
}

type DeviceCameraRemoveError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeviceCameraRemoveError) Reset() {
	*x = DeviceCameraRemoveError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceCameraRemoveError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCameraRemoveError) ProtoMessage() {}

func (x *DeviceCameraRemoveError) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCameraRemoveError.ProtoReflect.Descriptor instead.
func (*DeviceCameraRemoveError) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{44}
}

func (x *DeviceCameraRemoveError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type DeviceCameraSwitchSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraId string `protobuf:"bytes,1,opt,name=camera_id,json=cameraId,proto3" json:"camera_id,omitempty"`
}

func (x *DeviceCameraSwitchSuccess) Reset() {
	*x = DeviceCameraSwitchSuccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceCameraSwitchSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCameraSwitchSuccess) ProtoMessage() {}

func (x *DeviceCameraSwitchSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCameraSwitchSuccess.ProtoReflect.Descriptor instead.
func (*DeviceCameraSwitchSuccess) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{45}
}

func (x *DeviceCameraSwitchSuccess) GetCameraId() string {
	if x != nil {
		return x.CameraId
	}
	return ""
}

type DeviceCameraSwitchError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeviceCameraSwitchError) Reset() {
	*x = DeviceCameraSwitchError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceCameraSwitchError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCameraSwitchError) ProtoMessage() {}

func (x *DeviceCameraSwitchError) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCameraSwitchError.ProtoReflect.Descriptor instead.
func (*DeviceCameraSwitchError) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{46}
}

func (x *DeviceCameraSwitchError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type DeviceCameraSelectedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Camera *common.Camera `protobuf:"bytes,1,opt,name=camera,proto3" json:"camera,omitempty"`
}

func (x *DeviceCameraSelectedResponse) Reset() {
	*x = DeviceCameraSelectedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceCameraSelectedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCameraSelectedResponse) ProtoMessage() {}

func (x *DeviceCameraSelectedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCameraSelectedResponse.ProtoReflect.Descriptor instead.
func (*DeviceCameraSelectedResponse) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{47}
}

func (x *DeviceCameraSelectedResponse) GetCamera() *common.Camera {
	if x != nil {
		return x.Camera
	}
	return nil
}

type DeviceCameraSelectedError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeviceCameraSelectedError) Reset() {
	*x = DeviceCameraSelectedError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceCameraSelectedError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCameraSelectedError) ProtoMessage() {}

func (x *DeviceCameraSelectedError) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCameraSelectedError.ProtoReflect.Descriptor instead.
func (*DeviceCameraSelectedError) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{48}
}

func (x *DeviceCameraSelectedError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Device other responses
type DeviceNetworkInterfacesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interfaces []*common.InterfaceInfo `protobuf:"bytes,1,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
}

func (x *DeviceNetworkInterfacesResponse) Reset() {
	*x = DeviceNetworkInterfacesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceNetworkInterfacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceNetworkInterfacesResponse) ProtoMessage() {}

func (x *DeviceNetworkInterfacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceNetworkInterfacesResponse.ProtoReflect.Descriptor instead.
func (*DeviceNetworkInterfacesResponse) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{49}
}

func (x *DeviceNetworkInterfacesResponse) GetInterfaces() []*common.InterfaceInfo {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

type DeviceStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *common.ServiceStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeviceStatusResponse) Reset() {
	*x = DeviceStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStatusResponse) ProtoMessage() {}

func (x *DeviceStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStatusResponse.ProtoReflect.Descriptor instead.
func (*DeviceStatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{50}
}

func (x *DeviceStatusResponse) GetStatus() *common.ServiceStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// API messages
type ApiDeviceConnected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *ApiDeviceConnected) Reset() {
	*x = ApiDeviceConnected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiDeviceConnected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiDeviceConnected) ProtoMessage() {}

func (x *ApiDeviceConnected) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiDeviceConnected.ProtoReflect.Descriptor instead.
func (*ApiDeviceConnected) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{51}
}

func (x *ApiDeviceConnected) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type ApiDeviceDisconnected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Reason   string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ApiDeviceDisconnected) Reset() {
	*x = ApiDeviceDisconnected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiDeviceDisconnected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiDeviceDisconnected) ProtoMessage() {}

func (x *ApiDeviceDisconnected) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiDeviceDisconnected.ProtoReflect.Descriptor instead.
func (*ApiDeviceDisconnected) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{52}
}

func (x *ApiDeviceDisconnected) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *ApiDeviceDisconnected) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// Client requests
type ClientRtspDial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ClientRtspDial) Reset() {
	*x = ClientRtspDial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientRtspDial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientRtspDial) ProtoMessage() {}

func (x *ClientRtspDial) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientRtspDial.ProtoReflect.Descriptor instead.
func (*ClientRtspDial) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{53}
}

func (x *ClientRtspDial) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ClientNetworkInterfacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClientNetworkInterfacesRequest) Reset() {
	*x = ClientNetworkInterfacesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientNetworkInterfacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientNetworkInterfacesRequest) ProtoMessage() {}

func (x *ClientNetworkInterfacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientNetworkInterfacesRequest.ProtoReflect.Descriptor instead.
func (*ClientNetworkInterfacesRequest) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{54}
}

type ClientCameraListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClientCameraListRequest) Reset() {
	*x = ClientCameraListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientCameraListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientCameraListRequest) ProtoMessage() {}

func (x *ClientCameraListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientCameraListRequest.ProtoReflect.Descriptor instead.
func (*ClientCameraListRequest) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{55}
}

type ClientCameraAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RtspUrl          string `protobuf:"bytes,2,opt,name=rtsp_url,json=rtspUrl,proto3" json:"rtsp_url,omitempty"`
	NetworkInterface string `protobuf:"bytes,3,opt,name=network_interface,json=networkInterface,proto3" json:"network_interface,omitempty"`
}

func (x *ClientCameraAdd) Reset() {
	*x = ClientCameraAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientCameraAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientCameraAdd) ProtoMessage() {}

func (x *ClientCameraAdd) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientCameraAdd.ProtoReflect.Descriptor instead.
func (*ClientCameraAdd) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{56}
}

func (x *ClientCameraAdd) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClientCameraAdd) GetRtspUrl() string {
	if x != nil {
		return x.RtspUrl
	}
	return ""
}

func (x *ClientCameraAdd) GetNetworkInterface() string {
	if x != nil {
		return x.NetworkInterface
	}
	return ""
}

type ClientCameraUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Camera *common.Camera `protobuf:"bytes,1,opt,name=camera,proto3" json:"camera,omitempty"`
}

func (x *ClientCameraUpdate) Reset() {
	*x = ClientCameraUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientCameraUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientCameraUpdate) ProtoMessage() {}

func (x *ClientCameraUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientCameraUpdate.ProtoReflect.Descriptor instead.
func (*ClientCameraUpdate) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{57}
}

func (x *ClientCameraUpdate) GetCamera() *common.Camera {
	if x != nil {
		return x.Camera
	}
	return nil
}

type ClientCameraRemove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraId string `protobuf:"bytes,1,opt,name=camera_id,json=cameraId,proto3" json:"camera_id,omitempty"`
}

func (x *ClientCameraRemove) Reset() {
	*x = ClientCameraRemove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientCameraRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientCameraRemove) ProtoMessage() {}

func (x *ClientCameraRemove) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientCameraRemove.ProtoReflect.Descriptor instead.
func (*ClientCameraRemove) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{58}
}

func (x *ClientCameraRemove) GetCameraId() string {
	if x != nil {
		return x.CameraId
	}
	return ""
}

type ClientCameraSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraId string `protobuf:"bytes,1,opt,name=camera_id,json=cameraId,proto3" json:"camera_id,omitempty"`
}

func (x *ClientCameraSwitch) Reset() {
	*x = ClientCameraSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientCameraSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientCameraSwitch) ProtoMessage() {}

func (x *ClientCameraSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientCameraSwitch.ProtoReflect.Descriptor instead.
func (*ClientCameraSwitch) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{59}
}

func (x *ClientCameraSwitch) GetCameraId() string {
	if x != nil {
		return x.CameraId
	}
	return ""
}

type ClientCameraSelectedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClientCameraSelectedRequest) Reset() {
	*x = ClientCameraSelectedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientCameraSelectedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientCameraSelectedRequest) ProtoMessage() {}

func (x *ClientCameraSelectedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientCameraSelectedRequest.ProtoReflect.Descriptor instead.
func (*ClientCameraSelectedRequest) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{60}
}

type ClientWebrtcSessionStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClientWebrtcSessionStart) Reset() {
	*x = ClientWebrtcSessionStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientWebrtcSessionStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientWebrtcSessionStart) ProtoMessage() {}

func (x *ClientWebrtcSessionStart) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientWebrtcSessionStart.ProtoReflect.Descriptor instead.
func (*ClientWebrtcSessionStart) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{61}
}

type ClientWebrtcOffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sdp string `protobuf:"bytes,1,opt,name=sdp,proto3" json:"sdp,omitempty"`
}

func (x *ClientWebrtcOffer) Reset() {
	*x = ClientWebrtcOffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientWebrtcOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientWebrtcOffer) ProtoMessage() {}

func (x *ClientWebrtcOffer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientWebrtcOffer.ProtoReflect.Descriptor instead.
func (*ClientWebrtcOffer) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{62}
}

func (x *ClientWebrtcOffer) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

type ClientWebrtcAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sdp string `protobuf:"bytes,1,opt,name=sdp,proto3" json:"sdp,omitempty"`
}

func (x *ClientWebrtcAnswer) Reset() {
	*x = ClientWebrtcAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientWebrtcAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientWebrtcAnswer) ProtoMessage() {}

func (x *ClientWebrtcAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientWebrtcAnswer.ProtoReflect.Descriptor instead.
func (*ClientWebrtcAnswer) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{63}
}

func (x *ClientWebrtcAnswer) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

type ClientWebrtcIceCandidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Candidate        string `protobuf:"bytes,1,opt,name=candidate,proto3" json:"candidate,omitempty"`
	SdpMid           string `protobuf:"bytes,2,opt,name=sdp_mid,json=sdpMid,proto3" json:"sdp_mid,omitempty"`
	SdpMLineIndex    int32  `protobuf:"varint,3,opt,name=sdp_m_line_index,json=sdpMLineIndex,proto3" json:"sdp_m_line_index,omitempty"`
	UsernameFragment string `protobuf:"bytes,4,opt,name=username_fragment,json=usernameFragment,proto3" json:"username_fragment,omitempty"`
}

func (x *ClientWebrtcIceCandidate) Reset() {
	*x = ClientWebrtcIceCandidate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientWebrtcIceCandidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientWebrtcIceCandidate) ProtoMessage() {}

func (x *ClientWebrtcIceCandidate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientWebrtcIceCandidate.ProtoReflect.Descriptor instead.
func (*ClientWebrtcIceCandidate) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{64}
}

func (x *ClientWebrtcIceCandidate) GetCandidate() string {
	if x != nil {
		return x.Candidate
	}
	return ""
}

func (x *ClientWebrtcIceCandidate) GetSdpMid() string {
	if x != nil {
		return x.SdpMid
	}
	return ""
}

func (x *ClientWebrtcIceCandidate) GetSdpMLineIndex() int32 {
	if x != nil {
		return x.SdpMLineIndex
	}
	return 0
}

func (x *ClientWebrtcIceCandidate) GetUsernameFragment() string {
	if x != nil {
		return x.UsernameFragment
	}
	return ""
}

type ClientDeviceReboot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClientDeviceReboot) Reset() {
	*x = ClientDeviceReboot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientDeviceReboot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientDeviceReboot) ProtoMessage() {}

func (x *ClientDeviceReboot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientDeviceReboot.ProtoReflect.Descriptor instead.
func (*ClientDeviceReboot) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{65}
}

type ClientStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClientStatusRequest) Reset() {
	*x = ClientStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientStatusRequest) ProtoMessage() {}

func (x *ClientStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientStatusRequest.ProtoReflect.Descriptor instead.
func (*ClientStatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{66}
}

type ClientModemInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClientModemInfoRequest) Reset() {
	*x = ClientModemInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientModemInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientModemInfoRequest) ProtoMessage() {}

func (x *ClientModemInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientModemInfoRequest.ProtoReflect.Descriptor instead.
func (*ClientModemInfoRequest) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{67}
}

// Generic error
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Details map[string]string `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_aircast_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_proto_aircast_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_proto_aircast_proto_rawDescGZIP(), []int{68}
}

func (x *Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetDetails() map[string]string {
	if x != nil {
		return x.Details
	}
	return nil
}

var File_proto_aircast_proto protoreflect.FileDescriptor

var file_proto_aircast_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd4, 0x37, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x5e, 0x0a, 0x16, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6b, 0x0a, 0x1b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61,
	0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x18, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x71, 0x0a, 0x1d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x69,
	0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x1a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x68, 0x0a, 0x1a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x69,
	0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x17, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5b, 0x0a, 0x15, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x74, 0x73, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x74, 0x73, 0x70, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x74, 0x73, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x62,
	0x0a, 0x18, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x74, 0x73, 0x70, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x74, 0x73, 0x70, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x79, 0x48, 0x00, 0x52, 0x15, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x74, 0x73, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x12, 0x4f, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x74, 0x73,
	0x70, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x74, 0x73, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x74, 0x73, 0x70, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x5c, 0x0a, 0x16, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x74,
	0x73, 0x70, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x74, 0x73,
	0x70, 0x44, 0x69, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x13, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x74, 0x73, 0x70, 0x44, 0x69, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x68, 0x0a, 0x1a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x74, 0x73, 0x70,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x74, 0x73, 0x70, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x17, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x74, 0x73, 0x70, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x65, 0x0a, 0x19, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x74, 0x73, 0x70, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x74, 0x73, 0x70, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x16, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x74, 0x73, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x5f, 0x0a, 0x17, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x74, 0x73,
	0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x74, 0x73,
	0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x74, 0x73, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c,
	0x6f, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x18, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x74,
	0x73, 0x70, 0x5f, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x74, 0x73, 0x70, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x15, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x74, 0x73, 0x70, 0x44, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x62, 0x0a, 0x18, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x72, 0x74, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x72, 0x63,
	0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x74, 0x73, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x15, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x74, 0x73, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x62, 0x0a, 0x18, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x74, 0x73, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x74, 0x73, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x15, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x74, 0x73, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x64, 0x0a, 0x18, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x74, 0x73, 0x70, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x74, 0x73, 0x70, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x16, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x74, 0x73, 0x70, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x68, 0x0a, 0x1a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x72, 0x74, 0x73, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x69, 0x72, 0x63,
	0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x74, 0x73, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x17, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x74,
	0x73, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12,
	0x62, 0x0a, 0x18, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x74, 0x73, 0x70, 0x5f, 0x72,
	0x65, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x74, 0x73, 0x70, 0x52,
	0x65, 0x64, 0x69, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x15, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x74, 0x73, 0x70, 0x52, 0x65, 0x64, 0x69, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x64, 0x0a, 0x18, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x61,
	0x76, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x61, 0x76, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x16, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x76, 0x6c, 0x69, 0x6e, 0x6b,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x65, 0x0a, 0x19, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x76, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x64, 0x69, 0x61, 0x6c,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x76, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x69, 0x61,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x16, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x61, 0x76, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x69, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x71, 0x0a, 0x1d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74,
	0x63, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x1a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57,
	0x65, 0x62, 0x72, 0x74, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x12, 0x55, 0x0a, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x77, 0x65,
	0x62, 0x72, 0x74, 0x63, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57,
	0x65, 0x62, 0x72, 0x74, 0x63, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x14, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x12, 0x6b, 0x0a, 0x1b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x77,
	0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x69, 0x72, 0x63,
	0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x49, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x18, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57,
	0x65, 0x62, 0x72, 0x74, 0x63, 0x49, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x6e, 0x0a, 0x1c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x77, 0x65, 0x62, 0x72,
	0x74, 0x63, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x19, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65,
	0x62, 0x72, 0x74, 0x63, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x77, 0x0a, 0x1f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x77, 0x65, 0x62, 0x72,
	0x74, 0x63, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x69, 0x72,
	0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x50, 0x65, 0x65, 0x72, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x1c, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x50, 0x65, 0x65, 0x72, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x6b, 0x0a, 0x1b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x49,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x18, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x49, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x74, 0x0a, 0x1e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x49,
	0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x1b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x49, 0x63,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x5f, 0x0a,
	0x17, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x12, 0x62,
	0x0a, 0x18, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x15, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x41,
	0x63, 0x6b, 0x12, 0x75, 0x0a, 0x1f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x77, 0x65, 0x62,
	0x72, 0x74, 0x63, 0x5f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x69,
	0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x49, 0x63, 0x65, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x1b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x49, 0x63, 0x65, 0x43, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x55, 0x0a, 0x13, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x11, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x65, 0x0a, 0x19, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74,
	0x63, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x3e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62,
	0x72, 0x74, 0x63, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x16, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x7e, 0x0a, 0x22, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x3f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62,
	0x72, 0x74, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x1e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57,
	0x65, 0x62, 0x72, 0x74, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70,
	0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x71, 0x0a, 0x1d, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x50, 0x65,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x1a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x50, 0x65, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x75, 0x0a, 0x1f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x41, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62,
	0x72, 0x74, 0x63, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70,
	0x65, 0x6e, 0x48, 0x00, 0x52, 0x1b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x72,
	0x74, 0x63, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65,
	0x6e, 0x12, 0x6b, 0x0a, 0x1b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x18, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62,
	0x0a, 0x18, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x15, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x65, 0x0a, 0x19, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x41, 0x64, 0x64, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x00, 0x52, 0x16, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x41,
	0x64, 0x64, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x5f, 0x0a, 0x17, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x72,
	0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x41, 0x64, 0x64, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x41, 0x64, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x6e, 0x0a, 0x1c, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52,
	0x19, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x68, 0x0a, 0x1a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x17, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x6e, 0x0a, 0x1c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x69, 0x72,
	0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x19, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x68, 0x0a, 0x1a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x17, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x6e,
	0x0a, 0x1c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x4e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x48, 0x00, 0x52, 0x19, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x68,
	0x0a, 0x1a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x4f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x17, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x77, 0x0a, 0x1f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x1c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6e, 0x0a, 0x1c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x19, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x80, 0x01, 0x0a, 0x22, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x1f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x16, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x5b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x14, 0x61, 0x70, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x12, 0x61, 0x70, 0x69, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x61,
	0x0a, 0x17, 0x61, 0x70, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x15, 0x61, 0x70, 0x69, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x4d, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x74, 0x73, 0x70,
	0x5f, 0x64, 0x69, 0x61, 0x6c, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61,
	0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x74, 0x73, 0x70, 0x44, 0x69, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x74, 0x73, 0x70, 0x44, 0x69, 0x61, 0x6c,
	0x12, 0x7e, 0x0a, 0x21, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61,
	0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x1e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x69, 0x0a, 0x1a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xca,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x17, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x11, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x64,
	0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x41, 0x64, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x41, 0x64, 0x64, 0x12, 0x59, 0x0a,
	0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x18, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52,
	0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0xce, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x75,
	0x0a, 0x1e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x1b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x69,
	0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x18, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x56, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x65,
	0x62, 0x72, 0x74, 0x63, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0xd1, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x72, 0x74,
	0x63, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x14, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x69, 0x72,
	0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x6c, 0x0a, 0x1b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61,
	0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x49, 0x63, 0x65, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x18, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x49, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0xd4, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x12,
	0x5c, 0x0a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x66, 0x0a,
	0x19, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xd6, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0xe7,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x2e, 0x0a, 0x14, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x0e,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x9f, 0x01, 0x0a, 0x18,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4d,
	0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0d,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x32, 0x0a,
	0x1a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0xce, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x6d, 0x65, 0x69, 0x12, 0x4d, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x69,
	0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x22, 0x2d, 0x0a, 0x13, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x74, 0x73, 0x70,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x2f, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x74, 0x73, 0x70, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x27, 0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x74, 0x73, 0x70,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x2b, 0x0a, 0x13, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x74, 0x73, 0x70, 0x44, 0x69, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x2f, 0x0a, 0x17, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x74, 0x73, 0x70, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x2e, 0x0a, 0x16, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x74, 0x73, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x30, 0x0a, 0x14, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x74, 0x73, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x2d, 0x0a, 0x15, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x74, 0x73, 0x70, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x2d, 0x0a, 0x15, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x74, 0x73, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x2d, 0x0a, 0x15, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x74, 0x73, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x30, 0x0a, 0x16, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x74, 0x73, 0x70, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x2f, 0x0a, 0x17, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x74, 0x73, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x2d, 0x0a, 0x15, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x74, 0x73, 0x70, 0x52, 0x65, 0x64, 0x69, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x30, 0x0a, 0x16, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x76, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2e, 0x0a, 0x16,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x76, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x69, 0x61,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x1c, 0x0a, 0x1a,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x22, 0x25, 0x0a, 0x11, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x64, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x64,
	0x70, 0x22, 0x26, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x72, 0x74,
	0x63, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x64, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x64, 0x70, 0x22, 0xa7, 0x01, 0x0a, 0x18, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x49, 0x63, 0x65, 0x43, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x64, 0x70, 0x5f, 0x6d, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x64, 0x70, 0x4d, 0x69, 0x64, 0x12, 0x27, 0x0a,
	0x10, 0x73, 0x64, 0x70, 0x5f, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x64, 0x70, 0x4d, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62,
	0x72, 0x74, 0x63, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x22, 0x36, 0x0a, 0x1c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63,
	0x50, 0x65, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x1a, 0x0a, 0x18, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x49, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x22, 0x35, 0x0a, 0x1b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65,
	0x62, 0x72, 0x74, 0x63, 0x49, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x16, 0x0a, 0x14, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x41, 0x63, 0x6b, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62,
	0x72, 0x74, 0x63, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x22, 0x1d, 0x0a, 0x1b,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x49, 0x63, 0x65, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x22, 0x29, 0x0a, 0x11, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x2e, 0x0a, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x38, 0x0a, 0x1e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f,
	0x70, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x22, 0x34, 0x0a, 0x1a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63,
	0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3c, 0x0a, 0x1b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x18, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x39, 0x0a, 0x07, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x52, 0x07, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x22, 0x2d, 0x0a, 0x15, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x51, 0x0a, 0x16, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x41, 0x64, 0x64, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x06, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x22, 0x2c, 0x0a,
	0x14, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x41, 0x64, 0x64,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x54, 0x0a, 0x19, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x06, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x22, 0x2f, 0x0a, 0x17, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x38, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x17,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x38, 0x0a,
	0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x17, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x57, 0x0a, 0x1c, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x06, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x22, 0x31, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x69, 0x0a, 0x1f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x69,
	0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x22,
	0x56, 0x0a, 0x14, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x31, 0x0a, 0x12, 0x41, 0x70, 0x69, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x15, 0x41, 0x70,
	0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x22, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x74, 0x73, 0x70, 0x44, 0x69, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x20, 0x0a, 0x1e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x19,
	0x0a, 0x17, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6d, 0x0a, 0x0f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x41, 0x64, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x74, 0x73, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x74, 0x73, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x4d, 0x0a, 0x12, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x37,
	0x0a, 0x06, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52,
	0x06, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x22, 0x31, 0x0a, 0x12, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x12, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x22, 0x1d, 0x0a,
	0x1b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1a, 0x0a, 0x18,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x22, 0x25, 0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x64, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x64, 0x70, 0x22,
	0x26, 0x0a, 0x12, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x64, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x64, 0x70, 0x22, 0xa7, 0x01, 0x0a, 0x18, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x49, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x64, 0x70, 0x5f, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x64, 0x70, 0x4d, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x10, 0x73,
	0x64, 0x70, 0x5f, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x64, 0x70, 0x4d, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x18,
	0x0a, 0x16, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x3e, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x1a, 0x3a, 0x0a, 0x0c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x2c, 0x5a, 0x2a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61, 0x76, 0x6c, 0x69,
	0x68, 0x61, 0x2f, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_proto_aircast_proto_rawDescOnce sync.Once
	file_proto_aircast_proto_rawDescData = file_proto_aircast_proto_rawDesc
)

func file_proto_aircast_proto_rawDescGZIP() []byte {
	file_proto_aircast_proto_rawDescOnce.Do(func() {
		file_proto_aircast_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_aircast_proto_rawDescData)
	})
	return file_proto_aircast_proto_rawDescData
}

var file_proto_aircast_proto_msgTypes = make([]protoimpl.MessageInfo, 70)
var file_proto_aircast_proto_goTypes = []any{
	(*Message)(nil),                         // 0: aircast.protocol.Message
	(*DeviceModemConnected)(nil),            // 1: aircast.protocol.DeviceModemConnected
	(*DeviceModemInfo)(nil),                 // 2: aircast.protocol.DeviceModemInfo
	(*DeviceModemSignalQuality)(nil),        // 3: aircast.protocol.DeviceModemSignalQuality
	(*DeviceModemConnectionError)(nil),      // 4: aircast.protocol.DeviceModemConnectionError
	(*DeviceModemInfoResponse)(nil),         // 5: aircast.protocol.DeviceModemInfoResponse
	(*DeviceRtspConnected)(nil),             // 6: aircast.protocol.DeviceRtspConnected
	(*DeviceRtspStreamReady)(nil),           // 7: aircast.protocol.DeviceRtspStreamReady
	(*DeviceRtspError)(nil),                 // 8: aircast.protocol.DeviceRtspError
	(*DeviceRtspDialError)(nil),             // 9: aircast.protocol.DeviceRtspDialError
	(*DeviceRtspDescribeError)(nil),         // 10: aircast.protocol.DeviceRtspDescribeError
	(*DeviceRtspPublishError)(nil),          // 11: aircast.protocol.DeviceRtspPublishError
	(*DeviceRtspPacketLost)(nil),            // 12: aircast.protocol.DeviceRtspPacketLost
	(*DeviceRtspDecodeError)(nil),           // 13: aircast.protocol.DeviceRtspDecodeError
	(*DeviceRtspListenError)(nil),           // 14: aircast.protocol.DeviceRtspListenError
	(*DeviceRtspClientError)(nil),           // 15: aircast.protocol.DeviceRtspClientError
	(*DeviceRtspDisconnected)(nil),          // 16: aircast.protocol.DeviceRtspDisconnected
	(*DeviceRtspConnectFailed)(nil),         // 17: aircast.protocol.DeviceRtspConnectFailed
	(*DeviceRtspRedialError)(nil),           // 18: aircast.protocol.DeviceRtspRedialError
	(*DeviceMavlinkConnected)(nil),          // 19: aircast.protocol.DeviceMavlinkConnected
	(*DeviceMavlinkDialError)(nil),          // 20: aircast.protocol.DeviceMavlinkDialError
	(*DeviceWebrtcSessionStarted)(nil),      // 21: aircast.protocol.DeviceWebrtcSessionStarted
	(*DeviceWebrtcOffer)(nil),               // 22: aircast.protocol.DeviceWebrtcOffer
	(*DeviceWebrtcAnswer)(nil),              // 23: aircast.protocol.DeviceWebrtcAnswer
	(*DeviceWebrtcIceCandidate)(nil),        // 24: aircast.protocol.DeviceWebrtcIceCandidate
	(*DeviceWebrtcPeerConnected)(nil),       // 25: aircast.protocol.DeviceWebrtcPeerConnected
	(*DeviceWebrtcPeerDisconnected)(nil),    // 26: aircast.protocol.DeviceWebrtcPeerDisconnected
	(*DeviceWebrtcIceConnected)(nil),        // 27: aircast.protocol.DeviceWebrtcIceConnected
	(*DeviceWebrtcIceDisconnected)(nil),     // 28: aircast.protocol.DeviceWebrtcIceDisconnected
	(*DeviceWebrtcOfferAck)(nil),            // 29: aircast.protocol.DeviceWebrtcOfferAck
	(*DeviceWebrtcAnswerAck)(nil),           // 30: aircast.protocol.DeviceWebrtcAnswerAck
	(*DeviceWebrtcIceCandidateAck)(nil),     // 31: aircast.protocol.DeviceWebrtcIceCandidateAck
	(*DeviceWebrtcError)(nil),               // 32: aircast.protocol.DeviceWebrtcError
	(*DeviceWebrtcOfferError)(nil),          // 33: aircast.protocol.DeviceWebrtcOfferError
	(*DeviceWebrtcSessionStopWarning)(nil),  // 34: aircast.protocol.DeviceWebrtcSessionStopWarning
	(*DeviceWebrtcPeerConnecting)(nil),      // 35: aircast.protocol.DeviceWebrtcPeerConnecting
	(*DeviceWebrtcDataChannelOpen)(nil),     // 36: aircast.protocol.DeviceWebrtcDataChannelOpen
	(*DeviceCameraListResponse)(nil),        // 37: aircast.protocol.DeviceCameraListResponse
	(*DeviceCameraListError)(nil),           // 38: aircast.protocol.DeviceCameraListError
	(*DeviceCameraAddSuccess)(nil),          // 39: aircast.protocol.DeviceCameraAddSuccess
	(*DeviceCameraAddError)(nil),            // 40: aircast.protocol.DeviceCameraAddError
	(*DeviceCameraUpdateSuccess)(nil),       // 41: aircast.protocol.DeviceCameraUpdateSuccess
	(*DeviceCameraUpdateError)(nil),         // 42: aircast.protocol.DeviceCameraUpdateError
	(*DeviceCameraRemoveSuccess)(nil),       // 43: aircast.protocol.DeviceCameraRemoveSuccess
	(*DeviceCameraRemoveError)(nil),         // 44: aircast.protocol.DeviceCameraRemoveError
	(*DeviceCameraSwitchSuccess)(nil),       // 45: aircast.protocol.DeviceCameraSwitchSuccess
	(*DeviceCameraSwitchError)(nil),         // 46: aircast.protocol.DeviceCameraSwitchError
	(*DeviceCameraSelectedResponse)(nil),    // 47: aircast.protocol.DeviceCameraSelectedResponse
	(*DeviceCameraSelectedError)(nil),       // 48: aircast.protocol.DeviceCameraSelectedError
	(*DeviceNetworkInterfacesResponse)(nil), // 49: aircast.protocol.DeviceNetworkInterfacesResponse
	(*DeviceStatusResponse)(nil),            // 50: aircast.protocol.DeviceStatusResponse
	(*ApiDeviceConnected)(nil),              // 51: aircast.protocol.ApiDeviceConnected
	(*ApiDeviceDisconnected)(nil),           // 52: aircast.protocol.ApiDeviceDisconnected
	(*ClientRtspDial)(nil),                  // 53: aircast.protocol.ClientRtspDial
	(*ClientNetworkInterfacesRequest)(nil),  // 54: aircast.protocol.ClientNetworkInterfacesRequest
	(*ClientCameraListRequest)(nil),         // 55: aircast.protocol.ClientCameraListRequest
	(*ClientCameraAdd)(nil),                 // 56: aircast.protocol.ClientCameraAdd
	(*ClientCameraUpdate)(nil),              // 57: aircast.protocol.ClientCameraUpdate
	(*ClientCameraRemove)(nil),              // 58: aircast.protocol.ClientCameraRemove
	(*ClientCameraSwitch)(nil),              // 59: aircast.protocol.ClientCameraSwitch
	(*ClientCameraSelectedRequest)(nil),     // 60: aircast.protocol.ClientCameraSelectedRequest
	(*ClientWebrtcSessionStart)(nil),        // 61: aircast.protocol.ClientWebrtcSessionStart
	(*ClientWebrtcOffer)(nil),               // 62: aircast.protocol.ClientWebrtcOffer
	(*ClientWebrtcAnswer)(nil),              // 63: aircast.protocol.ClientWebrtcAnswer
	(*ClientWebrtcIceCandidate)(nil),        // 64: aircast.protocol.ClientWebrtcIceCandidate
	(*ClientDeviceReboot)(nil),              // 65: aircast.protocol.ClientDeviceReboot
	(*ClientStatusRequest)(nil),             // 66: aircast.protocol.ClientStatusRequest
	(*ClientModemInfoRequest)(nil),          // 67: aircast.protocol.ClientModemInfoRequest
	(*Error)(nil),                           // 68: aircast.protocol.Error
	nil,                                     // 69: aircast.protocol.Error.DetailsEntry
	(*common.Event)(nil),                    // 70: aircast.protocol.common.Event
	(*common.SignalQuality)(nil),            // 71: aircast.protocol.common.SignalQuality
	(*common.Camera)(nil),                   // 72: aircast.protocol.common.Camera
	(*common.InterfaceInfo)(nil),            // 73: aircast.protocol.common.InterfaceInfo
	(*common.ServiceStatus)(nil),            // 74: aircast.protocol.common.ServiceStatus
}
var file_proto_aircast_proto_depIdxs = []int32{
	1,  // 0: aircast.protocol.Message.device_modem_connected:type_name -> aircast.protocol.DeviceModemConnected
	2,  // 1: aircast.protocol.Message.device_modem_info:type_name -> aircast.protocol.DeviceModemInfo
	3,  // 2: aircast.protocol.Message.device_modem_signal_quality:type_name -> aircast.protocol.DeviceModemSignalQuality
	4,  // 3: aircast.protocol.Message.device_modem_connection_error:type_name -> aircast.protocol.DeviceModemConnectionError
	5,  // 4: aircast.protocol.Message.device_modem_info_response:type_name -> aircast.protocol.DeviceModemInfoResponse
	6,  // 5: aircast.protocol.Message.device_rtsp_connected:type_name -> aircast.protocol.DeviceRtspConnected
	7,  // 6: aircast.protocol.Message.device_rtsp_stream_ready:type_name -> aircast.protocol.DeviceRtspStreamReady
	8,  // 7: aircast.protocol.Message.device_rtsp_error:type_name -> aircast.protocol.DeviceRtspError
	9,  // 8: aircast.protocol.Message.device_rtsp_dial_error:type_name -> aircast.protocol.DeviceRtspDialError
	10, // 9: aircast.protocol.Message.device_rtsp_describe_error:type_name -> aircast.protocol.DeviceRtspDescribeError
	11, // 10: aircast.protocol.Message.device_rtsp_publish_error:type_name -> aircast.protocol.DeviceRtspPublishError
	12, // 11: aircast.protocol.Message.device_rtsp_packet_lost:type_name -> aircast.protocol.DeviceRtspPacketLost
	13, // 12: aircast.protocol.Message.device_rtsp_decode_error:type_name -> aircast.protocol.DeviceRtspDecodeError
	14, // 13: aircast.protocol.Message.device_rtsp_listen_error:type_name -> aircast.protocol.DeviceRtspListenError
	15, // 14: aircast.protocol.Message.device_rtsp_client_error:type_name -> aircast.protocol.DeviceRtspClientError
	16, // 15: aircast.protocol.Message.device_rtsp_disconnected:type_name -> aircast.protocol.DeviceRtspDisconnected
	17, // 16: aircast.protocol.Message.device_rtsp_connect_failed:type_name -> aircast.protocol.DeviceRtspConnectFailed
	18, // 17: aircast.protocol.Message.device_rtsp_redial_error:type_name -> aircast.protocol.DeviceRtspRedialError
	19, // 18: aircast.protocol.Message.device_mavlink_connected:type_name -> aircast.protocol.DeviceMavlinkConnected
	20, // 19: aircast.protocol.Message.device_mavlink_dial_error:type_name -> aircast.protocol.DeviceMavlinkDialError
	21, // 20: aircast.protocol.Message.device_webrtc_session_started:type_name -> aircast.protocol.DeviceWebrtcSessionStarted
	22, // 21: aircast.protocol.Message.device_webrtc_offer:type_name -> aircast.protocol.DeviceWebrtcOffer
	23, // 22: aircast.protocol.Message.device_webrtc_answer:type_name -> aircast.protocol.DeviceWebrtcAnswer
	24, // 23: aircast.protocol.Message.device_webrtc_ice_candidate:type_name -> aircast.protocol.DeviceWebrtcIceCandidate
	25, // 24: aircast.protocol.Message.device_webrtc_peer_connected:type_name -> aircast.protocol.DeviceWebrtcPeerConnected
	26, // 25: aircast.protocol.Message.device_webrtc_peer_disconnected:type_name -> aircast.protocol.DeviceWebrtcPeerDisconnected
	27, // 26: aircast.protocol.Message.device_webrtc_ice_connected:type_name -> aircast.protocol.DeviceWebrtcIceConnected
	28, // 27: aircast.protocol.Message.device_webrtc_ice_disconnected:type_name -> aircast.protocol.DeviceWebrtcIceDisconnected
	29, // 28: aircast.protocol.Message.device_webrtc_offer_ack:type_name -> aircast.protocol.DeviceWebrtcOfferAck
	30, // 29: aircast.protocol.Message.device_webrtc_answer_ack:type_name -> aircast.protocol.DeviceWebrtcAnswerAck
	31, // 30: aircast.protocol.Message.device_webrtc_ice_candidate_ack:type_name -> aircast.protocol.DeviceWebrtcIceCandidateAck
	32, // 31: aircast.protocol.Message.device_webrtc_error:type_name -> aircast.protocol.DeviceWebrtcError
	33, // 32: aircast.protocol.Message.device_webrtc_offer_error:type_name -> aircast.protocol.DeviceWebrtcOfferError
	34, // 33: aircast.protocol.Message.device_webrtc_session_stop_warning:type_name -> aircast.protocol.DeviceWebrtcSessionStopWarning
	35, // 34: aircast.protocol.Message.device_webrtc_peer_connecting:type_name -> aircast.protocol.DeviceWebrtcPeerConnecting
	36, // 35: aircast.protocol.Message.device_webrtc_data_channel_open:type_name -> aircast.protocol.DeviceWebrtcDataChannelOpen
	37, // 36: aircast.protocol.Message.device_camera_list_response:type_name -> aircast.protocol.DeviceCameraListResponse
	38, // 37: aircast.protocol.Message.device_camera_list_error:type_name -> aircast.protocol.DeviceCameraListError
	39, // 38: aircast.protocol.Message.device_camera_add_success:type_name -> aircast.protocol.DeviceCameraAddSuccess
	40, // 39: aircast.protocol.Message.device_camera_add_error:type_name -> aircast.protocol.DeviceCameraAddError
	41, // 40: aircast.protocol.Message.device_camera_update_success:type_name -> aircast.protocol.DeviceCameraUpdateSuccess
	42, // 41: aircast.protocol.Message.device_camera_update_error:type_name -> aircast.protocol.DeviceCameraUpdateError
	43, // 42: aircast.protocol.Message.device_camera_remove_success:type_name -> aircast.protocol.DeviceCameraRemoveSuccess
	44, // 43: aircast.protocol.Message.device_camera_remove_error:type_name -> aircast.protocol.DeviceCameraRemoveError
	45, // 44: aircast.protocol.Message.device_camera_switch_success:type_name -> aircast.protocol.DeviceCameraSwitchSuccess
	46, // 45: aircast.protocol.Message.device_camera_switch_error:type_name -> aircast.protocol.DeviceCameraSwitchError
	47, // 46: aircast.protocol.Message.device_camera_selected_response:type_name -> aircast.protocol.DeviceCameraSelectedResponse
	48, // 47: aircast.protocol.Message.device_camera_selected_error:type_name -> aircast.protocol.DeviceCameraSelectedError
	49, // 48: aircast.protocol.Message.device_network_interfaces_response:type_name -> aircast.protocol.DeviceNetworkInterfacesResponse
	50, // 49: aircast.protocol.Message.device_status_response:type_name -> aircast.protocol.DeviceStatusResponse
	51, // 50: aircast.protocol.Message.api_device_connected:type_name -> aircast.protocol.ApiDeviceConnected
	52, // 51: aircast.protocol.Message.api_device_disconnected:type_name -> aircast.protocol.ApiDeviceDisconnected
	53, // 52: aircast.protocol.Message.client_rtsp_dial:type_name -> aircast.protocol.ClientRtspDial
	54, // 53: aircast.protocol.Message.client_network_interfaces_request:type_name -> aircast.protocol.ClientNetworkInterfacesRequest
	55, // 54: aircast.protocol.Message.client_camera_list_request:type_name -> aircast.protocol.ClientCameraListRequest
	56, // 55: aircast.protocol.Message.client_camera_add:type_name -> aircast.protocol.ClientCameraAdd
	57, // 56: aircast.protocol.Message.client_camera_update:type_name -> aircast.protocol.ClientCameraUpdate
	58, // 57: aircast.protocol.Message.client_camera_remove:type_name -> aircast.protocol.ClientCameraRemove
	59, // 58: aircast.protocol.Message.client_camera_switch:type_name -> aircast.protocol.ClientCameraSwitch
	60, // 59: aircast.protocol.Message.client_camera_selected_request:type_name -> aircast.protocol.ClientCameraSelectedRequest
	61, // 60: aircast.protocol.Message.client_webrtc_session_start:type_name -> aircast.protocol.ClientWebrtcSessionStart
	62, // 61: aircast.protocol.Message.client_webrtc_offer:type_name -> aircast.protocol.ClientWebrtcOffer
	63, // 62: aircast.protocol.Message.client_webrtc_answer:type_name -> aircast.protocol.ClientWebrtcAnswer
	64, // 63: aircast.protocol.Message.client_webrtc_ice_candidate:type_name -> aircast.protocol.ClientWebrtcIceCandidate
	65, // 64: aircast.protocol.Message.client_device_reboot:type_name -> aircast.protocol.ClientDeviceReboot
	66, // 65: aircast.protocol.Message.client_status_request:type_name -> aircast.protocol.ClientStatusRequest
	67, // 66: aircast.protocol.Message.client_modem_info_request:type_name -> aircast.protocol.ClientModemInfoRequest
	68, // 67: aircast.protocol.Message.error:type_name -> aircast.protocol.Error
	70, // 68: aircast.protocol.DeviceModemInfo.event:type_name -> aircast.protocol.common.Event
	71, // 69: aircast.protocol.DeviceModemInfo.signal_quality:type_name -> aircast.protocol.common.SignalQuality
	70, // 70: aircast.protocol.DeviceModemSignalQuality.event:type_name -> aircast.protocol.common.Event
	71, // 71: aircast.protocol.DeviceModemSignalQuality.signal_quality:type_name -> aircast.protocol.common.SignalQuality
	71, // 72: aircast.protocol.DeviceModemInfoResponse.signal_quality:type_name -> aircast.protocol.common.SignalQuality
	72, // 73: aircast.protocol.DeviceCameraListResponse.cameras:type_name -> aircast.protocol.common.Camera
	72, // 74: aircast.protocol.DeviceCameraAddSuccess.camera:type_name -> aircast.protocol.common.Camera
	72, // 75: aircast.protocol.DeviceCameraUpdateSuccess.camera:type_name -> aircast.protocol.common.Camera
	72, // 76: aircast.protocol.DeviceCameraSelectedResponse.camera:type_name -> aircast.protocol.common.Camera
	73, // 77: aircast.protocol.DeviceNetworkInterfacesResponse.interfaces:type_name -> aircast.protocol.common.InterfaceInfo
	74, // 78: aircast.protocol.DeviceStatusResponse.status:type_name -> aircast.protocol.common.ServiceStatus
	72, // 79: aircast.protocol.ClientCameraUpdate.camera:type_name -> aircast.protocol.common.Camera
	69, // 80: aircast.protocol.Error.details:type_name -> aircast.protocol.Error.DetailsEntry
	81, // [81:81] is the sub-list for method output_type
	81, // [81:81] is the sub-list for method input_type
	81, // [81:81] is the sub-list for extension type_name
	81, // [81:81] is the sub-list for extension extendee
	0,  // [0:81] is the sub-list for field type_name
}

func init() { file_proto_aircast_proto_init() }
func file_proto_aircast_proto_init() {
	if File_proto_aircast_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_aircast_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceModemConnected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceModemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceModemSignalQuality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceModemConnectionError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceModemInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceRtspConnected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceRtspStreamReady); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceRtspError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceRtspDialError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceRtspDescribeError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceRtspPublishError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceRtspPacketLost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceRtspDecodeError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceRtspListenError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceRtspClientError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceRtspDisconnected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceRtspConnectFailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceRtspRedialError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceMavlinkConnected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceMavlinkDialError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceWebrtcSessionStarted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceWebrtcOffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceWebrtcAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceWebrtcIceCandidate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceWebrtcPeerConnected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceWebrtcPeerDisconnected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceWebrtcIceConnected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceWebrtcIceDisconnected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceWebrtcOfferAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceWebrtcAnswerAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceWebrtcIceCandidateAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceWebrtcError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceWebrtcOfferError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceWebrtcSessionStopWarning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceWebrtcPeerConnecting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceWebrtcDataChannelOpen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceCameraListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceCameraListError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceCameraAddSuccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceCameraAddError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceCameraUpdateSuccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceCameraUpdateError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceCameraRemoveSuccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceCameraRemoveError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceCameraSwitchSuccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceCameraSwitchError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceCameraSelectedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceCameraSelectedError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceNetworkInterfacesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*ApiDeviceConnected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*ApiDeviceDisconnected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*ClientRtspDial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*ClientNetworkInterfacesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*ClientCameraListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*ClientCameraAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*ClientCameraUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*ClientCameraRemove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*ClientCameraSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*ClientCameraSelectedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*ClientWebrtcSessionStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*ClientWebrtcOffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*ClientWebrtcAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*ClientWebrtcIceCandidate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*ClientDeviceReboot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*ClientStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*ClientModemInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_aircast_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_aircast_proto_msgTypes[0].OneofWrappers = []any{
		(*Message_DeviceModemConnected)(nil),
		(*Message_DeviceModemInfo)(nil),
		(*Message_DeviceModemSignalQuality)(nil),
		(*Message_DeviceModemConnectionError)(nil),
		(*Message_DeviceModemInfoResponse)(nil),
		(*Message_DeviceRtspConnected)(nil),
		(*Message_DeviceRtspStreamReady)(nil),
		(*Message_DeviceRtspError)(nil),
		(*Message_DeviceRtspDialError)(nil),
		(*Message_DeviceRtspDescribeError)(nil),
		(*Message_DeviceRtspPublishError)(nil),
		(*Message_DeviceRtspPacketLost)(nil),
		(*Message_DeviceRtspDecodeError)(nil),
		(*Message_DeviceRtspListenError)(nil),
		(*Message_DeviceRtspClientError)(nil),
		(*Message_DeviceRtspDisconnected)(nil),
		(*Message_DeviceRtspConnectFailed)(nil),
		(*Message_DeviceRtspRedialError)(nil),
		(*Message_DeviceMavlinkConnected)(nil),
		(*Message_DeviceMavlinkDialError)(nil),
		(*Message_DeviceWebrtcSessionStarted)(nil),
		(*Message_DeviceWebrtcOffer)(nil),
		(*Message_DeviceWebrtcAnswer)(nil),
		(*Message_DeviceWebrtcIceCandidate)(nil),
		(*Message_DeviceWebrtcPeerConnected)(nil),
		(*Message_DeviceWebrtcPeerDisconnected)(nil),
		(*Message_DeviceWebrtcIceConnected)(nil),
		(*Message_DeviceWebrtcIceDisconnected)(nil),
		(*Message_DeviceWebrtcOfferAck)(nil),
		(*Message_DeviceWebrtcAnswerAck)(nil),
		(*Message_DeviceWebrtcIceCandidateAck)(nil),
		(*Message_DeviceWebrtcError)(nil),
		(*Message_DeviceWebrtcOfferError)(nil),
		(*Message_DeviceWebrtcSessionStopWarning)(nil),
		(*Message_DeviceWebrtcPeerConnecting)(nil),
		(*Message_DeviceWebrtcDataChannelOpen)(nil),
		(*Message_DeviceCameraListResponse)(nil),
		(*Message_DeviceCameraListError)(nil),
		(*Message_DeviceCameraAddSuccess)(nil),
		(*Message_DeviceCameraAddError)(nil),
		(*Message_DeviceCameraUpdateSuccess)(nil),
		(*Message_DeviceCameraUpdateError)(nil),
		(*Message_DeviceCameraRemoveSuccess)(nil),
		(*Message_DeviceCameraRemoveError)(nil),
		(*Message_DeviceCameraSwitchSuccess)(nil),
		(*Message_DeviceCameraSwitchError)(nil),
		(*Message_DeviceCameraSelectedResponse)(nil),
		(*Message_DeviceCameraSelectedError)(nil),
		(*Message_DeviceNetworkInterfacesResponse)(nil),
		(*Message_DeviceStatusResponse)(nil),
		(*Message_ApiDeviceConnected)(nil),
		(*Message_ApiDeviceDisconnected)(nil),
		(*Message_ClientRtspDial)(nil),
		(*Message_ClientNetworkInterfacesRequest)(nil),
		(*Message_ClientCameraListRequest)(nil),
		(*Message_ClientCameraAdd)(nil),
		(*Message_ClientCameraUpdate)(nil),
		(*Message_ClientCameraRemove)(nil),
		(*Message_ClientCameraSwitch)(nil),
		(*Message_ClientCameraSelectedRequest)(nil),
		(*Message_ClientWebrtcSessionStart)(nil),
		(*Message_ClientWebrtcOffer)(nil),
		(*Message_ClientWebrtcAnswer)(nil),
		(*Message_ClientWebrtcIceCandidate)(nil),
		(*Message_ClientDeviceReboot)(nil),
		(*Message_ClientStatusRequest)(nil),
		(*Message_ClientModemInfoRequest)(nil),
		(*Message_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_aircast_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   70,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_aircast_proto_goTypes,
		DependencyIndexes: file_proto_aircast_proto_depIdxs,
		MessageInfos:      file_proto_aircast_proto_msgTypes,
	}.Build()
	File_proto_aircast_proto = out.File
	file_proto_aircast_proto_rawDesc = nil
	file_proto_aircast_proto_goTypes = nil
	file_proto_aircast_proto_depIdxs = nil
}
