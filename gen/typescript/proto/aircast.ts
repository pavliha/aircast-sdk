// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: proto/aircast.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Camera, Event, InterfaceInfo, ServiceStatus, SignalQuality } from "./common";

export const protobufPackage = "aircast.protocol";

/** Main message wrapper that encapsulates all possible messages */
export interface Message {
  /** Standard message envelope */
  messageId: string;
  /** For response correlation with request */
  correlationId: string;
  /** Version of the protocol (e.g., "1.0") */
  protocolVersion: string;
  /** Unix timestamp in milliseconds */
  timestamp: number;
  /** Device events and responses */
  deviceModemConnected?: DeviceModemConnected | undefined;
  deviceModemInfo?: DeviceModemInfo | undefined;
  deviceModemSignalQuality?: DeviceModemSignalQuality | undefined;
  deviceModemConnectionError?: DeviceModemConnectionError | undefined;
  deviceModemInfoResponse?: DeviceModemInfoResponse | undefined;
  deviceRtspConnected?: DeviceRtspConnected | undefined;
  deviceRtspStreamReady?: DeviceRtspStreamReady | undefined;
  deviceRtspError?: DeviceRtspError | undefined;
  deviceRtspDialError?: DeviceRtspDialError | undefined;
  deviceRtspDescribeError?: DeviceRtspDescribeError | undefined;
  deviceRtspPublishError?: DeviceRtspPublishError | undefined;
  deviceRtspPacketLost?: DeviceRtspPacketLost | undefined;
  deviceRtspDecodeError?: DeviceRtspDecodeError | undefined;
  deviceRtspListenError?: DeviceRtspListenError | undefined;
  deviceRtspClientError?: DeviceRtspClientError | undefined;
  deviceRtspDisconnected?: DeviceRtspDisconnected | undefined;
  deviceRtspConnectFailed?: DeviceRtspConnectFailed | undefined;
  deviceRtspRedialError?: DeviceRtspRedialError | undefined;
  deviceMavlinkConnected?: DeviceMavlinkConnected | undefined;
  deviceMavlinkDialError?: DeviceMavlinkDialError | undefined;
  deviceWebrtcSessionStarted?: DeviceWebrtcSessionStarted | undefined;
  deviceWebrtcOffer?: DeviceWebrtcOffer | undefined;
  deviceWebrtcAnswer?: DeviceWebrtcAnswer | undefined;
  deviceWebrtcIceCandidate?: DeviceWebrtcIceCandidate | undefined;
  deviceWebrtcPeerConnected?: DeviceWebrtcPeerConnected | undefined;
  deviceWebrtcPeerDisconnected?: DeviceWebrtcPeerDisconnected | undefined;
  deviceWebrtcIceConnected?: DeviceWebrtcIceConnected | undefined;
  deviceWebrtcIceDisconnected?: DeviceWebrtcIceDisconnected | undefined;
  deviceWebrtcOfferAck?: DeviceWebrtcOfferAck | undefined;
  deviceWebrtcAnswerAck?: DeviceWebrtcAnswerAck | undefined;
  deviceWebrtcIceCandidateAck?: DeviceWebrtcIceCandidateAck | undefined;
  deviceWebrtcError?: DeviceWebrtcError | undefined;
  deviceWebrtcOfferError?: DeviceWebrtcOfferError | undefined;
  deviceWebrtcSessionStopWarning?: DeviceWebrtcSessionStopWarning | undefined;
  deviceWebrtcPeerConnecting?: DeviceWebrtcPeerConnecting | undefined;
  deviceWebrtcDataChannelOpen?: DeviceWebrtcDataChannelOpen | undefined;
  deviceCameraListResponse?: DeviceCameraListResponse | undefined;
  deviceCameraListError?: DeviceCameraListError | undefined;
  deviceCameraAddSuccess?: DeviceCameraAddSuccess | undefined;
  deviceCameraAddError?: DeviceCameraAddError | undefined;
  deviceCameraUpdateSuccess?: DeviceCameraUpdateSuccess | undefined;
  deviceCameraUpdateError?: DeviceCameraUpdateError | undefined;
  deviceCameraRemoveSuccess?: DeviceCameraRemoveSuccess | undefined;
  deviceCameraRemoveError?: DeviceCameraRemoveError | undefined;
  deviceCameraSwitchSuccess?: DeviceCameraSwitchSuccess | undefined;
  deviceCameraSwitchError?: DeviceCameraSwitchError | undefined;
  deviceCameraSelectedResponse?: DeviceCameraSelectedResponse | undefined;
  deviceCameraSelectedError?: DeviceCameraSelectedError | undefined;
  deviceNetworkInterfacesResponse?: DeviceNetworkInterfacesResponse | undefined;
  deviceStatusResponse?:
    | DeviceStatusResponse
    | undefined;
  /** API events */
  apiDeviceConnected?: ApiDeviceConnected | undefined;
  apiDeviceDisconnected?:
    | ApiDeviceDisconnected
    | undefined;
  /** Client requests */
  clientRtspDial?: ClientRtspDial | undefined;
  clientNetworkInterfacesRequest?: ClientNetworkInterfacesRequest | undefined;
  clientCameraListRequest?: ClientCameraListRequest | undefined;
  clientCameraAdd?: ClientCameraAdd | undefined;
  clientCameraUpdate?: ClientCameraUpdate | undefined;
  clientCameraRemove?: ClientCameraRemove | undefined;
  clientCameraSwitch?: ClientCameraSwitch | undefined;
  clientCameraSelectedRequest?: ClientCameraSelectedRequest | undefined;
  clientWebrtcSessionStart?: ClientWebrtcSessionStart | undefined;
  clientWebrtcOffer?: ClientWebrtcOffer | undefined;
  clientWebrtcAnswer?: ClientWebrtcAnswer | undefined;
  clientWebrtcIceCandidate?: ClientWebrtcIceCandidate | undefined;
  clientDeviceReboot?: ClientDeviceReboot | undefined;
  clientStatusRequest?: ClientStatusRequest | undefined;
  clientModemInfoRequest?:
    | ClientModemInfoRequest
    | undefined;
  /** Generic error message */
  error?: Error | undefined;
}

/** Device modem messages */
export interface DeviceModemConnected {
  status: string;
}

export interface DeviceModemInfo {
  event: Event | undefined;
  signalQuality: SignalQuality | undefined;
}

export interface DeviceModemSignalQuality {
  event: Event | undefined;
  signalQuality: SignalQuality | undefined;
}

export interface DeviceModemConnectionError {
  error: string;
}

export interface DeviceModemInfoResponse {
  status: string;
  model: string;
  manufacturer: string;
  imei: string;
  signalQuality: SignalQuality | undefined;
}

/** Device RTSP messages */
export interface DeviceRtspConnected {
  status: string;
}

export interface DeviceRtspStreamReady {
  status: string;
}

export interface DeviceRtspError {
  error: string;
}

export interface DeviceRtspDialError {
  error: string;
}

export interface DeviceRtspDescribeError {
  error: string;
}

export interface DeviceRtspPublishError {
  error: string;
}

export interface DeviceRtspPacketLost {
  details: string;
}

export interface DeviceRtspDecodeError {
  error: string;
}

export interface DeviceRtspListenError {
  error: string;
}

export interface DeviceRtspClientError {
  error: string;
}

export interface DeviceRtspDisconnected {
  reason: string;
}

export interface DeviceRtspConnectFailed {
  error: string;
}

export interface DeviceRtspRedialError {
  error: string;
}

/** Device Mavlink messages */
export interface DeviceMavlinkConnected {
  status: string;
}

export interface DeviceMavlinkDialError {
  error: string;
}

/** Device WebRTC messages */
export interface DeviceWebrtcSessionStarted {
}

export interface DeviceWebrtcOffer {
  sdp: string;
}

export interface DeviceWebrtcAnswer {
  sdp: string;
}

export interface DeviceWebrtcIceCandidate {
  candidate: string;
  sdpMid: string;
  sdpMLineIndex: number;
  usernameFragment: string;
}

/** Empty message, just an acknowledgment */
export interface DeviceWebrtcPeerConnected {
}

export interface DeviceWebrtcPeerDisconnected {
  reason: string;
}

/** Empty message, just an acknowledgment */
export interface DeviceWebrtcIceConnected {
}

export interface DeviceWebrtcIceDisconnected {
  reason: string;
}

/** Empty message, just an acknowledgment */
export interface DeviceWebrtcOfferAck {
}

/** Empty message, just an acknowledgment */
export interface DeviceWebrtcAnswerAck {
}

/** Empty message, just an acknowledgment */
export interface DeviceWebrtcIceCandidateAck {
}

export interface DeviceWebrtcError {
  error: string;
}

export interface DeviceWebrtcOfferError {
  error: string;
}

export interface DeviceWebrtcSessionStopWarning {
  reason: string;
}

export interface DeviceWebrtcPeerConnecting {
  status: string;
}

export interface DeviceWebrtcDataChannelOpen {
  channelId: string;
}

/** Device Camera messages */
export interface DeviceCameraListResponse {
  cameras: Camera[];
}

export interface DeviceCameraListError {
  error: string;
}

export interface DeviceCameraAddSuccess {
  camera: Camera | undefined;
}

export interface DeviceCameraAddError {
  error: string;
}

export interface DeviceCameraUpdateSuccess {
  camera: Camera | undefined;
}

export interface DeviceCameraUpdateError {
  error: string;
}

export interface DeviceCameraRemoveSuccess {
  cameraId: string;
}

export interface DeviceCameraRemoveError {
  error: string;
}

export interface DeviceCameraSwitchSuccess {
  cameraId: string;
}

export interface DeviceCameraSwitchError {
  error: string;
}

export interface DeviceCameraSelectedResponse {
  camera: Camera | undefined;
}

export interface DeviceCameraSelectedError {
  error: string;
}

/** Device other responses */
export interface DeviceNetworkInterfacesResponse {
  interfaces: InterfaceInfo[];
}

export interface DeviceStatusResponse {
  status: ServiceStatus | undefined;
}

/** API messages */
export interface ApiDeviceConnected {
  deviceId: string;
}

export interface ApiDeviceDisconnected {
  deviceId: string;
  reason: string;
}

/** Client requests */
export interface ClientRtspDial {
  url: string;
}

/** Empty message, just a request */
export interface ClientNetworkInterfacesRequest {
}

/** Empty message, just a request */
export interface ClientCameraListRequest {
}

export interface ClientCameraAdd {
  name: string;
  rtspUrl: string;
  networkInterface: string;
}

export interface ClientCameraUpdate {
  camera: Camera | undefined;
}

export interface ClientCameraRemove {
  cameraId: string;
}

export interface ClientCameraSwitch {
  cameraId: string;
}

/** Empty message, just a request */
export interface ClientCameraSelectedRequest {
}

/** Empty message, just a request */
export interface ClientWebrtcSessionStart {
}

export interface ClientWebrtcOffer {
  sdp: string;
}

export interface ClientWebrtcAnswer {
  sdp: string;
}

export interface ClientWebrtcIceCandidate {
  candidate: string;
  sdpMid: string;
  sdpMLineIndex: number;
  usernameFragment: string;
}

/** Empty message, just a request */
export interface ClientDeviceReboot {
}

/** Empty message, just a request */
export interface ClientStatusRequest {
}

/** Empty message, just a request */
export interface ClientModemInfoRequest {
}

/** Generic error */
export interface Error {
  code: number;
  message: string;
  details: { [key: string]: string };
}

export interface Error_DetailsEntry {
  key: string;
  value: string;
}

function createBaseMessage(): Message {
  return {
    messageId: "",
    correlationId: "",
    protocolVersion: "",
    timestamp: 0,
    deviceModemConnected: undefined,
    deviceModemInfo: undefined,
    deviceModemSignalQuality: undefined,
    deviceModemConnectionError: undefined,
    deviceModemInfoResponse: undefined,
    deviceRtspConnected: undefined,
    deviceRtspStreamReady: undefined,
    deviceRtspError: undefined,
    deviceRtspDialError: undefined,
    deviceRtspDescribeError: undefined,
    deviceRtspPublishError: undefined,
    deviceRtspPacketLost: undefined,
    deviceRtspDecodeError: undefined,
    deviceRtspListenError: undefined,
    deviceRtspClientError: undefined,
    deviceRtspDisconnected: undefined,
    deviceRtspConnectFailed: undefined,
    deviceRtspRedialError: undefined,
    deviceMavlinkConnected: undefined,
    deviceMavlinkDialError: undefined,
    deviceWebrtcSessionStarted: undefined,
    deviceWebrtcOffer: undefined,
    deviceWebrtcAnswer: undefined,
    deviceWebrtcIceCandidate: undefined,
    deviceWebrtcPeerConnected: undefined,
    deviceWebrtcPeerDisconnected: undefined,
    deviceWebrtcIceConnected: undefined,
    deviceWebrtcIceDisconnected: undefined,
    deviceWebrtcOfferAck: undefined,
    deviceWebrtcAnswerAck: undefined,
    deviceWebrtcIceCandidateAck: undefined,
    deviceWebrtcError: undefined,
    deviceWebrtcOfferError: undefined,
    deviceWebrtcSessionStopWarning: undefined,
    deviceWebrtcPeerConnecting: undefined,
    deviceWebrtcDataChannelOpen: undefined,
    deviceCameraListResponse: undefined,
    deviceCameraListError: undefined,
    deviceCameraAddSuccess: undefined,
    deviceCameraAddError: undefined,
    deviceCameraUpdateSuccess: undefined,
    deviceCameraUpdateError: undefined,
    deviceCameraRemoveSuccess: undefined,
    deviceCameraRemoveError: undefined,
    deviceCameraSwitchSuccess: undefined,
    deviceCameraSwitchError: undefined,
    deviceCameraSelectedResponse: undefined,
    deviceCameraSelectedError: undefined,
    deviceNetworkInterfacesResponse: undefined,
    deviceStatusResponse: undefined,
    apiDeviceConnected: undefined,
    apiDeviceDisconnected: undefined,
    clientRtspDial: undefined,
    clientNetworkInterfacesRequest: undefined,
    clientCameraListRequest: undefined,
    clientCameraAdd: undefined,
    clientCameraUpdate: undefined,
    clientCameraRemove: undefined,
    clientCameraSwitch: undefined,
    clientCameraSelectedRequest: undefined,
    clientWebrtcSessionStart: undefined,
    clientWebrtcOffer: undefined,
    clientWebrtcAnswer: undefined,
    clientWebrtcIceCandidate: undefined,
    clientDeviceReboot: undefined,
    clientStatusRequest: undefined,
    clientModemInfoRequest: undefined,
    error: undefined,
  };
}

export const Message = {
  encode(message: Message, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.messageId !== "") {
      writer.uint32(10).string(message.messageId);
    }
    if (message.correlationId !== "") {
      writer.uint32(18).string(message.correlationId);
    }
    if (message.protocolVersion !== "") {
      writer.uint32(26).string(message.protocolVersion);
    }
    if (message.timestamp !== 0) {
      writer.uint32(32).int64(message.timestamp);
    }
    if (message.deviceModemConnected !== undefined) {
      DeviceModemConnected.encode(message.deviceModemConnected, writer.uint32(82).fork()).ldelim();
    }
    if (message.deviceModemInfo !== undefined) {
      DeviceModemInfo.encode(message.deviceModemInfo, writer.uint32(90).fork()).ldelim();
    }
    if (message.deviceModemSignalQuality !== undefined) {
      DeviceModemSignalQuality.encode(message.deviceModemSignalQuality, writer.uint32(98).fork()).ldelim();
    }
    if (message.deviceModemConnectionError !== undefined) {
      DeviceModemConnectionError.encode(message.deviceModemConnectionError, writer.uint32(106).fork()).ldelim();
    }
    if (message.deviceModemInfoResponse !== undefined) {
      DeviceModemInfoResponse.encode(message.deviceModemInfoResponse, writer.uint32(114).fork()).ldelim();
    }
    if (message.deviceRtspConnected !== undefined) {
      DeviceRtspConnected.encode(message.deviceRtspConnected, writer.uint32(162).fork()).ldelim();
    }
    if (message.deviceRtspStreamReady !== undefined) {
      DeviceRtspStreamReady.encode(message.deviceRtspStreamReady, writer.uint32(170).fork()).ldelim();
    }
    if (message.deviceRtspError !== undefined) {
      DeviceRtspError.encode(message.deviceRtspError, writer.uint32(178).fork()).ldelim();
    }
    if (message.deviceRtspDialError !== undefined) {
      DeviceRtspDialError.encode(message.deviceRtspDialError, writer.uint32(186).fork()).ldelim();
    }
    if (message.deviceRtspDescribeError !== undefined) {
      DeviceRtspDescribeError.encode(message.deviceRtspDescribeError, writer.uint32(194).fork()).ldelim();
    }
    if (message.deviceRtspPublishError !== undefined) {
      DeviceRtspPublishError.encode(message.deviceRtspPublishError, writer.uint32(202).fork()).ldelim();
    }
    if (message.deviceRtspPacketLost !== undefined) {
      DeviceRtspPacketLost.encode(message.deviceRtspPacketLost, writer.uint32(210).fork()).ldelim();
    }
    if (message.deviceRtspDecodeError !== undefined) {
      DeviceRtspDecodeError.encode(message.deviceRtspDecodeError, writer.uint32(218).fork()).ldelim();
    }
    if (message.deviceRtspListenError !== undefined) {
      DeviceRtspListenError.encode(message.deviceRtspListenError, writer.uint32(226).fork()).ldelim();
    }
    if (message.deviceRtspClientError !== undefined) {
      DeviceRtspClientError.encode(message.deviceRtspClientError, writer.uint32(234).fork()).ldelim();
    }
    if (message.deviceRtspDisconnected !== undefined) {
      DeviceRtspDisconnected.encode(message.deviceRtspDisconnected, writer.uint32(242).fork()).ldelim();
    }
    if (message.deviceRtspConnectFailed !== undefined) {
      DeviceRtspConnectFailed.encode(message.deviceRtspConnectFailed, writer.uint32(250).fork()).ldelim();
    }
    if (message.deviceRtspRedialError !== undefined) {
      DeviceRtspRedialError.encode(message.deviceRtspRedialError, writer.uint32(258).fork()).ldelim();
    }
    if (message.deviceMavlinkConnected !== undefined) {
      DeviceMavlinkConnected.encode(message.deviceMavlinkConnected, writer.uint32(322).fork()).ldelim();
    }
    if (message.deviceMavlinkDialError !== undefined) {
      DeviceMavlinkDialError.encode(message.deviceMavlinkDialError, writer.uint32(330).fork()).ldelim();
    }
    if (message.deviceWebrtcSessionStarted !== undefined) {
      DeviceWebrtcSessionStarted.encode(message.deviceWebrtcSessionStarted, writer.uint32(402).fork()).ldelim();
    }
    if (message.deviceWebrtcOffer !== undefined) {
      DeviceWebrtcOffer.encode(message.deviceWebrtcOffer, writer.uint32(410).fork()).ldelim();
    }
    if (message.deviceWebrtcAnswer !== undefined) {
      DeviceWebrtcAnswer.encode(message.deviceWebrtcAnswer, writer.uint32(418).fork()).ldelim();
    }
    if (message.deviceWebrtcIceCandidate !== undefined) {
      DeviceWebrtcIceCandidate.encode(message.deviceWebrtcIceCandidate, writer.uint32(426).fork()).ldelim();
    }
    if (message.deviceWebrtcPeerConnected !== undefined) {
      DeviceWebrtcPeerConnected.encode(message.deviceWebrtcPeerConnected, writer.uint32(434).fork()).ldelim();
    }
    if (message.deviceWebrtcPeerDisconnected !== undefined) {
      DeviceWebrtcPeerDisconnected.encode(message.deviceWebrtcPeerDisconnected, writer.uint32(442).fork()).ldelim();
    }
    if (message.deviceWebrtcIceConnected !== undefined) {
      DeviceWebrtcIceConnected.encode(message.deviceWebrtcIceConnected, writer.uint32(450).fork()).ldelim();
    }
    if (message.deviceWebrtcIceDisconnected !== undefined) {
      DeviceWebrtcIceDisconnected.encode(message.deviceWebrtcIceDisconnected, writer.uint32(458).fork()).ldelim();
    }
    if (message.deviceWebrtcOfferAck !== undefined) {
      DeviceWebrtcOfferAck.encode(message.deviceWebrtcOfferAck, writer.uint32(466).fork()).ldelim();
    }
    if (message.deviceWebrtcAnswerAck !== undefined) {
      DeviceWebrtcAnswerAck.encode(message.deviceWebrtcAnswerAck, writer.uint32(474).fork()).ldelim();
    }
    if (message.deviceWebrtcIceCandidateAck !== undefined) {
      DeviceWebrtcIceCandidateAck.encode(message.deviceWebrtcIceCandidateAck, writer.uint32(482).fork()).ldelim();
    }
    if (message.deviceWebrtcError !== undefined) {
      DeviceWebrtcError.encode(message.deviceWebrtcError, writer.uint32(490).fork()).ldelim();
    }
    if (message.deviceWebrtcOfferError !== undefined) {
      DeviceWebrtcOfferError.encode(message.deviceWebrtcOfferError, writer.uint32(498).fork()).ldelim();
    }
    if (message.deviceWebrtcSessionStopWarning !== undefined) {
      DeviceWebrtcSessionStopWarning.encode(message.deviceWebrtcSessionStopWarning, writer.uint32(506).fork()).ldelim();
    }
    if (message.deviceWebrtcPeerConnecting !== undefined) {
      DeviceWebrtcPeerConnecting.encode(message.deviceWebrtcPeerConnecting, writer.uint32(514).fork()).ldelim();
    }
    if (message.deviceWebrtcDataChannelOpen !== undefined) {
      DeviceWebrtcDataChannelOpen.encode(message.deviceWebrtcDataChannelOpen, writer.uint32(522).fork()).ldelim();
    }
    if (message.deviceCameraListResponse !== undefined) {
      DeviceCameraListResponse.encode(message.deviceCameraListResponse, writer.uint32(562).fork()).ldelim();
    }
    if (message.deviceCameraListError !== undefined) {
      DeviceCameraListError.encode(message.deviceCameraListError, writer.uint32(570).fork()).ldelim();
    }
    if (message.deviceCameraAddSuccess !== undefined) {
      DeviceCameraAddSuccess.encode(message.deviceCameraAddSuccess, writer.uint32(578).fork()).ldelim();
    }
    if (message.deviceCameraAddError !== undefined) {
      DeviceCameraAddError.encode(message.deviceCameraAddError, writer.uint32(586).fork()).ldelim();
    }
    if (message.deviceCameraUpdateSuccess !== undefined) {
      DeviceCameraUpdateSuccess.encode(message.deviceCameraUpdateSuccess, writer.uint32(594).fork()).ldelim();
    }
    if (message.deviceCameraUpdateError !== undefined) {
      DeviceCameraUpdateError.encode(message.deviceCameraUpdateError, writer.uint32(602).fork()).ldelim();
    }
    if (message.deviceCameraRemoveSuccess !== undefined) {
      DeviceCameraRemoveSuccess.encode(message.deviceCameraRemoveSuccess, writer.uint32(610).fork()).ldelim();
    }
    if (message.deviceCameraRemoveError !== undefined) {
      DeviceCameraRemoveError.encode(message.deviceCameraRemoveError, writer.uint32(618).fork()).ldelim();
    }
    if (message.deviceCameraSwitchSuccess !== undefined) {
      DeviceCameraSwitchSuccess.encode(message.deviceCameraSwitchSuccess, writer.uint32(626).fork()).ldelim();
    }
    if (message.deviceCameraSwitchError !== undefined) {
      DeviceCameraSwitchError.encode(message.deviceCameraSwitchError, writer.uint32(634).fork()).ldelim();
    }
    if (message.deviceCameraSelectedResponse !== undefined) {
      DeviceCameraSelectedResponse.encode(message.deviceCameraSelectedResponse, writer.uint32(642).fork()).ldelim();
    }
    if (message.deviceCameraSelectedError !== undefined) {
      DeviceCameraSelectedError.encode(message.deviceCameraSelectedError, writer.uint32(650).fork()).ldelim();
    }
    if (message.deviceNetworkInterfacesResponse !== undefined) {
      DeviceNetworkInterfacesResponse.encode(message.deviceNetworkInterfacesResponse, writer.uint32(722).fork())
        .ldelim();
    }
    if (message.deviceStatusResponse !== undefined) {
      DeviceStatusResponse.encode(message.deviceStatusResponse, writer.uint32(730).fork()).ldelim();
    }
    if (message.apiDeviceConnected !== undefined) {
      ApiDeviceConnected.encode(message.apiDeviceConnected, writer.uint32(802).fork()).ldelim();
    }
    if (message.apiDeviceDisconnected !== undefined) {
      ApiDeviceDisconnected.encode(message.apiDeviceDisconnected, writer.uint32(810).fork()).ldelim();
    }
    if (message.clientRtspDial !== undefined) {
      ClientRtspDial.encode(message.clientRtspDial, writer.uint32(1602).fork()).ldelim();
    }
    if (message.clientNetworkInterfacesRequest !== undefined) {
      ClientNetworkInterfacesRequest.encode(message.clientNetworkInterfacesRequest, writer.uint32(1610).fork())
        .ldelim();
    }
    if (message.clientCameraListRequest !== undefined) {
      ClientCameraListRequest.encode(message.clientCameraListRequest, writer.uint32(1618).fork()).ldelim();
    }
    if (message.clientCameraAdd !== undefined) {
      ClientCameraAdd.encode(message.clientCameraAdd, writer.uint32(1626).fork()).ldelim();
    }
    if (message.clientCameraUpdate !== undefined) {
      ClientCameraUpdate.encode(message.clientCameraUpdate, writer.uint32(1634).fork()).ldelim();
    }
    if (message.clientCameraRemove !== undefined) {
      ClientCameraRemove.encode(message.clientCameraRemove, writer.uint32(1642).fork()).ldelim();
    }
    if (message.clientCameraSwitch !== undefined) {
      ClientCameraSwitch.encode(message.clientCameraSwitch, writer.uint32(1650).fork()).ldelim();
    }
    if (message.clientCameraSelectedRequest !== undefined) {
      ClientCameraSelectedRequest.encode(message.clientCameraSelectedRequest, writer.uint32(1658).fork()).ldelim();
    }
    if (message.clientWebrtcSessionStart !== undefined) {
      ClientWebrtcSessionStart.encode(message.clientWebrtcSessionStart, writer.uint32(1666).fork()).ldelim();
    }
    if (message.clientWebrtcOffer !== undefined) {
      ClientWebrtcOffer.encode(message.clientWebrtcOffer, writer.uint32(1674).fork()).ldelim();
    }
    if (message.clientWebrtcAnswer !== undefined) {
      ClientWebrtcAnswer.encode(message.clientWebrtcAnswer, writer.uint32(1682).fork()).ldelim();
    }
    if (message.clientWebrtcIceCandidate !== undefined) {
      ClientWebrtcIceCandidate.encode(message.clientWebrtcIceCandidate, writer.uint32(1690).fork()).ldelim();
    }
    if (message.clientDeviceReboot !== undefined) {
      ClientDeviceReboot.encode(message.clientDeviceReboot, writer.uint32(1698).fork()).ldelim();
    }
    if (message.clientStatusRequest !== undefined) {
      ClientStatusRequest.encode(message.clientStatusRequest, writer.uint32(1706).fork()).ldelim();
    }
    if (message.clientModemInfoRequest !== undefined) {
      ClientModemInfoRequest.encode(message.clientModemInfoRequest, writer.uint32(1714).fork()).ldelim();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(7994).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Message {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.messageId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.correlationId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.protocolVersion = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.timestamp = longToNumber(reader.int64() as Long);
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.deviceModemConnected = DeviceModemConnected.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.deviceModemInfo = DeviceModemInfo.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.deviceModemSignalQuality = DeviceModemSignalQuality.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.deviceModemConnectionError = DeviceModemConnectionError.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.deviceModemInfoResponse = DeviceModemInfoResponse.decode(reader, reader.uint32());
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.deviceRtspConnected = DeviceRtspConnected.decode(reader, reader.uint32());
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.deviceRtspStreamReady = DeviceRtspStreamReady.decode(reader, reader.uint32());
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.deviceRtspError = DeviceRtspError.decode(reader, reader.uint32());
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.deviceRtspDialError = DeviceRtspDialError.decode(reader, reader.uint32());
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.deviceRtspDescribeError = DeviceRtspDescribeError.decode(reader, reader.uint32());
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.deviceRtspPublishError = DeviceRtspPublishError.decode(reader, reader.uint32());
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.deviceRtspPacketLost = DeviceRtspPacketLost.decode(reader, reader.uint32());
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.deviceRtspDecodeError = DeviceRtspDecodeError.decode(reader, reader.uint32());
          continue;
        case 28:
          if (tag !== 226) {
            break;
          }

          message.deviceRtspListenError = DeviceRtspListenError.decode(reader, reader.uint32());
          continue;
        case 29:
          if (tag !== 234) {
            break;
          }

          message.deviceRtspClientError = DeviceRtspClientError.decode(reader, reader.uint32());
          continue;
        case 30:
          if (tag !== 242) {
            break;
          }

          message.deviceRtspDisconnected = DeviceRtspDisconnected.decode(reader, reader.uint32());
          continue;
        case 31:
          if (tag !== 250) {
            break;
          }

          message.deviceRtspConnectFailed = DeviceRtspConnectFailed.decode(reader, reader.uint32());
          continue;
        case 32:
          if (tag !== 258) {
            break;
          }

          message.deviceRtspRedialError = DeviceRtspRedialError.decode(reader, reader.uint32());
          continue;
        case 40:
          if (tag !== 322) {
            break;
          }

          message.deviceMavlinkConnected = DeviceMavlinkConnected.decode(reader, reader.uint32());
          continue;
        case 41:
          if (tag !== 330) {
            break;
          }

          message.deviceMavlinkDialError = DeviceMavlinkDialError.decode(reader, reader.uint32());
          continue;
        case 50:
          if (tag !== 402) {
            break;
          }

          message.deviceWebrtcSessionStarted = DeviceWebrtcSessionStarted.decode(reader, reader.uint32());
          continue;
        case 51:
          if (tag !== 410) {
            break;
          }

          message.deviceWebrtcOffer = DeviceWebrtcOffer.decode(reader, reader.uint32());
          continue;
        case 52:
          if (tag !== 418) {
            break;
          }

          message.deviceWebrtcAnswer = DeviceWebrtcAnswer.decode(reader, reader.uint32());
          continue;
        case 53:
          if (tag !== 426) {
            break;
          }

          message.deviceWebrtcIceCandidate = DeviceWebrtcIceCandidate.decode(reader, reader.uint32());
          continue;
        case 54:
          if (tag !== 434) {
            break;
          }

          message.deviceWebrtcPeerConnected = DeviceWebrtcPeerConnected.decode(reader, reader.uint32());
          continue;
        case 55:
          if (tag !== 442) {
            break;
          }

          message.deviceWebrtcPeerDisconnected = DeviceWebrtcPeerDisconnected.decode(reader, reader.uint32());
          continue;
        case 56:
          if (tag !== 450) {
            break;
          }

          message.deviceWebrtcIceConnected = DeviceWebrtcIceConnected.decode(reader, reader.uint32());
          continue;
        case 57:
          if (tag !== 458) {
            break;
          }

          message.deviceWebrtcIceDisconnected = DeviceWebrtcIceDisconnected.decode(reader, reader.uint32());
          continue;
        case 58:
          if (tag !== 466) {
            break;
          }

          message.deviceWebrtcOfferAck = DeviceWebrtcOfferAck.decode(reader, reader.uint32());
          continue;
        case 59:
          if (tag !== 474) {
            break;
          }

          message.deviceWebrtcAnswerAck = DeviceWebrtcAnswerAck.decode(reader, reader.uint32());
          continue;
        case 60:
          if (tag !== 482) {
            break;
          }

          message.deviceWebrtcIceCandidateAck = DeviceWebrtcIceCandidateAck.decode(reader, reader.uint32());
          continue;
        case 61:
          if (tag !== 490) {
            break;
          }

          message.deviceWebrtcError = DeviceWebrtcError.decode(reader, reader.uint32());
          continue;
        case 62:
          if (tag !== 498) {
            break;
          }

          message.deviceWebrtcOfferError = DeviceWebrtcOfferError.decode(reader, reader.uint32());
          continue;
        case 63:
          if (tag !== 506) {
            break;
          }

          message.deviceWebrtcSessionStopWarning = DeviceWebrtcSessionStopWarning.decode(reader, reader.uint32());
          continue;
        case 64:
          if (tag !== 514) {
            break;
          }

          message.deviceWebrtcPeerConnecting = DeviceWebrtcPeerConnecting.decode(reader, reader.uint32());
          continue;
        case 65:
          if (tag !== 522) {
            break;
          }

          message.deviceWebrtcDataChannelOpen = DeviceWebrtcDataChannelOpen.decode(reader, reader.uint32());
          continue;
        case 70:
          if (tag !== 562) {
            break;
          }

          message.deviceCameraListResponse = DeviceCameraListResponse.decode(reader, reader.uint32());
          continue;
        case 71:
          if (tag !== 570) {
            break;
          }

          message.deviceCameraListError = DeviceCameraListError.decode(reader, reader.uint32());
          continue;
        case 72:
          if (tag !== 578) {
            break;
          }

          message.deviceCameraAddSuccess = DeviceCameraAddSuccess.decode(reader, reader.uint32());
          continue;
        case 73:
          if (tag !== 586) {
            break;
          }

          message.deviceCameraAddError = DeviceCameraAddError.decode(reader, reader.uint32());
          continue;
        case 74:
          if (tag !== 594) {
            break;
          }

          message.deviceCameraUpdateSuccess = DeviceCameraUpdateSuccess.decode(reader, reader.uint32());
          continue;
        case 75:
          if (tag !== 602) {
            break;
          }

          message.deviceCameraUpdateError = DeviceCameraUpdateError.decode(reader, reader.uint32());
          continue;
        case 76:
          if (tag !== 610) {
            break;
          }

          message.deviceCameraRemoveSuccess = DeviceCameraRemoveSuccess.decode(reader, reader.uint32());
          continue;
        case 77:
          if (tag !== 618) {
            break;
          }

          message.deviceCameraRemoveError = DeviceCameraRemoveError.decode(reader, reader.uint32());
          continue;
        case 78:
          if (tag !== 626) {
            break;
          }

          message.deviceCameraSwitchSuccess = DeviceCameraSwitchSuccess.decode(reader, reader.uint32());
          continue;
        case 79:
          if (tag !== 634) {
            break;
          }

          message.deviceCameraSwitchError = DeviceCameraSwitchError.decode(reader, reader.uint32());
          continue;
        case 80:
          if (tag !== 642) {
            break;
          }

          message.deviceCameraSelectedResponse = DeviceCameraSelectedResponse.decode(reader, reader.uint32());
          continue;
        case 81:
          if (tag !== 650) {
            break;
          }

          message.deviceCameraSelectedError = DeviceCameraSelectedError.decode(reader, reader.uint32());
          continue;
        case 90:
          if (tag !== 722) {
            break;
          }

          message.deviceNetworkInterfacesResponse = DeviceNetworkInterfacesResponse.decode(reader, reader.uint32());
          continue;
        case 91:
          if (tag !== 730) {
            break;
          }

          message.deviceStatusResponse = DeviceStatusResponse.decode(reader, reader.uint32());
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.apiDeviceConnected = ApiDeviceConnected.decode(reader, reader.uint32());
          continue;
        case 101:
          if (tag !== 810) {
            break;
          }

          message.apiDeviceDisconnected = ApiDeviceDisconnected.decode(reader, reader.uint32());
          continue;
        case 200:
          if (tag !== 1602) {
            break;
          }

          message.clientRtspDial = ClientRtspDial.decode(reader, reader.uint32());
          continue;
        case 201:
          if (tag !== 1610) {
            break;
          }

          message.clientNetworkInterfacesRequest = ClientNetworkInterfacesRequest.decode(reader, reader.uint32());
          continue;
        case 202:
          if (tag !== 1618) {
            break;
          }

          message.clientCameraListRequest = ClientCameraListRequest.decode(reader, reader.uint32());
          continue;
        case 203:
          if (tag !== 1626) {
            break;
          }

          message.clientCameraAdd = ClientCameraAdd.decode(reader, reader.uint32());
          continue;
        case 204:
          if (tag !== 1634) {
            break;
          }

          message.clientCameraUpdate = ClientCameraUpdate.decode(reader, reader.uint32());
          continue;
        case 205:
          if (tag !== 1642) {
            break;
          }

          message.clientCameraRemove = ClientCameraRemove.decode(reader, reader.uint32());
          continue;
        case 206:
          if (tag !== 1650) {
            break;
          }

          message.clientCameraSwitch = ClientCameraSwitch.decode(reader, reader.uint32());
          continue;
        case 207:
          if (tag !== 1658) {
            break;
          }

          message.clientCameraSelectedRequest = ClientCameraSelectedRequest.decode(reader, reader.uint32());
          continue;
        case 208:
          if (tag !== 1666) {
            break;
          }

          message.clientWebrtcSessionStart = ClientWebrtcSessionStart.decode(reader, reader.uint32());
          continue;
        case 209:
          if (tag !== 1674) {
            break;
          }

          message.clientWebrtcOffer = ClientWebrtcOffer.decode(reader, reader.uint32());
          continue;
        case 210:
          if (tag !== 1682) {
            break;
          }

          message.clientWebrtcAnswer = ClientWebrtcAnswer.decode(reader, reader.uint32());
          continue;
        case 211:
          if (tag !== 1690) {
            break;
          }

          message.clientWebrtcIceCandidate = ClientWebrtcIceCandidate.decode(reader, reader.uint32());
          continue;
        case 212:
          if (tag !== 1698) {
            break;
          }

          message.clientDeviceReboot = ClientDeviceReboot.decode(reader, reader.uint32());
          continue;
        case 213:
          if (tag !== 1706) {
            break;
          }

          message.clientStatusRequest = ClientStatusRequest.decode(reader, reader.uint32());
          continue;
        case 214:
          if (tag !== 1714) {
            break;
          }

          message.clientModemInfoRequest = ClientModemInfoRequest.decode(reader, reader.uint32());
          continue;
        case 999:
          if (tag !== 7994) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message {
    return {
      messageId: isSet(object.messageId) ? globalThis.String(object.messageId) : "",
      correlationId: isSet(object.correlationId) ? globalThis.String(object.correlationId) : "",
      protocolVersion: isSet(object.protocolVersion) ? globalThis.String(object.protocolVersion) : "",
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      deviceModemConnected: isSet(object.deviceModemConnected)
        ? DeviceModemConnected.fromJSON(object.deviceModemConnected)
        : undefined,
      deviceModemInfo: isSet(object.deviceModemInfo) ? DeviceModemInfo.fromJSON(object.deviceModemInfo) : undefined,
      deviceModemSignalQuality: isSet(object.deviceModemSignalQuality)
        ? DeviceModemSignalQuality.fromJSON(object.deviceModemSignalQuality)
        : undefined,
      deviceModemConnectionError: isSet(object.deviceModemConnectionError)
        ? DeviceModemConnectionError.fromJSON(object.deviceModemConnectionError)
        : undefined,
      deviceModemInfoResponse: isSet(object.deviceModemInfoResponse)
        ? DeviceModemInfoResponse.fromJSON(object.deviceModemInfoResponse)
        : undefined,
      deviceRtspConnected: isSet(object.deviceRtspConnected)
        ? DeviceRtspConnected.fromJSON(object.deviceRtspConnected)
        : undefined,
      deviceRtspStreamReady: isSet(object.deviceRtspStreamReady)
        ? DeviceRtspStreamReady.fromJSON(object.deviceRtspStreamReady)
        : undefined,
      deviceRtspError: isSet(object.deviceRtspError) ? DeviceRtspError.fromJSON(object.deviceRtspError) : undefined,
      deviceRtspDialError: isSet(object.deviceRtspDialError)
        ? DeviceRtspDialError.fromJSON(object.deviceRtspDialError)
        : undefined,
      deviceRtspDescribeError: isSet(object.deviceRtspDescribeError)
        ? DeviceRtspDescribeError.fromJSON(object.deviceRtspDescribeError)
        : undefined,
      deviceRtspPublishError: isSet(object.deviceRtspPublishError)
        ? DeviceRtspPublishError.fromJSON(object.deviceRtspPublishError)
        : undefined,
      deviceRtspPacketLost: isSet(object.deviceRtspPacketLost)
        ? DeviceRtspPacketLost.fromJSON(object.deviceRtspPacketLost)
        : undefined,
      deviceRtspDecodeError: isSet(object.deviceRtspDecodeError)
        ? DeviceRtspDecodeError.fromJSON(object.deviceRtspDecodeError)
        : undefined,
      deviceRtspListenError: isSet(object.deviceRtspListenError)
        ? DeviceRtspListenError.fromJSON(object.deviceRtspListenError)
        : undefined,
      deviceRtspClientError: isSet(object.deviceRtspClientError)
        ? DeviceRtspClientError.fromJSON(object.deviceRtspClientError)
        : undefined,
      deviceRtspDisconnected: isSet(object.deviceRtspDisconnected)
        ? DeviceRtspDisconnected.fromJSON(object.deviceRtspDisconnected)
        : undefined,
      deviceRtspConnectFailed: isSet(object.deviceRtspConnectFailed)
        ? DeviceRtspConnectFailed.fromJSON(object.deviceRtspConnectFailed)
        : undefined,
      deviceRtspRedialError: isSet(object.deviceRtspRedialError)
        ? DeviceRtspRedialError.fromJSON(object.deviceRtspRedialError)
        : undefined,
      deviceMavlinkConnected: isSet(object.deviceMavlinkConnected)
        ? DeviceMavlinkConnected.fromJSON(object.deviceMavlinkConnected)
        : undefined,
      deviceMavlinkDialError: isSet(object.deviceMavlinkDialError)
        ? DeviceMavlinkDialError.fromJSON(object.deviceMavlinkDialError)
        : undefined,
      deviceWebrtcSessionStarted: isSet(object.deviceWebrtcSessionStarted)
        ? DeviceWebrtcSessionStarted.fromJSON(object.deviceWebrtcSessionStarted)
        : undefined,
      deviceWebrtcOffer: isSet(object.deviceWebrtcOffer)
        ? DeviceWebrtcOffer.fromJSON(object.deviceWebrtcOffer)
        : undefined,
      deviceWebrtcAnswer: isSet(object.deviceWebrtcAnswer)
        ? DeviceWebrtcAnswer.fromJSON(object.deviceWebrtcAnswer)
        : undefined,
      deviceWebrtcIceCandidate: isSet(object.deviceWebrtcIceCandidate)
        ? DeviceWebrtcIceCandidate.fromJSON(object.deviceWebrtcIceCandidate)
        : undefined,
      deviceWebrtcPeerConnected: isSet(object.deviceWebrtcPeerConnected)
        ? DeviceWebrtcPeerConnected.fromJSON(object.deviceWebrtcPeerConnected)
        : undefined,
      deviceWebrtcPeerDisconnected: isSet(object.deviceWebrtcPeerDisconnected)
        ? DeviceWebrtcPeerDisconnected.fromJSON(object.deviceWebrtcPeerDisconnected)
        : undefined,
      deviceWebrtcIceConnected: isSet(object.deviceWebrtcIceConnected)
        ? DeviceWebrtcIceConnected.fromJSON(object.deviceWebrtcIceConnected)
        : undefined,
      deviceWebrtcIceDisconnected: isSet(object.deviceWebrtcIceDisconnected)
        ? DeviceWebrtcIceDisconnected.fromJSON(object.deviceWebrtcIceDisconnected)
        : undefined,
      deviceWebrtcOfferAck: isSet(object.deviceWebrtcOfferAck)
        ? DeviceWebrtcOfferAck.fromJSON(object.deviceWebrtcOfferAck)
        : undefined,
      deviceWebrtcAnswerAck: isSet(object.deviceWebrtcAnswerAck)
        ? DeviceWebrtcAnswerAck.fromJSON(object.deviceWebrtcAnswerAck)
        : undefined,
      deviceWebrtcIceCandidateAck: isSet(object.deviceWebrtcIceCandidateAck)
        ? DeviceWebrtcIceCandidateAck.fromJSON(object.deviceWebrtcIceCandidateAck)
        : undefined,
      deviceWebrtcError: isSet(object.deviceWebrtcError)
        ? DeviceWebrtcError.fromJSON(object.deviceWebrtcError)
        : undefined,
      deviceWebrtcOfferError: isSet(object.deviceWebrtcOfferError)
        ? DeviceWebrtcOfferError.fromJSON(object.deviceWebrtcOfferError)
        : undefined,
      deviceWebrtcSessionStopWarning: isSet(object.deviceWebrtcSessionStopWarning)
        ? DeviceWebrtcSessionStopWarning.fromJSON(object.deviceWebrtcSessionStopWarning)
        : undefined,
      deviceWebrtcPeerConnecting: isSet(object.deviceWebrtcPeerConnecting)
        ? DeviceWebrtcPeerConnecting.fromJSON(object.deviceWebrtcPeerConnecting)
        : undefined,
      deviceWebrtcDataChannelOpen: isSet(object.deviceWebrtcDataChannelOpen)
        ? DeviceWebrtcDataChannelOpen.fromJSON(object.deviceWebrtcDataChannelOpen)
        : undefined,
      deviceCameraListResponse: isSet(object.deviceCameraListResponse)
        ? DeviceCameraListResponse.fromJSON(object.deviceCameraListResponse)
        : undefined,
      deviceCameraListError: isSet(object.deviceCameraListError)
        ? DeviceCameraListError.fromJSON(object.deviceCameraListError)
        : undefined,
      deviceCameraAddSuccess: isSet(object.deviceCameraAddSuccess)
        ? DeviceCameraAddSuccess.fromJSON(object.deviceCameraAddSuccess)
        : undefined,
      deviceCameraAddError: isSet(object.deviceCameraAddError)
        ? DeviceCameraAddError.fromJSON(object.deviceCameraAddError)
        : undefined,
      deviceCameraUpdateSuccess: isSet(object.deviceCameraUpdateSuccess)
        ? DeviceCameraUpdateSuccess.fromJSON(object.deviceCameraUpdateSuccess)
        : undefined,
      deviceCameraUpdateError: isSet(object.deviceCameraUpdateError)
        ? DeviceCameraUpdateError.fromJSON(object.deviceCameraUpdateError)
        : undefined,
      deviceCameraRemoveSuccess: isSet(object.deviceCameraRemoveSuccess)
        ? DeviceCameraRemoveSuccess.fromJSON(object.deviceCameraRemoveSuccess)
        : undefined,
      deviceCameraRemoveError: isSet(object.deviceCameraRemoveError)
        ? DeviceCameraRemoveError.fromJSON(object.deviceCameraRemoveError)
        : undefined,
      deviceCameraSwitchSuccess: isSet(object.deviceCameraSwitchSuccess)
        ? DeviceCameraSwitchSuccess.fromJSON(object.deviceCameraSwitchSuccess)
        : undefined,
      deviceCameraSwitchError: isSet(object.deviceCameraSwitchError)
        ? DeviceCameraSwitchError.fromJSON(object.deviceCameraSwitchError)
        : undefined,
      deviceCameraSelectedResponse: isSet(object.deviceCameraSelectedResponse)
        ? DeviceCameraSelectedResponse.fromJSON(object.deviceCameraSelectedResponse)
        : undefined,
      deviceCameraSelectedError: isSet(object.deviceCameraSelectedError)
        ? DeviceCameraSelectedError.fromJSON(object.deviceCameraSelectedError)
        : undefined,
      deviceNetworkInterfacesResponse: isSet(object.deviceNetworkInterfacesResponse)
        ? DeviceNetworkInterfacesResponse.fromJSON(object.deviceNetworkInterfacesResponse)
        : undefined,
      deviceStatusResponse: isSet(object.deviceStatusResponse)
        ? DeviceStatusResponse.fromJSON(object.deviceStatusResponse)
        : undefined,
      apiDeviceConnected: isSet(object.apiDeviceConnected)
        ? ApiDeviceConnected.fromJSON(object.apiDeviceConnected)
        : undefined,
      apiDeviceDisconnected: isSet(object.apiDeviceDisconnected)
        ? ApiDeviceDisconnected.fromJSON(object.apiDeviceDisconnected)
        : undefined,
      clientRtspDial: isSet(object.clientRtspDial) ? ClientRtspDial.fromJSON(object.clientRtspDial) : undefined,
      clientNetworkInterfacesRequest: isSet(object.clientNetworkInterfacesRequest)
        ? ClientNetworkInterfacesRequest.fromJSON(object.clientNetworkInterfacesRequest)
        : undefined,
      clientCameraListRequest: isSet(object.clientCameraListRequest)
        ? ClientCameraListRequest.fromJSON(object.clientCameraListRequest)
        : undefined,
      clientCameraAdd: isSet(object.clientCameraAdd) ? ClientCameraAdd.fromJSON(object.clientCameraAdd) : undefined,
      clientCameraUpdate: isSet(object.clientCameraUpdate)
        ? ClientCameraUpdate.fromJSON(object.clientCameraUpdate)
        : undefined,
      clientCameraRemove: isSet(object.clientCameraRemove)
        ? ClientCameraRemove.fromJSON(object.clientCameraRemove)
        : undefined,
      clientCameraSwitch: isSet(object.clientCameraSwitch)
        ? ClientCameraSwitch.fromJSON(object.clientCameraSwitch)
        : undefined,
      clientCameraSelectedRequest: isSet(object.clientCameraSelectedRequest)
        ? ClientCameraSelectedRequest.fromJSON(object.clientCameraSelectedRequest)
        : undefined,
      clientWebrtcSessionStart: isSet(object.clientWebrtcSessionStart)
        ? ClientWebrtcSessionStart.fromJSON(object.clientWebrtcSessionStart)
        : undefined,
      clientWebrtcOffer: isSet(object.clientWebrtcOffer)
        ? ClientWebrtcOffer.fromJSON(object.clientWebrtcOffer)
        : undefined,
      clientWebrtcAnswer: isSet(object.clientWebrtcAnswer)
        ? ClientWebrtcAnswer.fromJSON(object.clientWebrtcAnswer)
        : undefined,
      clientWebrtcIceCandidate: isSet(object.clientWebrtcIceCandidate)
        ? ClientWebrtcIceCandidate.fromJSON(object.clientWebrtcIceCandidate)
        : undefined,
      clientDeviceReboot: isSet(object.clientDeviceReboot)
        ? ClientDeviceReboot.fromJSON(object.clientDeviceReboot)
        : undefined,
      clientStatusRequest: isSet(object.clientStatusRequest)
        ? ClientStatusRequest.fromJSON(object.clientStatusRequest)
        : undefined,
      clientModemInfoRequest: isSet(object.clientModemInfoRequest)
        ? ClientModemInfoRequest.fromJSON(object.clientModemInfoRequest)
        : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: Message): unknown {
    const obj: any = {};
    if (message.messageId !== "") {
      obj.messageId = message.messageId;
    }
    if (message.correlationId !== "") {
      obj.correlationId = message.correlationId;
    }
    if (message.protocolVersion !== "") {
      obj.protocolVersion = message.protocolVersion;
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.deviceModemConnected !== undefined) {
      obj.deviceModemConnected = DeviceModemConnected.toJSON(message.deviceModemConnected);
    }
    if (message.deviceModemInfo !== undefined) {
      obj.deviceModemInfo = DeviceModemInfo.toJSON(message.deviceModemInfo);
    }
    if (message.deviceModemSignalQuality !== undefined) {
      obj.deviceModemSignalQuality = DeviceModemSignalQuality.toJSON(message.deviceModemSignalQuality);
    }
    if (message.deviceModemConnectionError !== undefined) {
      obj.deviceModemConnectionError = DeviceModemConnectionError.toJSON(message.deviceModemConnectionError);
    }
    if (message.deviceModemInfoResponse !== undefined) {
      obj.deviceModemInfoResponse = DeviceModemInfoResponse.toJSON(message.deviceModemInfoResponse);
    }
    if (message.deviceRtspConnected !== undefined) {
      obj.deviceRtspConnected = DeviceRtspConnected.toJSON(message.deviceRtspConnected);
    }
    if (message.deviceRtspStreamReady !== undefined) {
      obj.deviceRtspStreamReady = DeviceRtspStreamReady.toJSON(message.deviceRtspStreamReady);
    }
    if (message.deviceRtspError !== undefined) {
      obj.deviceRtspError = DeviceRtspError.toJSON(message.deviceRtspError);
    }
    if (message.deviceRtspDialError !== undefined) {
      obj.deviceRtspDialError = DeviceRtspDialError.toJSON(message.deviceRtspDialError);
    }
    if (message.deviceRtspDescribeError !== undefined) {
      obj.deviceRtspDescribeError = DeviceRtspDescribeError.toJSON(message.deviceRtspDescribeError);
    }
    if (message.deviceRtspPublishError !== undefined) {
      obj.deviceRtspPublishError = DeviceRtspPublishError.toJSON(message.deviceRtspPublishError);
    }
    if (message.deviceRtspPacketLost !== undefined) {
      obj.deviceRtspPacketLost = DeviceRtspPacketLost.toJSON(message.deviceRtspPacketLost);
    }
    if (message.deviceRtspDecodeError !== undefined) {
      obj.deviceRtspDecodeError = DeviceRtspDecodeError.toJSON(message.deviceRtspDecodeError);
    }
    if (message.deviceRtspListenError !== undefined) {
      obj.deviceRtspListenError = DeviceRtspListenError.toJSON(message.deviceRtspListenError);
    }
    if (message.deviceRtspClientError !== undefined) {
      obj.deviceRtspClientError = DeviceRtspClientError.toJSON(message.deviceRtspClientError);
    }
    if (message.deviceRtspDisconnected !== undefined) {
      obj.deviceRtspDisconnected = DeviceRtspDisconnected.toJSON(message.deviceRtspDisconnected);
    }
    if (message.deviceRtspConnectFailed !== undefined) {
      obj.deviceRtspConnectFailed = DeviceRtspConnectFailed.toJSON(message.deviceRtspConnectFailed);
    }
    if (message.deviceRtspRedialError !== undefined) {
      obj.deviceRtspRedialError = DeviceRtspRedialError.toJSON(message.deviceRtspRedialError);
    }
    if (message.deviceMavlinkConnected !== undefined) {
      obj.deviceMavlinkConnected = DeviceMavlinkConnected.toJSON(message.deviceMavlinkConnected);
    }
    if (message.deviceMavlinkDialError !== undefined) {
      obj.deviceMavlinkDialError = DeviceMavlinkDialError.toJSON(message.deviceMavlinkDialError);
    }
    if (message.deviceWebrtcSessionStarted !== undefined) {
      obj.deviceWebrtcSessionStarted = DeviceWebrtcSessionStarted.toJSON(message.deviceWebrtcSessionStarted);
    }
    if (message.deviceWebrtcOffer !== undefined) {
      obj.deviceWebrtcOffer = DeviceWebrtcOffer.toJSON(message.deviceWebrtcOffer);
    }
    if (message.deviceWebrtcAnswer !== undefined) {
      obj.deviceWebrtcAnswer = DeviceWebrtcAnswer.toJSON(message.deviceWebrtcAnswer);
    }
    if (message.deviceWebrtcIceCandidate !== undefined) {
      obj.deviceWebrtcIceCandidate = DeviceWebrtcIceCandidate.toJSON(message.deviceWebrtcIceCandidate);
    }
    if (message.deviceWebrtcPeerConnected !== undefined) {
      obj.deviceWebrtcPeerConnected = DeviceWebrtcPeerConnected.toJSON(message.deviceWebrtcPeerConnected);
    }
    if (message.deviceWebrtcPeerDisconnected !== undefined) {
      obj.deviceWebrtcPeerDisconnected = DeviceWebrtcPeerDisconnected.toJSON(message.deviceWebrtcPeerDisconnected);
    }
    if (message.deviceWebrtcIceConnected !== undefined) {
      obj.deviceWebrtcIceConnected = DeviceWebrtcIceConnected.toJSON(message.deviceWebrtcIceConnected);
    }
    if (message.deviceWebrtcIceDisconnected !== undefined) {
      obj.deviceWebrtcIceDisconnected = DeviceWebrtcIceDisconnected.toJSON(message.deviceWebrtcIceDisconnected);
    }
    if (message.deviceWebrtcOfferAck !== undefined) {
      obj.deviceWebrtcOfferAck = DeviceWebrtcOfferAck.toJSON(message.deviceWebrtcOfferAck);
    }
    if (message.deviceWebrtcAnswerAck !== undefined) {
      obj.deviceWebrtcAnswerAck = DeviceWebrtcAnswerAck.toJSON(message.deviceWebrtcAnswerAck);
    }
    if (message.deviceWebrtcIceCandidateAck !== undefined) {
      obj.deviceWebrtcIceCandidateAck = DeviceWebrtcIceCandidateAck.toJSON(message.deviceWebrtcIceCandidateAck);
    }
    if (message.deviceWebrtcError !== undefined) {
      obj.deviceWebrtcError = DeviceWebrtcError.toJSON(message.deviceWebrtcError);
    }
    if (message.deviceWebrtcOfferError !== undefined) {
      obj.deviceWebrtcOfferError = DeviceWebrtcOfferError.toJSON(message.deviceWebrtcOfferError);
    }
    if (message.deviceWebrtcSessionStopWarning !== undefined) {
      obj.deviceWebrtcSessionStopWarning = DeviceWebrtcSessionStopWarning.toJSON(
        message.deviceWebrtcSessionStopWarning,
      );
    }
    if (message.deviceWebrtcPeerConnecting !== undefined) {
      obj.deviceWebrtcPeerConnecting = DeviceWebrtcPeerConnecting.toJSON(message.deviceWebrtcPeerConnecting);
    }
    if (message.deviceWebrtcDataChannelOpen !== undefined) {
      obj.deviceWebrtcDataChannelOpen = DeviceWebrtcDataChannelOpen.toJSON(message.deviceWebrtcDataChannelOpen);
    }
    if (message.deviceCameraListResponse !== undefined) {
      obj.deviceCameraListResponse = DeviceCameraListResponse.toJSON(message.deviceCameraListResponse);
    }
    if (message.deviceCameraListError !== undefined) {
      obj.deviceCameraListError = DeviceCameraListError.toJSON(message.deviceCameraListError);
    }
    if (message.deviceCameraAddSuccess !== undefined) {
      obj.deviceCameraAddSuccess = DeviceCameraAddSuccess.toJSON(message.deviceCameraAddSuccess);
    }
    if (message.deviceCameraAddError !== undefined) {
      obj.deviceCameraAddError = DeviceCameraAddError.toJSON(message.deviceCameraAddError);
    }
    if (message.deviceCameraUpdateSuccess !== undefined) {
      obj.deviceCameraUpdateSuccess = DeviceCameraUpdateSuccess.toJSON(message.deviceCameraUpdateSuccess);
    }
    if (message.deviceCameraUpdateError !== undefined) {
      obj.deviceCameraUpdateError = DeviceCameraUpdateError.toJSON(message.deviceCameraUpdateError);
    }
    if (message.deviceCameraRemoveSuccess !== undefined) {
      obj.deviceCameraRemoveSuccess = DeviceCameraRemoveSuccess.toJSON(message.deviceCameraRemoveSuccess);
    }
    if (message.deviceCameraRemoveError !== undefined) {
      obj.deviceCameraRemoveError = DeviceCameraRemoveError.toJSON(message.deviceCameraRemoveError);
    }
    if (message.deviceCameraSwitchSuccess !== undefined) {
      obj.deviceCameraSwitchSuccess = DeviceCameraSwitchSuccess.toJSON(message.deviceCameraSwitchSuccess);
    }
    if (message.deviceCameraSwitchError !== undefined) {
      obj.deviceCameraSwitchError = DeviceCameraSwitchError.toJSON(message.deviceCameraSwitchError);
    }
    if (message.deviceCameraSelectedResponse !== undefined) {
      obj.deviceCameraSelectedResponse = DeviceCameraSelectedResponse.toJSON(message.deviceCameraSelectedResponse);
    }
    if (message.deviceCameraSelectedError !== undefined) {
      obj.deviceCameraSelectedError = DeviceCameraSelectedError.toJSON(message.deviceCameraSelectedError);
    }
    if (message.deviceNetworkInterfacesResponse !== undefined) {
      obj.deviceNetworkInterfacesResponse = DeviceNetworkInterfacesResponse.toJSON(
        message.deviceNetworkInterfacesResponse,
      );
    }
    if (message.deviceStatusResponse !== undefined) {
      obj.deviceStatusResponse = DeviceStatusResponse.toJSON(message.deviceStatusResponse);
    }
    if (message.apiDeviceConnected !== undefined) {
      obj.apiDeviceConnected = ApiDeviceConnected.toJSON(message.apiDeviceConnected);
    }
    if (message.apiDeviceDisconnected !== undefined) {
      obj.apiDeviceDisconnected = ApiDeviceDisconnected.toJSON(message.apiDeviceDisconnected);
    }
    if (message.clientRtspDial !== undefined) {
      obj.clientRtspDial = ClientRtspDial.toJSON(message.clientRtspDial);
    }
    if (message.clientNetworkInterfacesRequest !== undefined) {
      obj.clientNetworkInterfacesRequest = ClientNetworkInterfacesRequest.toJSON(
        message.clientNetworkInterfacesRequest,
      );
    }
    if (message.clientCameraListRequest !== undefined) {
      obj.clientCameraListRequest = ClientCameraListRequest.toJSON(message.clientCameraListRequest);
    }
    if (message.clientCameraAdd !== undefined) {
      obj.clientCameraAdd = ClientCameraAdd.toJSON(message.clientCameraAdd);
    }
    if (message.clientCameraUpdate !== undefined) {
      obj.clientCameraUpdate = ClientCameraUpdate.toJSON(message.clientCameraUpdate);
    }
    if (message.clientCameraRemove !== undefined) {
      obj.clientCameraRemove = ClientCameraRemove.toJSON(message.clientCameraRemove);
    }
    if (message.clientCameraSwitch !== undefined) {
      obj.clientCameraSwitch = ClientCameraSwitch.toJSON(message.clientCameraSwitch);
    }
    if (message.clientCameraSelectedRequest !== undefined) {
      obj.clientCameraSelectedRequest = ClientCameraSelectedRequest.toJSON(message.clientCameraSelectedRequest);
    }
    if (message.clientWebrtcSessionStart !== undefined) {
      obj.clientWebrtcSessionStart = ClientWebrtcSessionStart.toJSON(message.clientWebrtcSessionStart);
    }
    if (message.clientWebrtcOffer !== undefined) {
      obj.clientWebrtcOffer = ClientWebrtcOffer.toJSON(message.clientWebrtcOffer);
    }
    if (message.clientWebrtcAnswer !== undefined) {
      obj.clientWebrtcAnswer = ClientWebrtcAnswer.toJSON(message.clientWebrtcAnswer);
    }
    if (message.clientWebrtcIceCandidate !== undefined) {
      obj.clientWebrtcIceCandidate = ClientWebrtcIceCandidate.toJSON(message.clientWebrtcIceCandidate);
    }
    if (message.clientDeviceReboot !== undefined) {
      obj.clientDeviceReboot = ClientDeviceReboot.toJSON(message.clientDeviceReboot);
    }
    if (message.clientStatusRequest !== undefined) {
      obj.clientStatusRequest = ClientStatusRequest.toJSON(message.clientStatusRequest);
    }
    if (message.clientModemInfoRequest !== undefined) {
      obj.clientModemInfoRequest = ClientModemInfoRequest.toJSON(message.clientModemInfoRequest);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message>, I>>(base?: I): Message {
    return Message.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message>, I>>(object: I): Message {
    const message = createBaseMessage();
    message.messageId = object.messageId ?? "";
    message.correlationId = object.correlationId ?? "";
    message.protocolVersion = object.protocolVersion ?? "";
    message.timestamp = object.timestamp ?? 0;
    message.deviceModemConnected = (object.deviceModemConnected !== undefined && object.deviceModemConnected !== null)
      ? DeviceModemConnected.fromPartial(object.deviceModemConnected)
      : undefined;
    message.deviceModemInfo = (object.deviceModemInfo !== undefined && object.deviceModemInfo !== null)
      ? DeviceModemInfo.fromPartial(object.deviceModemInfo)
      : undefined;
    message.deviceModemSignalQuality =
      (object.deviceModemSignalQuality !== undefined && object.deviceModemSignalQuality !== null)
        ? DeviceModemSignalQuality.fromPartial(object.deviceModemSignalQuality)
        : undefined;
    message.deviceModemConnectionError =
      (object.deviceModemConnectionError !== undefined && object.deviceModemConnectionError !== null)
        ? DeviceModemConnectionError.fromPartial(object.deviceModemConnectionError)
        : undefined;
    message.deviceModemInfoResponse =
      (object.deviceModemInfoResponse !== undefined && object.deviceModemInfoResponse !== null)
        ? DeviceModemInfoResponse.fromPartial(object.deviceModemInfoResponse)
        : undefined;
    message.deviceRtspConnected = (object.deviceRtspConnected !== undefined && object.deviceRtspConnected !== null)
      ? DeviceRtspConnected.fromPartial(object.deviceRtspConnected)
      : undefined;
    message.deviceRtspStreamReady =
      (object.deviceRtspStreamReady !== undefined && object.deviceRtspStreamReady !== null)
        ? DeviceRtspStreamReady.fromPartial(object.deviceRtspStreamReady)
        : undefined;
    message.deviceRtspError = (object.deviceRtspError !== undefined && object.deviceRtspError !== null)
      ? DeviceRtspError.fromPartial(object.deviceRtspError)
      : undefined;
    message.deviceRtspDialError = (object.deviceRtspDialError !== undefined && object.deviceRtspDialError !== null)
      ? DeviceRtspDialError.fromPartial(object.deviceRtspDialError)
      : undefined;
    message.deviceRtspDescribeError =
      (object.deviceRtspDescribeError !== undefined && object.deviceRtspDescribeError !== null)
        ? DeviceRtspDescribeError.fromPartial(object.deviceRtspDescribeError)
        : undefined;
    message.deviceRtspPublishError =
      (object.deviceRtspPublishError !== undefined && object.deviceRtspPublishError !== null)
        ? DeviceRtspPublishError.fromPartial(object.deviceRtspPublishError)
        : undefined;
    message.deviceRtspPacketLost = (object.deviceRtspPacketLost !== undefined && object.deviceRtspPacketLost !== null)
      ? DeviceRtspPacketLost.fromPartial(object.deviceRtspPacketLost)
      : undefined;
    message.deviceRtspDecodeError =
      (object.deviceRtspDecodeError !== undefined && object.deviceRtspDecodeError !== null)
        ? DeviceRtspDecodeError.fromPartial(object.deviceRtspDecodeError)
        : undefined;
    message.deviceRtspListenError =
      (object.deviceRtspListenError !== undefined && object.deviceRtspListenError !== null)
        ? DeviceRtspListenError.fromPartial(object.deviceRtspListenError)
        : undefined;
    message.deviceRtspClientError =
      (object.deviceRtspClientError !== undefined && object.deviceRtspClientError !== null)
        ? DeviceRtspClientError.fromPartial(object.deviceRtspClientError)
        : undefined;
    message.deviceRtspDisconnected =
      (object.deviceRtspDisconnected !== undefined && object.deviceRtspDisconnected !== null)
        ? DeviceRtspDisconnected.fromPartial(object.deviceRtspDisconnected)
        : undefined;
    message.deviceRtspConnectFailed =
      (object.deviceRtspConnectFailed !== undefined && object.deviceRtspConnectFailed !== null)
        ? DeviceRtspConnectFailed.fromPartial(object.deviceRtspConnectFailed)
        : undefined;
    message.deviceRtspRedialError =
      (object.deviceRtspRedialError !== undefined && object.deviceRtspRedialError !== null)
        ? DeviceRtspRedialError.fromPartial(object.deviceRtspRedialError)
        : undefined;
    message.deviceMavlinkConnected =
      (object.deviceMavlinkConnected !== undefined && object.deviceMavlinkConnected !== null)
        ? DeviceMavlinkConnected.fromPartial(object.deviceMavlinkConnected)
        : undefined;
    message.deviceMavlinkDialError =
      (object.deviceMavlinkDialError !== undefined && object.deviceMavlinkDialError !== null)
        ? DeviceMavlinkDialError.fromPartial(object.deviceMavlinkDialError)
        : undefined;
    message.deviceWebrtcSessionStarted =
      (object.deviceWebrtcSessionStarted !== undefined && object.deviceWebrtcSessionStarted !== null)
        ? DeviceWebrtcSessionStarted.fromPartial(object.deviceWebrtcSessionStarted)
        : undefined;
    message.deviceWebrtcOffer = (object.deviceWebrtcOffer !== undefined && object.deviceWebrtcOffer !== null)
      ? DeviceWebrtcOffer.fromPartial(object.deviceWebrtcOffer)
      : undefined;
    message.deviceWebrtcAnswer = (object.deviceWebrtcAnswer !== undefined && object.deviceWebrtcAnswer !== null)
      ? DeviceWebrtcAnswer.fromPartial(object.deviceWebrtcAnswer)
      : undefined;
    message.deviceWebrtcIceCandidate =
      (object.deviceWebrtcIceCandidate !== undefined && object.deviceWebrtcIceCandidate !== null)
        ? DeviceWebrtcIceCandidate.fromPartial(object.deviceWebrtcIceCandidate)
        : undefined;
    message.deviceWebrtcPeerConnected =
      (object.deviceWebrtcPeerConnected !== undefined && object.deviceWebrtcPeerConnected !== null)
        ? DeviceWebrtcPeerConnected.fromPartial(object.deviceWebrtcPeerConnected)
        : undefined;
    message.deviceWebrtcPeerDisconnected =
      (object.deviceWebrtcPeerDisconnected !== undefined && object.deviceWebrtcPeerDisconnected !== null)
        ? DeviceWebrtcPeerDisconnected.fromPartial(object.deviceWebrtcPeerDisconnected)
        : undefined;
    message.deviceWebrtcIceConnected =
      (object.deviceWebrtcIceConnected !== undefined && object.deviceWebrtcIceConnected !== null)
        ? DeviceWebrtcIceConnected.fromPartial(object.deviceWebrtcIceConnected)
        : undefined;
    message.deviceWebrtcIceDisconnected =
      (object.deviceWebrtcIceDisconnected !== undefined && object.deviceWebrtcIceDisconnected !== null)
        ? DeviceWebrtcIceDisconnected.fromPartial(object.deviceWebrtcIceDisconnected)
        : undefined;
    message.deviceWebrtcOfferAck = (object.deviceWebrtcOfferAck !== undefined && object.deviceWebrtcOfferAck !== null)
      ? DeviceWebrtcOfferAck.fromPartial(object.deviceWebrtcOfferAck)
      : undefined;
    message.deviceWebrtcAnswerAck =
      (object.deviceWebrtcAnswerAck !== undefined && object.deviceWebrtcAnswerAck !== null)
        ? DeviceWebrtcAnswerAck.fromPartial(object.deviceWebrtcAnswerAck)
        : undefined;
    message.deviceWebrtcIceCandidateAck =
      (object.deviceWebrtcIceCandidateAck !== undefined && object.deviceWebrtcIceCandidateAck !== null)
        ? DeviceWebrtcIceCandidateAck.fromPartial(object.deviceWebrtcIceCandidateAck)
        : undefined;
    message.deviceWebrtcError = (object.deviceWebrtcError !== undefined && object.deviceWebrtcError !== null)
      ? DeviceWebrtcError.fromPartial(object.deviceWebrtcError)
      : undefined;
    message.deviceWebrtcOfferError =
      (object.deviceWebrtcOfferError !== undefined && object.deviceWebrtcOfferError !== null)
        ? DeviceWebrtcOfferError.fromPartial(object.deviceWebrtcOfferError)
        : undefined;
    message.deviceWebrtcSessionStopWarning =
      (object.deviceWebrtcSessionStopWarning !== undefined && object.deviceWebrtcSessionStopWarning !== null)
        ? DeviceWebrtcSessionStopWarning.fromPartial(object.deviceWebrtcSessionStopWarning)
        : undefined;
    message.deviceWebrtcPeerConnecting =
      (object.deviceWebrtcPeerConnecting !== undefined && object.deviceWebrtcPeerConnecting !== null)
        ? DeviceWebrtcPeerConnecting.fromPartial(object.deviceWebrtcPeerConnecting)
        : undefined;
    message.deviceWebrtcDataChannelOpen =
      (object.deviceWebrtcDataChannelOpen !== undefined && object.deviceWebrtcDataChannelOpen !== null)
        ? DeviceWebrtcDataChannelOpen.fromPartial(object.deviceWebrtcDataChannelOpen)
        : undefined;
    message.deviceCameraListResponse =
      (object.deviceCameraListResponse !== undefined && object.deviceCameraListResponse !== null)
        ? DeviceCameraListResponse.fromPartial(object.deviceCameraListResponse)
        : undefined;
    message.deviceCameraListError =
      (object.deviceCameraListError !== undefined && object.deviceCameraListError !== null)
        ? DeviceCameraListError.fromPartial(object.deviceCameraListError)
        : undefined;
    message.deviceCameraAddSuccess =
      (object.deviceCameraAddSuccess !== undefined && object.deviceCameraAddSuccess !== null)
        ? DeviceCameraAddSuccess.fromPartial(object.deviceCameraAddSuccess)
        : undefined;
    message.deviceCameraAddError = (object.deviceCameraAddError !== undefined && object.deviceCameraAddError !== null)
      ? DeviceCameraAddError.fromPartial(object.deviceCameraAddError)
      : undefined;
    message.deviceCameraUpdateSuccess =
      (object.deviceCameraUpdateSuccess !== undefined && object.deviceCameraUpdateSuccess !== null)
        ? DeviceCameraUpdateSuccess.fromPartial(object.deviceCameraUpdateSuccess)
        : undefined;
    message.deviceCameraUpdateError =
      (object.deviceCameraUpdateError !== undefined && object.deviceCameraUpdateError !== null)
        ? DeviceCameraUpdateError.fromPartial(object.deviceCameraUpdateError)
        : undefined;
    message.deviceCameraRemoveSuccess =
      (object.deviceCameraRemoveSuccess !== undefined && object.deviceCameraRemoveSuccess !== null)
        ? DeviceCameraRemoveSuccess.fromPartial(object.deviceCameraRemoveSuccess)
        : undefined;
    message.deviceCameraRemoveError =
      (object.deviceCameraRemoveError !== undefined && object.deviceCameraRemoveError !== null)
        ? DeviceCameraRemoveError.fromPartial(object.deviceCameraRemoveError)
        : undefined;
    message.deviceCameraSwitchSuccess =
      (object.deviceCameraSwitchSuccess !== undefined && object.deviceCameraSwitchSuccess !== null)
        ? DeviceCameraSwitchSuccess.fromPartial(object.deviceCameraSwitchSuccess)
        : undefined;
    message.deviceCameraSwitchError =
      (object.deviceCameraSwitchError !== undefined && object.deviceCameraSwitchError !== null)
        ? DeviceCameraSwitchError.fromPartial(object.deviceCameraSwitchError)
        : undefined;
    message.deviceCameraSelectedResponse =
      (object.deviceCameraSelectedResponse !== undefined && object.deviceCameraSelectedResponse !== null)
        ? DeviceCameraSelectedResponse.fromPartial(object.deviceCameraSelectedResponse)
        : undefined;
    message.deviceCameraSelectedError =
      (object.deviceCameraSelectedError !== undefined && object.deviceCameraSelectedError !== null)
        ? DeviceCameraSelectedError.fromPartial(object.deviceCameraSelectedError)
        : undefined;
    message.deviceNetworkInterfacesResponse =
      (object.deviceNetworkInterfacesResponse !== undefined && object.deviceNetworkInterfacesResponse !== null)
        ? DeviceNetworkInterfacesResponse.fromPartial(object.deviceNetworkInterfacesResponse)
        : undefined;
    message.deviceStatusResponse = (object.deviceStatusResponse !== undefined && object.deviceStatusResponse !== null)
      ? DeviceStatusResponse.fromPartial(object.deviceStatusResponse)
      : undefined;
    message.apiDeviceConnected = (object.apiDeviceConnected !== undefined && object.apiDeviceConnected !== null)
      ? ApiDeviceConnected.fromPartial(object.apiDeviceConnected)
      : undefined;
    message.apiDeviceDisconnected =
      (object.apiDeviceDisconnected !== undefined && object.apiDeviceDisconnected !== null)
        ? ApiDeviceDisconnected.fromPartial(object.apiDeviceDisconnected)
        : undefined;
    message.clientRtspDial = (object.clientRtspDial !== undefined && object.clientRtspDial !== null)
      ? ClientRtspDial.fromPartial(object.clientRtspDial)
      : undefined;
    message.clientNetworkInterfacesRequest =
      (object.clientNetworkInterfacesRequest !== undefined && object.clientNetworkInterfacesRequest !== null)
        ? ClientNetworkInterfacesRequest.fromPartial(object.clientNetworkInterfacesRequest)
        : undefined;
    message.clientCameraListRequest =
      (object.clientCameraListRequest !== undefined && object.clientCameraListRequest !== null)
        ? ClientCameraListRequest.fromPartial(object.clientCameraListRequest)
        : undefined;
    message.clientCameraAdd = (object.clientCameraAdd !== undefined && object.clientCameraAdd !== null)
      ? ClientCameraAdd.fromPartial(object.clientCameraAdd)
      : undefined;
    message.clientCameraUpdate = (object.clientCameraUpdate !== undefined && object.clientCameraUpdate !== null)
      ? ClientCameraUpdate.fromPartial(object.clientCameraUpdate)
      : undefined;
    message.clientCameraRemove = (object.clientCameraRemove !== undefined && object.clientCameraRemove !== null)
      ? ClientCameraRemove.fromPartial(object.clientCameraRemove)
      : undefined;
    message.clientCameraSwitch = (object.clientCameraSwitch !== undefined && object.clientCameraSwitch !== null)
      ? ClientCameraSwitch.fromPartial(object.clientCameraSwitch)
      : undefined;
    message.clientCameraSelectedRequest =
      (object.clientCameraSelectedRequest !== undefined && object.clientCameraSelectedRequest !== null)
        ? ClientCameraSelectedRequest.fromPartial(object.clientCameraSelectedRequest)
        : undefined;
    message.clientWebrtcSessionStart =
      (object.clientWebrtcSessionStart !== undefined && object.clientWebrtcSessionStart !== null)
        ? ClientWebrtcSessionStart.fromPartial(object.clientWebrtcSessionStart)
        : undefined;
    message.clientWebrtcOffer = (object.clientWebrtcOffer !== undefined && object.clientWebrtcOffer !== null)
      ? ClientWebrtcOffer.fromPartial(object.clientWebrtcOffer)
      : undefined;
    message.clientWebrtcAnswer = (object.clientWebrtcAnswer !== undefined && object.clientWebrtcAnswer !== null)
      ? ClientWebrtcAnswer.fromPartial(object.clientWebrtcAnswer)
      : undefined;
    message.clientWebrtcIceCandidate =
      (object.clientWebrtcIceCandidate !== undefined && object.clientWebrtcIceCandidate !== null)
        ? ClientWebrtcIceCandidate.fromPartial(object.clientWebrtcIceCandidate)
        : undefined;
    message.clientDeviceReboot = (object.clientDeviceReboot !== undefined && object.clientDeviceReboot !== null)
      ? ClientDeviceReboot.fromPartial(object.clientDeviceReboot)
      : undefined;
    message.clientStatusRequest = (object.clientStatusRequest !== undefined && object.clientStatusRequest !== null)
      ? ClientStatusRequest.fromPartial(object.clientStatusRequest)
      : undefined;
    message.clientModemInfoRequest =
      (object.clientModemInfoRequest !== undefined && object.clientModemInfoRequest !== null)
        ? ClientModemInfoRequest.fromPartial(object.clientModemInfoRequest)
        : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseDeviceModemConnected(): DeviceModemConnected {
  return { status: "" };
}

export const DeviceModemConnected = {
  encode(message: DeviceModemConnected, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.status !== "") {
      writer.uint32(10).string(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceModemConnected {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceModemConnected();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.status = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceModemConnected {
    return { status: isSet(object.status) ? globalThis.String(object.status) : "" };
  },

  toJSON(message: DeviceModemConnected): unknown {
    const obj: any = {};
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceModemConnected>, I>>(base?: I): DeviceModemConnected {
    return DeviceModemConnected.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceModemConnected>, I>>(object: I): DeviceModemConnected {
    const message = createBaseDeviceModemConnected();
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseDeviceModemInfo(): DeviceModemInfo {
  return { event: undefined, signalQuality: undefined };
}

export const DeviceModemInfo = {
  encode(message: DeviceModemInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.event !== undefined) {
      Event.encode(message.event, writer.uint32(10).fork()).ldelim();
    }
    if (message.signalQuality !== undefined) {
      SignalQuality.encode(message.signalQuality, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceModemInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceModemInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.event = Event.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.signalQuality = SignalQuality.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceModemInfo {
    return {
      event: isSet(object.event) ? Event.fromJSON(object.event) : undefined,
      signalQuality: isSet(object.signalQuality) ? SignalQuality.fromJSON(object.signalQuality) : undefined,
    };
  },

  toJSON(message: DeviceModemInfo): unknown {
    const obj: any = {};
    if (message.event !== undefined) {
      obj.event = Event.toJSON(message.event);
    }
    if (message.signalQuality !== undefined) {
      obj.signalQuality = SignalQuality.toJSON(message.signalQuality);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceModemInfo>, I>>(base?: I): DeviceModemInfo {
    return DeviceModemInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceModemInfo>, I>>(object: I): DeviceModemInfo {
    const message = createBaseDeviceModemInfo();
    message.event = (object.event !== undefined && object.event !== null) ? Event.fromPartial(object.event) : undefined;
    message.signalQuality = (object.signalQuality !== undefined && object.signalQuality !== null)
      ? SignalQuality.fromPartial(object.signalQuality)
      : undefined;
    return message;
  },
};

function createBaseDeviceModemSignalQuality(): DeviceModemSignalQuality {
  return { event: undefined, signalQuality: undefined };
}

export const DeviceModemSignalQuality = {
  encode(message: DeviceModemSignalQuality, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.event !== undefined) {
      Event.encode(message.event, writer.uint32(10).fork()).ldelim();
    }
    if (message.signalQuality !== undefined) {
      SignalQuality.encode(message.signalQuality, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceModemSignalQuality {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceModemSignalQuality();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.event = Event.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.signalQuality = SignalQuality.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceModemSignalQuality {
    return {
      event: isSet(object.event) ? Event.fromJSON(object.event) : undefined,
      signalQuality: isSet(object.signalQuality) ? SignalQuality.fromJSON(object.signalQuality) : undefined,
    };
  },

  toJSON(message: DeviceModemSignalQuality): unknown {
    const obj: any = {};
    if (message.event !== undefined) {
      obj.event = Event.toJSON(message.event);
    }
    if (message.signalQuality !== undefined) {
      obj.signalQuality = SignalQuality.toJSON(message.signalQuality);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceModemSignalQuality>, I>>(base?: I): DeviceModemSignalQuality {
    return DeviceModemSignalQuality.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceModemSignalQuality>, I>>(object: I): DeviceModemSignalQuality {
    const message = createBaseDeviceModemSignalQuality();
    message.event = (object.event !== undefined && object.event !== null) ? Event.fromPartial(object.event) : undefined;
    message.signalQuality = (object.signalQuality !== undefined && object.signalQuality !== null)
      ? SignalQuality.fromPartial(object.signalQuality)
      : undefined;
    return message;
  },
};

function createBaseDeviceModemConnectionError(): DeviceModemConnectionError {
  return { error: "" };
}

export const DeviceModemConnectionError = {
  encode(message: DeviceModemConnectionError, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceModemConnectionError {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceModemConnectionError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceModemConnectionError {
    return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
  },

  toJSON(message: DeviceModemConnectionError): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceModemConnectionError>, I>>(base?: I): DeviceModemConnectionError {
    return DeviceModemConnectionError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceModemConnectionError>, I>>(object: I): DeviceModemConnectionError {
    const message = createBaseDeviceModemConnectionError();
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseDeviceModemInfoResponse(): DeviceModemInfoResponse {
  return { status: "", model: "", manufacturer: "", imei: "", signalQuality: undefined };
}

export const DeviceModemInfoResponse = {
  encode(message: DeviceModemInfoResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.status !== "") {
      writer.uint32(10).string(message.status);
    }
    if (message.model !== "") {
      writer.uint32(18).string(message.model);
    }
    if (message.manufacturer !== "") {
      writer.uint32(26).string(message.manufacturer);
    }
    if (message.imei !== "") {
      writer.uint32(34).string(message.imei);
    }
    if (message.signalQuality !== undefined) {
      SignalQuality.encode(message.signalQuality, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceModemInfoResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceModemInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.status = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.model = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.manufacturer = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.imei = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.signalQuality = SignalQuality.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceModemInfoResponse {
    return {
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      model: isSet(object.model) ? globalThis.String(object.model) : "",
      manufacturer: isSet(object.manufacturer) ? globalThis.String(object.manufacturer) : "",
      imei: isSet(object.imei) ? globalThis.String(object.imei) : "",
      signalQuality: isSet(object.signalQuality) ? SignalQuality.fromJSON(object.signalQuality) : undefined,
    };
  },

  toJSON(message: DeviceModemInfoResponse): unknown {
    const obj: any = {};
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.model !== "") {
      obj.model = message.model;
    }
    if (message.manufacturer !== "") {
      obj.manufacturer = message.manufacturer;
    }
    if (message.imei !== "") {
      obj.imei = message.imei;
    }
    if (message.signalQuality !== undefined) {
      obj.signalQuality = SignalQuality.toJSON(message.signalQuality);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceModemInfoResponse>, I>>(base?: I): DeviceModemInfoResponse {
    return DeviceModemInfoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceModemInfoResponse>, I>>(object: I): DeviceModemInfoResponse {
    const message = createBaseDeviceModemInfoResponse();
    message.status = object.status ?? "";
    message.model = object.model ?? "";
    message.manufacturer = object.manufacturer ?? "";
    message.imei = object.imei ?? "";
    message.signalQuality = (object.signalQuality !== undefined && object.signalQuality !== null)
      ? SignalQuality.fromPartial(object.signalQuality)
      : undefined;
    return message;
  },
};

function createBaseDeviceRtspConnected(): DeviceRtspConnected {
  return { status: "" };
}

export const DeviceRtspConnected = {
  encode(message: DeviceRtspConnected, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.status !== "") {
      writer.uint32(10).string(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceRtspConnected {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceRtspConnected();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.status = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceRtspConnected {
    return { status: isSet(object.status) ? globalThis.String(object.status) : "" };
  },

  toJSON(message: DeviceRtspConnected): unknown {
    const obj: any = {};
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceRtspConnected>, I>>(base?: I): DeviceRtspConnected {
    return DeviceRtspConnected.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceRtspConnected>, I>>(object: I): DeviceRtspConnected {
    const message = createBaseDeviceRtspConnected();
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseDeviceRtspStreamReady(): DeviceRtspStreamReady {
  return { status: "" };
}

export const DeviceRtspStreamReady = {
  encode(message: DeviceRtspStreamReady, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.status !== "") {
      writer.uint32(10).string(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceRtspStreamReady {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceRtspStreamReady();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.status = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceRtspStreamReady {
    return { status: isSet(object.status) ? globalThis.String(object.status) : "" };
  },

  toJSON(message: DeviceRtspStreamReady): unknown {
    const obj: any = {};
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceRtspStreamReady>, I>>(base?: I): DeviceRtspStreamReady {
    return DeviceRtspStreamReady.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceRtspStreamReady>, I>>(object: I): DeviceRtspStreamReady {
    const message = createBaseDeviceRtspStreamReady();
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseDeviceRtspError(): DeviceRtspError {
  return { error: "" };
}

export const DeviceRtspError = {
  encode(message: DeviceRtspError, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceRtspError {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceRtspError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceRtspError {
    return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
  },

  toJSON(message: DeviceRtspError): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceRtspError>, I>>(base?: I): DeviceRtspError {
    return DeviceRtspError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceRtspError>, I>>(object: I): DeviceRtspError {
    const message = createBaseDeviceRtspError();
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseDeviceRtspDialError(): DeviceRtspDialError {
  return { error: "" };
}

export const DeviceRtspDialError = {
  encode(message: DeviceRtspDialError, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceRtspDialError {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceRtspDialError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceRtspDialError {
    return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
  },

  toJSON(message: DeviceRtspDialError): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceRtspDialError>, I>>(base?: I): DeviceRtspDialError {
    return DeviceRtspDialError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceRtspDialError>, I>>(object: I): DeviceRtspDialError {
    const message = createBaseDeviceRtspDialError();
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseDeviceRtspDescribeError(): DeviceRtspDescribeError {
  return { error: "" };
}

export const DeviceRtspDescribeError = {
  encode(message: DeviceRtspDescribeError, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceRtspDescribeError {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceRtspDescribeError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceRtspDescribeError {
    return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
  },

  toJSON(message: DeviceRtspDescribeError): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceRtspDescribeError>, I>>(base?: I): DeviceRtspDescribeError {
    return DeviceRtspDescribeError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceRtspDescribeError>, I>>(object: I): DeviceRtspDescribeError {
    const message = createBaseDeviceRtspDescribeError();
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseDeviceRtspPublishError(): DeviceRtspPublishError {
  return { error: "" };
}

export const DeviceRtspPublishError = {
  encode(message: DeviceRtspPublishError, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceRtspPublishError {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceRtspPublishError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceRtspPublishError {
    return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
  },

  toJSON(message: DeviceRtspPublishError): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceRtspPublishError>, I>>(base?: I): DeviceRtspPublishError {
    return DeviceRtspPublishError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceRtspPublishError>, I>>(object: I): DeviceRtspPublishError {
    const message = createBaseDeviceRtspPublishError();
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseDeviceRtspPacketLost(): DeviceRtspPacketLost {
  return { details: "" };
}

export const DeviceRtspPacketLost = {
  encode(message: DeviceRtspPacketLost, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== "") {
      writer.uint32(10).string(message.details);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceRtspPacketLost {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceRtspPacketLost();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceRtspPacketLost {
    return { details: isSet(object.details) ? globalThis.String(object.details) : "" };
  },

  toJSON(message: DeviceRtspPacketLost): unknown {
    const obj: any = {};
    if (message.details !== "") {
      obj.details = message.details;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceRtspPacketLost>, I>>(base?: I): DeviceRtspPacketLost {
    return DeviceRtspPacketLost.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceRtspPacketLost>, I>>(object: I): DeviceRtspPacketLost {
    const message = createBaseDeviceRtspPacketLost();
    message.details = object.details ?? "";
    return message;
  },
};

function createBaseDeviceRtspDecodeError(): DeviceRtspDecodeError {
  return { error: "" };
}

export const DeviceRtspDecodeError = {
  encode(message: DeviceRtspDecodeError, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceRtspDecodeError {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceRtspDecodeError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceRtspDecodeError {
    return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
  },

  toJSON(message: DeviceRtspDecodeError): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceRtspDecodeError>, I>>(base?: I): DeviceRtspDecodeError {
    return DeviceRtspDecodeError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceRtspDecodeError>, I>>(object: I): DeviceRtspDecodeError {
    const message = createBaseDeviceRtspDecodeError();
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseDeviceRtspListenError(): DeviceRtspListenError {
  return { error: "" };
}

export const DeviceRtspListenError = {
  encode(message: DeviceRtspListenError, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceRtspListenError {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceRtspListenError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceRtspListenError {
    return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
  },

  toJSON(message: DeviceRtspListenError): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceRtspListenError>, I>>(base?: I): DeviceRtspListenError {
    return DeviceRtspListenError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceRtspListenError>, I>>(object: I): DeviceRtspListenError {
    const message = createBaseDeviceRtspListenError();
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseDeviceRtspClientError(): DeviceRtspClientError {
  return { error: "" };
}

export const DeviceRtspClientError = {
  encode(message: DeviceRtspClientError, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceRtspClientError {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceRtspClientError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceRtspClientError {
    return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
  },

  toJSON(message: DeviceRtspClientError): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceRtspClientError>, I>>(base?: I): DeviceRtspClientError {
    return DeviceRtspClientError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceRtspClientError>, I>>(object: I): DeviceRtspClientError {
    const message = createBaseDeviceRtspClientError();
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseDeviceRtspDisconnected(): DeviceRtspDisconnected {
  return { reason: "" };
}

export const DeviceRtspDisconnected = {
  encode(message: DeviceRtspDisconnected, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.reason !== "") {
      writer.uint32(10).string(message.reason);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceRtspDisconnected {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceRtspDisconnected();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reason = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceRtspDisconnected {
    return { reason: isSet(object.reason) ? globalThis.String(object.reason) : "" };
  },

  toJSON(message: DeviceRtspDisconnected): unknown {
    const obj: any = {};
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceRtspDisconnected>, I>>(base?: I): DeviceRtspDisconnected {
    return DeviceRtspDisconnected.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceRtspDisconnected>, I>>(object: I): DeviceRtspDisconnected {
    const message = createBaseDeviceRtspDisconnected();
    message.reason = object.reason ?? "";
    return message;
  },
};

function createBaseDeviceRtspConnectFailed(): DeviceRtspConnectFailed {
  return { error: "" };
}

export const DeviceRtspConnectFailed = {
  encode(message: DeviceRtspConnectFailed, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceRtspConnectFailed {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceRtspConnectFailed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceRtspConnectFailed {
    return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
  },

  toJSON(message: DeviceRtspConnectFailed): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceRtspConnectFailed>, I>>(base?: I): DeviceRtspConnectFailed {
    return DeviceRtspConnectFailed.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceRtspConnectFailed>, I>>(object: I): DeviceRtspConnectFailed {
    const message = createBaseDeviceRtspConnectFailed();
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseDeviceRtspRedialError(): DeviceRtspRedialError {
  return { error: "" };
}

export const DeviceRtspRedialError = {
  encode(message: DeviceRtspRedialError, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceRtspRedialError {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceRtspRedialError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceRtspRedialError {
    return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
  },

  toJSON(message: DeviceRtspRedialError): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceRtspRedialError>, I>>(base?: I): DeviceRtspRedialError {
    return DeviceRtspRedialError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceRtspRedialError>, I>>(object: I): DeviceRtspRedialError {
    const message = createBaseDeviceRtspRedialError();
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseDeviceMavlinkConnected(): DeviceMavlinkConnected {
  return { status: "" };
}

export const DeviceMavlinkConnected = {
  encode(message: DeviceMavlinkConnected, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.status !== "") {
      writer.uint32(10).string(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceMavlinkConnected {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceMavlinkConnected();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.status = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceMavlinkConnected {
    return { status: isSet(object.status) ? globalThis.String(object.status) : "" };
  },

  toJSON(message: DeviceMavlinkConnected): unknown {
    const obj: any = {};
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceMavlinkConnected>, I>>(base?: I): DeviceMavlinkConnected {
    return DeviceMavlinkConnected.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceMavlinkConnected>, I>>(object: I): DeviceMavlinkConnected {
    const message = createBaseDeviceMavlinkConnected();
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseDeviceMavlinkDialError(): DeviceMavlinkDialError {
  return { error: "" };
}

export const DeviceMavlinkDialError = {
  encode(message: DeviceMavlinkDialError, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceMavlinkDialError {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceMavlinkDialError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceMavlinkDialError {
    return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
  },

  toJSON(message: DeviceMavlinkDialError): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceMavlinkDialError>, I>>(base?: I): DeviceMavlinkDialError {
    return DeviceMavlinkDialError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceMavlinkDialError>, I>>(object: I): DeviceMavlinkDialError {
    const message = createBaseDeviceMavlinkDialError();
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseDeviceWebrtcSessionStarted(): DeviceWebrtcSessionStarted {
  return {};
}

export const DeviceWebrtcSessionStarted = {
  encode(_: DeviceWebrtcSessionStarted, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceWebrtcSessionStarted {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceWebrtcSessionStarted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeviceWebrtcSessionStarted {
    return {};
  },

  toJSON(_: DeviceWebrtcSessionStarted): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceWebrtcSessionStarted>, I>>(base?: I): DeviceWebrtcSessionStarted {
    return DeviceWebrtcSessionStarted.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceWebrtcSessionStarted>, I>>(_: I): DeviceWebrtcSessionStarted {
    const message = createBaseDeviceWebrtcSessionStarted();
    return message;
  },
};

function createBaseDeviceWebrtcOffer(): DeviceWebrtcOffer {
  return { sdp: "" };
}

export const DeviceWebrtcOffer = {
  encode(message: DeviceWebrtcOffer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sdp !== "") {
      writer.uint32(10).string(message.sdp);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceWebrtcOffer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceWebrtcOffer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sdp = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceWebrtcOffer {
    return { sdp: isSet(object.sdp) ? globalThis.String(object.sdp) : "" };
  },

  toJSON(message: DeviceWebrtcOffer): unknown {
    const obj: any = {};
    if (message.sdp !== "") {
      obj.sdp = message.sdp;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceWebrtcOffer>, I>>(base?: I): DeviceWebrtcOffer {
    return DeviceWebrtcOffer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceWebrtcOffer>, I>>(object: I): DeviceWebrtcOffer {
    const message = createBaseDeviceWebrtcOffer();
    message.sdp = object.sdp ?? "";
    return message;
  },
};

function createBaseDeviceWebrtcAnswer(): DeviceWebrtcAnswer {
  return { sdp: "" };
}

export const DeviceWebrtcAnswer = {
  encode(message: DeviceWebrtcAnswer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sdp !== "") {
      writer.uint32(10).string(message.sdp);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceWebrtcAnswer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceWebrtcAnswer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sdp = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceWebrtcAnswer {
    return { sdp: isSet(object.sdp) ? globalThis.String(object.sdp) : "" };
  },

  toJSON(message: DeviceWebrtcAnswer): unknown {
    const obj: any = {};
    if (message.sdp !== "") {
      obj.sdp = message.sdp;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceWebrtcAnswer>, I>>(base?: I): DeviceWebrtcAnswer {
    return DeviceWebrtcAnswer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceWebrtcAnswer>, I>>(object: I): DeviceWebrtcAnswer {
    const message = createBaseDeviceWebrtcAnswer();
    message.sdp = object.sdp ?? "";
    return message;
  },
};

function createBaseDeviceWebrtcIceCandidate(): DeviceWebrtcIceCandidate {
  return { candidate: "", sdpMid: "", sdpMLineIndex: 0, usernameFragment: "" };
}

export const DeviceWebrtcIceCandidate = {
  encode(message: DeviceWebrtcIceCandidate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.candidate !== "") {
      writer.uint32(10).string(message.candidate);
    }
    if (message.sdpMid !== "") {
      writer.uint32(18).string(message.sdpMid);
    }
    if (message.sdpMLineIndex !== 0) {
      writer.uint32(24).int32(message.sdpMLineIndex);
    }
    if (message.usernameFragment !== "") {
      writer.uint32(34).string(message.usernameFragment);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceWebrtcIceCandidate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceWebrtcIceCandidate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.candidate = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sdpMid = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.sdpMLineIndex = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.usernameFragment = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceWebrtcIceCandidate {
    return {
      candidate: isSet(object.candidate) ? globalThis.String(object.candidate) : "",
      sdpMid: isSet(object.sdpMid) ? globalThis.String(object.sdpMid) : "",
      sdpMLineIndex: isSet(object.sdpMLineIndex) ? globalThis.Number(object.sdpMLineIndex) : 0,
      usernameFragment: isSet(object.usernameFragment) ? globalThis.String(object.usernameFragment) : "",
    };
  },

  toJSON(message: DeviceWebrtcIceCandidate): unknown {
    const obj: any = {};
    if (message.candidate !== "") {
      obj.candidate = message.candidate;
    }
    if (message.sdpMid !== "") {
      obj.sdpMid = message.sdpMid;
    }
    if (message.sdpMLineIndex !== 0) {
      obj.sdpMLineIndex = Math.round(message.sdpMLineIndex);
    }
    if (message.usernameFragment !== "") {
      obj.usernameFragment = message.usernameFragment;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceWebrtcIceCandidate>, I>>(base?: I): DeviceWebrtcIceCandidate {
    return DeviceWebrtcIceCandidate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceWebrtcIceCandidate>, I>>(object: I): DeviceWebrtcIceCandidate {
    const message = createBaseDeviceWebrtcIceCandidate();
    message.candidate = object.candidate ?? "";
    message.sdpMid = object.sdpMid ?? "";
    message.sdpMLineIndex = object.sdpMLineIndex ?? 0;
    message.usernameFragment = object.usernameFragment ?? "";
    return message;
  },
};

function createBaseDeviceWebrtcPeerConnected(): DeviceWebrtcPeerConnected {
  return {};
}

export const DeviceWebrtcPeerConnected = {
  encode(_: DeviceWebrtcPeerConnected, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceWebrtcPeerConnected {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceWebrtcPeerConnected();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeviceWebrtcPeerConnected {
    return {};
  },

  toJSON(_: DeviceWebrtcPeerConnected): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceWebrtcPeerConnected>, I>>(base?: I): DeviceWebrtcPeerConnected {
    return DeviceWebrtcPeerConnected.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceWebrtcPeerConnected>, I>>(_: I): DeviceWebrtcPeerConnected {
    const message = createBaseDeviceWebrtcPeerConnected();
    return message;
  },
};

function createBaseDeviceWebrtcPeerDisconnected(): DeviceWebrtcPeerDisconnected {
  return { reason: "" };
}

export const DeviceWebrtcPeerDisconnected = {
  encode(message: DeviceWebrtcPeerDisconnected, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.reason !== "") {
      writer.uint32(10).string(message.reason);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceWebrtcPeerDisconnected {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceWebrtcPeerDisconnected();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reason = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceWebrtcPeerDisconnected {
    return { reason: isSet(object.reason) ? globalThis.String(object.reason) : "" };
  },

  toJSON(message: DeviceWebrtcPeerDisconnected): unknown {
    const obj: any = {};
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceWebrtcPeerDisconnected>, I>>(base?: I): DeviceWebrtcPeerDisconnected {
    return DeviceWebrtcPeerDisconnected.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceWebrtcPeerDisconnected>, I>>(object: I): DeviceWebrtcPeerDisconnected {
    const message = createBaseDeviceWebrtcPeerDisconnected();
    message.reason = object.reason ?? "";
    return message;
  },
};

function createBaseDeviceWebrtcIceConnected(): DeviceWebrtcIceConnected {
  return {};
}

export const DeviceWebrtcIceConnected = {
  encode(_: DeviceWebrtcIceConnected, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceWebrtcIceConnected {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceWebrtcIceConnected();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeviceWebrtcIceConnected {
    return {};
  },

  toJSON(_: DeviceWebrtcIceConnected): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceWebrtcIceConnected>, I>>(base?: I): DeviceWebrtcIceConnected {
    return DeviceWebrtcIceConnected.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceWebrtcIceConnected>, I>>(_: I): DeviceWebrtcIceConnected {
    const message = createBaseDeviceWebrtcIceConnected();
    return message;
  },
};

function createBaseDeviceWebrtcIceDisconnected(): DeviceWebrtcIceDisconnected {
  return { reason: "" };
}

export const DeviceWebrtcIceDisconnected = {
  encode(message: DeviceWebrtcIceDisconnected, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.reason !== "") {
      writer.uint32(10).string(message.reason);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceWebrtcIceDisconnected {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceWebrtcIceDisconnected();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reason = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceWebrtcIceDisconnected {
    return { reason: isSet(object.reason) ? globalThis.String(object.reason) : "" };
  },

  toJSON(message: DeviceWebrtcIceDisconnected): unknown {
    const obj: any = {};
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceWebrtcIceDisconnected>, I>>(base?: I): DeviceWebrtcIceDisconnected {
    return DeviceWebrtcIceDisconnected.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceWebrtcIceDisconnected>, I>>(object: I): DeviceWebrtcIceDisconnected {
    const message = createBaseDeviceWebrtcIceDisconnected();
    message.reason = object.reason ?? "";
    return message;
  },
};

function createBaseDeviceWebrtcOfferAck(): DeviceWebrtcOfferAck {
  return {};
}

export const DeviceWebrtcOfferAck = {
  encode(_: DeviceWebrtcOfferAck, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceWebrtcOfferAck {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceWebrtcOfferAck();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeviceWebrtcOfferAck {
    return {};
  },

  toJSON(_: DeviceWebrtcOfferAck): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceWebrtcOfferAck>, I>>(base?: I): DeviceWebrtcOfferAck {
    return DeviceWebrtcOfferAck.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceWebrtcOfferAck>, I>>(_: I): DeviceWebrtcOfferAck {
    const message = createBaseDeviceWebrtcOfferAck();
    return message;
  },
};

function createBaseDeviceWebrtcAnswerAck(): DeviceWebrtcAnswerAck {
  return {};
}

export const DeviceWebrtcAnswerAck = {
  encode(_: DeviceWebrtcAnswerAck, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceWebrtcAnswerAck {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceWebrtcAnswerAck();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeviceWebrtcAnswerAck {
    return {};
  },

  toJSON(_: DeviceWebrtcAnswerAck): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceWebrtcAnswerAck>, I>>(base?: I): DeviceWebrtcAnswerAck {
    return DeviceWebrtcAnswerAck.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceWebrtcAnswerAck>, I>>(_: I): DeviceWebrtcAnswerAck {
    const message = createBaseDeviceWebrtcAnswerAck();
    return message;
  },
};

function createBaseDeviceWebrtcIceCandidateAck(): DeviceWebrtcIceCandidateAck {
  return {};
}

export const DeviceWebrtcIceCandidateAck = {
  encode(_: DeviceWebrtcIceCandidateAck, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceWebrtcIceCandidateAck {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceWebrtcIceCandidateAck();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeviceWebrtcIceCandidateAck {
    return {};
  },

  toJSON(_: DeviceWebrtcIceCandidateAck): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceWebrtcIceCandidateAck>, I>>(base?: I): DeviceWebrtcIceCandidateAck {
    return DeviceWebrtcIceCandidateAck.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceWebrtcIceCandidateAck>, I>>(_: I): DeviceWebrtcIceCandidateAck {
    const message = createBaseDeviceWebrtcIceCandidateAck();
    return message;
  },
};

function createBaseDeviceWebrtcError(): DeviceWebrtcError {
  return { error: "" };
}

export const DeviceWebrtcError = {
  encode(message: DeviceWebrtcError, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceWebrtcError {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceWebrtcError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceWebrtcError {
    return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
  },

  toJSON(message: DeviceWebrtcError): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceWebrtcError>, I>>(base?: I): DeviceWebrtcError {
    return DeviceWebrtcError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceWebrtcError>, I>>(object: I): DeviceWebrtcError {
    const message = createBaseDeviceWebrtcError();
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseDeviceWebrtcOfferError(): DeviceWebrtcOfferError {
  return { error: "" };
}

export const DeviceWebrtcOfferError = {
  encode(message: DeviceWebrtcOfferError, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceWebrtcOfferError {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceWebrtcOfferError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceWebrtcOfferError {
    return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
  },

  toJSON(message: DeviceWebrtcOfferError): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceWebrtcOfferError>, I>>(base?: I): DeviceWebrtcOfferError {
    return DeviceWebrtcOfferError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceWebrtcOfferError>, I>>(object: I): DeviceWebrtcOfferError {
    const message = createBaseDeviceWebrtcOfferError();
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseDeviceWebrtcSessionStopWarning(): DeviceWebrtcSessionStopWarning {
  return { reason: "" };
}

export const DeviceWebrtcSessionStopWarning = {
  encode(message: DeviceWebrtcSessionStopWarning, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.reason !== "") {
      writer.uint32(10).string(message.reason);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceWebrtcSessionStopWarning {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceWebrtcSessionStopWarning();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reason = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceWebrtcSessionStopWarning {
    return { reason: isSet(object.reason) ? globalThis.String(object.reason) : "" };
  },

  toJSON(message: DeviceWebrtcSessionStopWarning): unknown {
    const obj: any = {};
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceWebrtcSessionStopWarning>, I>>(base?: I): DeviceWebrtcSessionStopWarning {
    return DeviceWebrtcSessionStopWarning.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceWebrtcSessionStopWarning>, I>>(
    object: I,
  ): DeviceWebrtcSessionStopWarning {
    const message = createBaseDeviceWebrtcSessionStopWarning();
    message.reason = object.reason ?? "";
    return message;
  },
};

function createBaseDeviceWebrtcPeerConnecting(): DeviceWebrtcPeerConnecting {
  return { status: "" };
}

export const DeviceWebrtcPeerConnecting = {
  encode(message: DeviceWebrtcPeerConnecting, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.status !== "") {
      writer.uint32(10).string(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceWebrtcPeerConnecting {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceWebrtcPeerConnecting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.status = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceWebrtcPeerConnecting {
    return { status: isSet(object.status) ? globalThis.String(object.status) : "" };
  },

  toJSON(message: DeviceWebrtcPeerConnecting): unknown {
    const obj: any = {};
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceWebrtcPeerConnecting>, I>>(base?: I): DeviceWebrtcPeerConnecting {
    return DeviceWebrtcPeerConnecting.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceWebrtcPeerConnecting>, I>>(object: I): DeviceWebrtcPeerConnecting {
    const message = createBaseDeviceWebrtcPeerConnecting();
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseDeviceWebrtcDataChannelOpen(): DeviceWebrtcDataChannelOpen {
  return { channelId: "" };
}

export const DeviceWebrtcDataChannelOpen = {
  encode(message: DeviceWebrtcDataChannelOpen, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.channelId !== "") {
      writer.uint32(10).string(message.channelId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceWebrtcDataChannelOpen {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceWebrtcDataChannelOpen();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.channelId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceWebrtcDataChannelOpen {
    return { channelId: isSet(object.channelId) ? globalThis.String(object.channelId) : "" };
  },

  toJSON(message: DeviceWebrtcDataChannelOpen): unknown {
    const obj: any = {};
    if (message.channelId !== "") {
      obj.channelId = message.channelId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceWebrtcDataChannelOpen>, I>>(base?: I): DeviceWebrtcDataChannelOpen {
    return DeviceWebrtcDataChannelOpen.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceWebrtcDataChannelOpen>, I>>(object: I): DeviceWebrtcDataChannelOpen {
    const message = createBaseDeviceWebrtcDataChannelOpen();
    message.channelId = object.channelId ?? "";
    return message;
  },
};

function createBaseDeviceCameraListResponse(): DeviceCameraListResponse {
  return { cameras: [] };
}

export const DeviceCameraListResponse = {
  encode(message: DeviceCameraListResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.cameras) {
      Camera.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceCameraListResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceCameraListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cameras.push(Camera.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceCameraListResponse {
    return {
      cameras: globalThis.Array.isArray(object?.cameras) ? object.cameras.map((e: any) => Camera.fromJSON(e)) : [],
    };
  },

  toJSON(message: DeviceCameraListResponse): unknown {
    const obj: any = {};
    if (message.cameras?.length) {
      obj.cameras = message.cameras.map((e) => Camera.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceCameraListResponse>, I>>(base?: I): DeviceCameraListResponse {
    return DeviceCameraListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceCameraListResponse>, I>>(object: I): DeviceCameraListResponse {
    const message = createBaseDeviceCameraListResponse();
    message.cameras = object.cameras?.map((e) => Camera.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDeviceCameraListError(): DeviceCameraListError {
  return { error: "" };
}

export const DeviceCameraListError = {
  encode(message: DeviceCameraListError, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceCameraListError {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceCameraListError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceCameraListError {
    return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
  },

  toJSON(message: DeviceCameraListError): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceCameraListError>, I>>(base?: I): DeviceCameraListError {
    return DeviceCameraListError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceCameraListError>, I>>(object: I): DeviceCameraListError {
    const message = createBaseDeviceCameraListError();
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseDeviceCameraAddSuccess(): DeviceCameraAddSuccess {
  return { camera: undefined };
}

export const DeviceCameraAddSuccess = {
  encode(message: DeviceCameraAddSuccess, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.camera !== undefined) {
      Camera.encode(message.camera, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceCameraAddSuccess {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceCameraAddSuccess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.camera = Camera.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceCameraAddSuccess {
    return { camera: isSet(object.camera) ? Camera.fromJSON(object.camera) : undefined };
  },

  toJSON(message: DeviceCameraAddSuccess): unknown {
    const obj: any = {};
    if (message.camera !== undefined) {
      obj.camera = Camera.toJSON(message.camera);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceCameraAddSuccess>, I>>(base?: I): DeviceCameraAddSuccess {
    return DeviceCameraAddSuccess.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceCameraAddSuccess>, I>>(object: I): DeviceCameraAddSuccess {
    const message = createBaseDeviceCameraAddSuccess();
    message.camera = (object.camera !== undefined && object.camera !== null)
      ? Camera.fromPartial(object.camera)
      : undefined;
    return message;
  },
};

function createBaseDeviceCameraAddError(): DeviceCameraAddError {
  return { error: "" };
}

export const DeviceCameraAddError = {
  encode(message: DeviceCameraAddError, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceCameraAddError {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceCameraAddError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceCameraAddError {
    return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
  },

  toJSON(message: DeviceCameraAddError): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceCameraAddError>, I>>(base?: I): DeviceCameraAddError {
    return DeviceCameraAddError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceCameraAddError>, I>>(object: I): DeviceCameraAddError {
    const message = createBaseDeviceCameraAddError();
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseDeviceCameraUpdateSuccess(): DeviceCameraUpdateSuccess {
  return { camera: undefined };
}

export const DeviceCameraUpdateSuccess = {
  encode(message: DeviceCameraUpdateSuccess, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.camera !== undefined) {
      Camera.encode(message.camera, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceCameraUpdateSuccess {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceCameraUpdateSuccess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.camera = Camera.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceCameraUpdateSuccess {
    return { camera: isSet(object.camera) ? Camera.fromJSON(object.camera) : undefined };
  },

  toJSON(message: DeviceCameraUpdateSuccess): unknown {
    const obj: any = {};
    if (message.camera !== undefined) {
      obj.camera = Camera.toJSON(message.camera);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceCameraUpdateSuccess>, I>>(base?: I): DeviceCameraUpdateSuccess {
    return DeviceCameraUpdateSuccess.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceCameraUpdateSuccess>, I>>(object: I): DeviceCameraUpdateSuccess {
    const message = createBaseDeviceCameraUpdateSuccess();
    message.camera = (object.camera !== undefined && object.camera !== null)
      ? Camera.fromPartial(object.camera)
      : undefined;
    return message;
  },
};

function createBaseDeviceCameraUpdateError(): DeviceCameraUpdateError {
  return { error: "" };
}

export const DeviceCameraUpdateError = {
  encode(message: DeviceCameraUpdateError, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceCameraUpdateError {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceCameraUpdateError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceCameraUpdateError {
    return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
  },

  toJSON(message: DeviceCameraUpdateError): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceCameraUpdateError>, I>>(base?: I): DeviceCameraUpdateError {
    return DeviceCameraUpdateError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceCameraUpdateError>, I>>(object: I): DeviceCameraUpdateError {
    const message = createBaseDeviceCameraUpdateError();
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseDeviceCameraRemoveSuccess(): DeviceCameraRemoveSuccess {
  return { cameraId: "" };
}

export const DeviceCameraRemoveSuccess = {
  encode(message: DeviceCameraRemoveSuccess, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.cameraId !== "") {
      writer.uint32(10).string(message.cameraId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceCameraRemoveSuccess {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceCameraRemoveSuccess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cameraId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceCameraRemoveSuccess {
    return { cameraId: isSet(object.cameraId) ? globalThis.String(object.cameraId) : "" };
  },

  toJSON(message: DeviceCameraRemoveSuccess): unknown {
    const obj: any = {};
    if (message.cameraId !== "") {
      obj.cameraId = message.cameraId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceCameraRemoveSuccess>, I>>(base?: I): DeviceCameraRemoveSuccess {
    return DeviceCameraRemoveSuccess.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceCameraRemoveSuccess>, I>>(object: I): DeviceCameraRemoveSuccess {
    const message = createBaseDeviceCameraRemoveSuccess();
    message.cameraId = object.cameraId ?? "";
    return message;
  },
};

function createBaseDeviceCameraRemoveError(): DeviceCameraRemoveError {
  return { error: "" };
}

export const DeviceCameraRemoveError = {
  encode(message: DeviceCameraRemoveError, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceCameraRemoveError {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceCameraRemoveError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceCameraRemoveError {
    return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
  },

  toJSON(message: DeviceCameraRemoveError): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceCameraRemoveError>, I>>(base?: I): DeviceCameraRemoveError {
    return DeviceCameraRemoveError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceCameraRemoveError>, I>>(object: I): DeviceCameraRemoveError {
    const message = createBaseDeviceCameraRemoveError();
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseDeviceCameraSwitchSuccess(): DeviceCameraSwitchSuccess {
  return { cameraId: "" };
}

export const DeviceCameraSwitchSuccess = {
  encode(message: DeviceCameraSwitchSuccess, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.cameraId !== "") {
      writer.uint32(10).string(message.cameraId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceCameraSwitchSuccess {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceCameraSwitchSuccess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cameraId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceCameraSwitchSuccess {
    return { cameraId: isSet(object.cameraId) ? globalThis.String(object.cameraId) : "" };
  },

  toJSON(message: DeviceCameraSwitchSuccess): unknown {
    const obj: any = {};
    if (message.cameraId !== "") {
      obj.cameraId = message.cameraId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceCameraSwitchSuccess>, I>>(base?: I): DeviceCameraSwitchSuccess {
    return DeviceCameraSwitchSuccess.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceCameraSwitchSuccess>, I>>(object: I): DeviceCameraSwitchSuccess {
    const message = createBaseDeviceCameraSwitchSuccess();
    message.cameraId = object.cameraId ?? "";
    return message;
  },
};

function createBaseDeviceCameraSwitchError(): DeviceCameraSwitchError {
  return { error: "" };
}

export const DeviceCameraSwitchError = {
  encode(message: DeviceCameraSwitchError, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceCameraSwitchError {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceCameraSwitchError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceCameraSwitchError {
    return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
  },

  toJSON(message: DeviceCameraSwitchError): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceCameraSwitchError>, I>>(base?: I): DeviceCameraSwitchError {
    return DeviceCameraSwitchError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceCameraSwitchError>, I>>(object: I): DeviceCameraSwitchError {
    const message = createBaseDeviceCameraSwitchError();
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseDeviceCameraSelectedResponse(): DeviceCameraSelectedResponse {
  return { camera: undefined };
}

export const DeviceCameraSelectedResponse = {
  encode(message: DeviceCameraSelectedResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.camera !== undefined) {
      Camera.encode(message.camera, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceCameraSelectedResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceCameraSelectedResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.camera = Camera.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceCameraSelectedResponse {
    return { camera: isSet(object.camera) ? Camera.fromJSON(object.camera) : undefined };
  },

  toJSON(message: DeviceCameraSelectedResponse): unknown {
    const obj: any = {};
    if (message.camera !== undefined) {
      obj.camera = Camera.toJSON(message.camera);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceCameraSelectedResponse>, I>>(base?: I): DeviceCameraSelectedResponse {
    return DeviceCameraSelectedResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceCameraSelectedResponse>, I>>(object: I): DeviceCameraSelectedResponse {
    const message = createBaseDeviceCameraSelectedResponse();
    message.camera = (object.camera !== undefined && object.camera !== null)
      ? Camera.fromPartial(object.camera)
      : undefined;
    return message;
  },
};

function createBaseDeviceCameraSelectedError(): DeviceCameraSelectedError {
  return { error: "" };
}

export const DeviceCameraSelectedError = {
  encode(message: DeviceCameraSelectedError, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceCameraSelectedError {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceCameraSelectedError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceCameraSelectedError {
    return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
  },

  toJSON(message: DeviceCameraSelectedError): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceCameraSelectedError>, I>>(base?: I): DeviceCameraSelectedError {
    return DeviceCameraSelectedError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceCameraSelectedError>, I>>(object: I): DeviceCameraSelectedError {
    const message = createBaseDeviceCameraSelectedError();
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseDeviceNetworkInterfacesResponse(): DeviceNetworkInterfacesResponse {
  return { interfaces: [] };
}

export const DeviceNetworkInterfacesResponse = {
  encode(message: DeviceNetworkInterfacesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.interfaces) {
      InterfaceInfo.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceNetworkInterfacesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceNetworkInterfacesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.interfaces.push(InterfaceInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceNetworkInterfacesResponse {
    return {
      interfaces: globalThis.Array.isArray(object?.interfaces)
        ? object.interfaces.map((e: any) => InterfaceInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DeviceNetworkInterfacesResponse): unknown {
    const obj: any = {};
    if (message.interfaces?.length) {
      obj.interfaces = message.interfaces.map((e) => InterfaceInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceNetworkInterfacesResponse>, I>>(base?: I): DeviceNetworkInterfacesResponse {
    return DeviceNetworkInterfacesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceNetworkInterfacesResponse>, I>>(
    object: I,
  ): DeviceNetworkInterfacesResponse {
    const message = createBaseDeviceNetworkInterfacesResponse();
    message.interfaces = object.interfaces?.map((e) => InterfaceInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDeviceStatusResponse(): DeviceStatusResponse {
  return { status: undefined };
}

export const DeviceStatusResponse = {
  encode(message: DeviceStatusResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.status !== undefined) {
      ServiceStatus.encode(message.status, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeviceStatusResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.status = ServiceStatus.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceStatusResponse {
    return { status: isSet(object.status) ? ServiceStatus.fromJSON(object.status) : undefined };
  },

  toJSON(message: DeviceStatusResponse): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ServiceStatus.toJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceStatusResponse>, I>>(base?: I): DeviceStatusResponse {
    return DeviceStatusResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceStatusResponse>, I>>(object: I): DeviceStatusResponse {
    const message = createBaseDeviceStatusResponse();
    message.status = (object.status !== undefined && object.status !== null)
      ? ServiceStatus.fromPartial(object.status)
      : undefined;
    return message;
  },
};

function createBaseApiDeviceConnected(): ApiDeviceConnected {
  return { deviceId: "" };
}

export const ApiDeviceConnected = {
  encode(message: ApiDeviceConnected, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deviceId !== "") {
      writer.uint32(10).string(message.deviceId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ApiDeviceConnected {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiDeviceConnected();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deviceId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiDeviceConnected {
    return { deviceId: isSet(object.deviceId) ? globalThis.String(object.deviceId) : "" };
  },

  toJSON(message: ApiDeviceConnected): unknown {
    const obj: any = {};
    if (message.deviceId !== "") {
      obj.deviceId = message.deviceId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiDeviceConnected>, I>>(base?: I): ApiDeviceConnected {
    return ApiDeviceConnected.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiDeviceConnected>, I>>(object: I): ApiDeviceConnected {
    const message = createBaseApiDeviceConnected();
    message.deviceId = object.deviceId ?? "";
    return message;
  },
};

function createBaseApiDeviceDisconnected(): ApiDeviceDisconnected {
  return { deviceId: "", reason: "" };
}

export const ApiDeviceDisconnected = {
  encode(message: ApiDeviceDisconnected, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deviceId !== "") {
      writer.uint32(10).string(message.deviceId);
    }
    if (message.reason !== "") {
      writer.uint32(18).string(message.reason);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ApiDeviceDisconnected {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiDeviceDisconnected();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deviceId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.reason = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiDeviceDisconnected {
    return {
      deviceId: isSet(object.deviceId) ? globalThis.String(object.deviceId) : "",
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
    };
  },

  toJSON(message: ApiDeviceDisconnected): unknown {
    const obj: any = {};
    if (message.deviceId !== "") {
      obj.deviceId = message.deviceId;
    }
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiDeviceDisconnected>, I>>(base?: I): ApiDeviceDisconnected {
    return ApiDeviceDisconnected.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiDeviceDisconnected>, I>>(object: I): ApiDeviceDisconnected {
    const message = createBaseApiDeviceDisconnected();
    message.deviceId = object.deviceId ?? "";
    message.reason = object.reason ?? "";
    return message;
  },
};

function createBaseClientRtspDial(): ClientRtspDial {
  return { url: "" };
}

export const ClientRtspDial = {
  encode(message: ClientRtspDial, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClientRtspDial {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientRtspDial();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientRtspDial {
    return { url: isSet(object.url) ? globalThis.String(object.url) : "" };
  },

  toJSON(message: ClientRtspDial): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientRtspDial>, I>>(base?: I): ClientRtspDial {
    return ClientRtspDial.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientRtspDial>, I>>(object: I): ClientRtspDial {
    const message = createBaseClientRtspDial();
    message.url = object.url ?? "";
    return message;
  },
};

function createBaseClientNetworkInterfacesRequest(): ClientNetworkInterfacesRequest {
  return {};
}

export const ClientNetworkInterfacesRequest = {
  encode(_: ClientNetworkInterfacesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClientNetworkInterfacesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientNetworkInterfacesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ClientNetworkInterfacesRequest {
    return {};
  },

  toJSON(_: ClientNetworkInterfacesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientNetworkInterfacesRequest>, I>>(base?: I): ClientNetworkInterfacesRequest {
    return ClientNetworkInterfacesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientNetworkInterfacesRequest>, I>>(_: I): ClientNetworkInterfacesRequest {
    const message = createBaseClientNetworkInterfacesRequest();
    return message;
  },
};

function createBaseClientCameraListRequest(): ClientCameraListRequest {
  return {};
}

export const ClientCameraListRequest = {
  encode(_: ClientCameraListRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClientCameraListRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientCameraListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ClientCameraListRequest {
    return {};
  },

  toJSON(_: ClientCameraListRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientCameraListRequest>, I>>(base?: I): ClientCameraListRequest {
    return ClientCameraListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientCameraListRequest>, I>>(_: I): ClientCameraListRequest {
    const message = createBaseClientCameraListRequest();
    return message;
  },
};

function createBaseClientCameraAdd(): ClientCameraAdd {
  return { name: "", rtspUrl: "", networkInterface: "" };
}

export const ClientCameraAdd = {
  encode(message: ClientCameraAdd, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.rtspUrl !== "") {
      writer.uint32(18).string(message.rtspUrl);
    }
    if (message.networkInterface !== "") {
      writer.uint32(26).string(message.networkInterface);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClientCameraAdd {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientCameraAdd();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.rtspUrl = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.networkInterface = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientCameraAdd {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      rtspUrl: isSet(object.rtspUrl) ? globalThis.String(object.rtspUrl) : "",
      networkInterface: isSet(object.networkInterface) ? globalThis.String(object.networkInterface) : "",
    };
  },

  toJSON(message: ClientCameraAdd): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.rtspUrl !== "") {
      obj.rtspUrl = message.rtspUrl;
    }
    if (message.networkInterface !== "") {
      obj.networkInterface = message.networkInterface;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientCameraAdd>, I>>(base?: I): ClientCameraAdd {
    return ClientCameraAdd.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientCameraAdd>, I>>(object: I): ClientCameraAdd {
    const message = createBaseClientCameraAdd();
    message.name = object.name ?? "";
    message.rtspUrl = object.rtspUrl ?? "";
    message.networkInterface = object.networkInterface ?? "";
    return message;
  },
};

function createBaseClientCameraUpdate(): ClientCameraUpdate {
  return { camera: undefined };
}

export const ClientCameraUpdate = {
  encode(message: ClientCameraUpdate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.camera !== undefined) {
      Camera.encode(message.camera, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClientCameraUpdate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientCameraUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.camera = Camera.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientCameraUpdate {
    return { camera: isSet(object.camera) ? Camera.fromJSON(object.camera) : undefined };
  },

  toJSON(message: ClientCameraUpdate): unknown {
    const obj: any = {};
    if (message.camera !== undefined) {
      obj.camera = Camera.toJSON(message.camera);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientCameraUpdate>, I>>(base?: I): ClientCameraUpdate {
    return ClientCameraUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientCameraUpdate>, I>>(object: I): ClientCameraUpdate {
    const message = createBaseClientCameraUpdate();
    message.camera = (object.camera !== undefined && object.camera !== null)
      ? Camera.fromPartial(object.camera)
      : undefined;
    return message;
  },
};

function createBaseClientCameraRemove(): ClientCameraRemove {
  return { cameraId: "" };
}

export const ClientCameraRemove = {
  encode(message: ClientCameraRemove, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.cameraId !== "") {
      writer.uint32(10).string(message.cameraId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClientCameraRemove {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientCameraRemove();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cameraId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientCameraRemove {
    return { cameraId: isSet(object.cameraId) ? globalThis.String(object.cameraId) : "" };
  },

  toJSON(message: ClientCameraRemove): unknown {
    const obj: any = {};
    if (message.cameraId !== "") {
      obj.cameraId = message.cameraId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientCameraRemove>, I>>(base?: I): ClientCameraRemove {
    return ClientCameraRemove.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientCameraRemove>, I>>(object: I): ClientCameraRemove {
    const message = createBaseClientCameraRemove();
    message.cameraId = object.cameraId ?? "";
    return message;
  },
};

function createBaseClientCameraSwitch(): ClientCameraSwitch {
  return { cameraId: "" };
}

export const ClientCameraSwitch = {
  encode(message: ClientCameraSwitch, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.cameraId !== "") {
      writer.uint32(10).string(message.cameraId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClientCameraSwitch {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientCameraSwitch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cameraId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientCameraSwitch {
    return { cameraId: isSet(object.cameraId) ? globalThis.String(object.cameraId) : "" };
  },

  toJSON(message: ClientCameraSwitch): unknown {
    const obj: any = {};
    if (message.cameraId !== "") {
      obj.cameraId = message.cameraId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientCameraSwitch>, I>>(base?: I): ClientCameraSwitch {
    return ClientCameraSwitch.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientCameraSwitch>, I>>(object: I): ClientCameraSwitch {
    const message = createBaseClientCameraSwitch();
    message.cameraId = object.cameraId ?? "";
    return message;
  },
};

function createBaseClientCameraSelectedRequest(): ClientCameraSelectedRequest {
  return {};
}

export const ClientCameraSelectedRequest = {
  encode(_: ClientCameraSelectedRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClientCameraSelectedRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientCameraSelectedRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ClientCameraSelectedRequest {
    return {};
  },

  toJSON(_: ClientCameraSelectedRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientCameraSelectedRequest>, I>>(base?: I): ClientCameraSelectedRequest {
    return ClientCameraSelectedRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientCameraSelectedRequest>, I>>(_: I): ClientCameraSelectedRequest {
    const message = createBaseClientCameraSelectedRequest();
    return message;
  },
};

function createBaseClientWebrtcSessionStart(): ClientWebrtcSessionStart {
  return {};
}

export const ClientWebrtcSessionStart = {
  encode(_: ClientWebrtcSessionStart, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClientWebrtcSessionStart {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientWebrtcSessionStart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ClientWebrtcSessionStart {
    return {};
  },

  toJSON(_: ClientWebrtcSessionStart): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientWebrtcSessionStart>, I>>(base?: I): ClientWebrtcSessionStart {
    return ClientWebrtcSessionStart.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientWebrtcSessionStart>, I>>(_: I): ClientWebrtcSessionStart {
    const message = createBaseClientWebrtcSessionStart();
    return message;
  },
};

function createBaseClientWebrtcOffer(): ClientWebrtcOffer {
  return { sdp: "" };
}

export const ClientWebrtcOffer = {
  encode(message: ClientWebrtcOffer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sdp !== "") {
      writer.uint32(10).string(message.sdp);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClientWebrtcOffer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientWebrtcOffer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sdp = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientWebrtcOffer {
    return { sdp: isSet(object.sdp) ? globalThis.String(object.sdp) : "" };
  },

  toJSON(message: ClientWebrtcOffer): unknown {
    const obj: any = {};
    if (message.sdp !== "") {
      obj.sdp = message.sdp;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientWebrtcOffer>, I>>(base?: I): ClientWebrtcOffer {
    return ClientWebrtcOffer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientWebrtcOffer>, I>>(object: I): ClientWebrtcOffer {
    const message = createBaseClientWebrtcOffer();
    message.sdp = object.sdp ?? "";
    return message;
  },
};

function createBaseClientWebrtcAnswer(): ClientWebrtcAnswer {
  return { sdp: "" };
}

export const ClientWebrtcAnswer = {
  encode(message: ClientWebrtcAnswer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sdp !== "") {
      writer.uint32(10).string(message.sdp);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClientWebrtcAnswer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientWebrtcAnswer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sdp = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientWebrtcAnswer {
    return { sdp: isSet(object.sdp) ? globalThis.String(object.sdp) : "" };
  },

  toJSON(message: ClientWebrtcAnswer): unknown {
    const obj: any = {};
    if (message.sdp !== "") {
      obj.sdp = message.sdp;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientWebrtcAnswer>, I>>(base?: I): ClientWebrtcAnswer {
    return ClientWebrtcAnswer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientWebrtcAnswer>, I>>(object: I): ClientWebrtcAnswer {
    const message = createBaseClientWebrtcAnswer();
    message.sdp = object.sdp ?? "";
    return message;
  },
};

function createBaseClientWebrtcIceCandidate(): ClientWebrtcIceCandidate {
  return { candidate: "", sdpMid: "", sdpMLineIndex: 0, usernameFragment: "" };
}

export const ClientWebrtcIceCandidate = {
  encode(message: ClientWebrtcIceCandidate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.candidate !== "") {
      writer.uint32(10).string(message.candidate);
    }
    if (message.sdpMid !== "") {
      writer.uint32(18).string(message.sdpMid);
    }
    if (message.sdpMLineIndex !== 0) {
      writer.uint32(24).int32(message.sdpMLineIndex);
    }
    if (message.usernameFragment !== "") {
      writer.uint32(34).string(message.usernameFragment);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClientWebrtcIceCandidate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientWebrtcIceCandidate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.candidate = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sdpMid = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.sdpMLineIndex = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.usernameFragment = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientWebrtcIceCandidate {
    return {
      candidate: isSet(object.candidate) ? globalThis.String(object.candidate) : "",
      sdpMid: isSet(object.sdpMid) ? globalThis.String(object.sdpMid) : "",
      sdpMLineIndex: isSet(object.sdpMLineIndex) ? globalThis.Number(object.sdpMLineIndex) : 0,
      usernameFragment: isSet(object.usernameFragment) ? globalThis.String(object.usernameFragment) : "",
    };
  },

  toJSON(message: ClientWebrtcIceCandidate): unknown {
    const obj: any = {};
    if (message.candidate !== "") {
      obj.candidate = message.candidate;
    }
    if (message.sdpMid !== "") {
      obj.sdpMid = message.sdpMid;
    }
    if (message.sdpMLineIndex !== 0) {
      obj.sdpMLineIndex = Math.round(message.sdpMLineIndex);
    }
    if (message.usernameFragment !== "") {
      obj.usernameFragment = message.usernameFragment;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientWebrtcIceCandidate>, I>>(base?: I): ClientWebrtcIceCandidate {
    return ClientWebrtcIceCandidate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientWebrtcIceCandidate>, I>>(object: I): ClientWebrtcIceCandidate {
    const message = createBaseClientWebrtcIceCandidate();
    message.candidate = object.candidate ?? "";
    message.sdpMid = object.sdpMid ?? "";
    message.sdpMLineIndex = object.sdpMLineIndex ?? 0;
    message.usernameFragment = object.usernameFragment ?? "";
    return message;
  },
};

function createBaseClientDeviceReboot(): ClientDeviceReboot {
  return {};
}

export const ClientDeviceReboot = {
  encode(_: ClientDeviceReboot, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClientDeviceReboot {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientDeviceReboot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ClientDeviceReboot {
    return {};
  },

  toJSON(_: ClientDeviceReboot): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientDeviceReboot>, I>>(base?: I): ClientDeviceReboot {
    return ClientDeviceReboot.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientDeviceReboot>, I>>(_: I): ClientDeviceReboot {
    const message = createBaseClientDeviceReboot();
    return message;
  },
};

function createBaseClientStatusRequest(): ClientStatusRequest {
  return {};
}

export const ClientStatusRequest = {
  encode(_: ClientStatusRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClientStatusRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ClientStatusRequest {
    return {};
  },

  toJSON(_: ClientStatusRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientStatusRequest>, I>>(base?: I): ClientStatusRequest {
    return ClientStatusRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientStatusRequest>, I>>(_: I): ClientStatusRequest {
    const message = createBaseClientStatusRequest();
    return message;
  },
};

function createBaseClientModemInfoRequest(): ClientModemInfoRequest {
  return {};
}

export const ClientModemInfoRequest = {
  encode(_: ClientModemInfoRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClientModemInfoRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientModemInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ClientModemInfoRequest {
    return {};
  },

  toJSON(_: ClientModemInfoRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientModemInfoRequest>, I>>(base?: I): ClientModemInfoRequest {
    return ClientModemInfoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientModemInfoRequest>, I>>(_: I): ClientModemInfoRequest {
    const message = createBaseClientModemInfoRequest();
    return message;
  },
};

function createBaseError(): Error {
  return { code: 0, message: "", details: {} };
}

export const Error = {
  encode(message: Error, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    Object.entries(message.details).forEach(([key, value]) => {
      Error_DetailsEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Error {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = Error_DetailsEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.details[entry3.key] = entry3.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Error {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      details: isObject(object.details)
        ? Object.entries(object.details).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: Error): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.details) {
      const entries = Object.entries(message.details);
      if (entries.length > 0) {
        obj.details = {};
        entries.forEach(([k, v]) => {
          obj.details[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Error>, I>>(base?: I): Error {
    return Error.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Error>, I>>(object: I): Error {
    const message = createBaseError();
    message.code = object.code ?? 0;
    message.message = object.message ?? "";
    message.details = Object.entries(object.details ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseError_DetailsEntry(): Error_DetailsEntry {
  return { key: "", value: "" };
}

export const Error_DetailsEntry = {
  encode(message: Error_DetailsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Error_DetailsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseError_DetailsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Error_DetailsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Error_DetailsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Error_DetailsEntry>, I>>(base?: I): Error_DetailsEntry {
    return Error_DetailsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Error_DetailsEntry>, I>>(object: I): Error_DetailsEntry {
    const message = createBaseError_DetailsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
