// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: proto/common.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "aircast.protocol.common";

/** Event represents a generic event with a name, type, and arbitrary payload */
export interface Event {
  name: string;
  type: string;
  /** Can be any serialized data */
  payload: Uint8Array;
}

/** SignalQuality represents cellular signal quality */
export interface SignalQuality {
  /** Signal quality as a percentage or dBm value */
  value: number;
}

/** Camera represents a camera configuration */
export interface Camera {
  id: string;
  name: string;
  rtspUrl: string;
  networkInterface: string;
}

/** InterfaceInfo represents network interface information */
export interface InterfaceInfo {
  name: string;
  mtu: number;
  hardwareAddr: string;
  flags: string;
  addresses: string[];
}

/** ServiceStatus represents the status of various services */
export interface ServiceStatus {
  mavlink: Event | undefined;
  rtsp: Event | undefined;
  modem: Event | undefined;
  webrtc: Event | undefined;
}

function createBaseEvent(): Event {
  return { name: "", type: "", payload: new Uint8Array(0) };
}

export const Event = {
  encode(message: Event, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.payload.length !== 0) {
      writer.uint32(26).bytes(message.payload);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Event {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.payload = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      payload: isSet(object.payload) ? bytesFromBase64(object.payload) : new Uint8Array(0),
    };
  },

  toJSON(message: Event): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.payload.length !== 0) {
      obj.payload = base64FromBytes(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Event>, I>>(base?: I): Event {
    return Event.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Event>, I>>(object: I): Event {
    const message = createBaseEvent();
    message.name = object.name ?? "";
    message.type = object.type ?? "";
    message.payload = object.payload ?? new Uint8Array(0);
    return message;
  },
};

function createBaseSignalQuality(): SignalQuality {
  return { value: 0 };
}

export const SignalQuality = {
  encode(message: SignalQuality, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(8).int32(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SignalQuality {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignalQuality();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignalQuality {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: SignalQuality): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignalQuality>, I>>(base?: I): SignalQuality {
    return SignalQuality.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignalQuality>, I>>(object: I): SignalQuality {
    const message = createBaseSignalQuality();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseCamera(): Camera {
  return { id: "", name: "", rtspUrl: "", networkInterface: "" };
}

export const Camera = {
  encode(message: Camera, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.rtspUrl !== "") {
      writer.uint32(26).string(message.rtspUrl);
    }
    if (message.networkInterface !== "") {
      writer.uint32(34).string(message.networkInterface);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Camera {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCamera();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.rtspUrl = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.networkInterface = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Camera {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      rtspUrl: isSet(object.rtspUrl) ? globalThis.String(object.rtspUrl) : "",
      networkInterface: isSet(object.networkInterface) ? globalThis.String(object.networkInterface) : "",
    };
  },

  toJSON(message: Camera): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.rtspUrl !== "") {
      obj.rtspUrl = message.rtspUrl;
    }
    if (message.networkInterface !== "") {
      obj.networkInterface = message.networkInterface;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Camera>, I>>(base?: I): Camera {
    return Camera.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Camera>, I>>(object: I): Camera {
    const message = createBaseCamera();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.rtspUrl = object.rtspUrl ?? "";
    message.networkInterface = object.networkInterface ?? "";
    return message;
  },
};

function createBaseInterfaceInfo(): InterfaceInfo {
  return { name: "", mtu: 0, hardwareAddr: "", flags: "", addresses: [] };
}

export const InterfaceInfo = {
  encode(message: InterfaceInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.mtu !== 0) {
      writer.uint32(16).int32(message.mtu);
    }
    if (message.hardwareAddr !== "") {
      writer.uint32(26).string(message.hardwareAddr);
    }
    if (message.flags !== "") {
      writer.uint32(34).string(message.flags);
    }
    for (const v of message.addresses) {
      writer.uint32(42).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): InterfaceInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInterfaceInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.mtu = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.hardwareAddr = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.flags = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.addresses.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InterfaceInfo {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      mtu: isSet(object.mtu) ? globalThis.Number(object.mtu) : 0,
      hardwareAddr: isSet(object.hardwareAddr) ? globalThis.String(object.hardwareAddr) : "",
      flags: isSet(object.flags) ? globalThis.String(object.flags) : "",
      addresses: globalThis.Array.isArray(object?.addresses)
        ? object.addresses.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: InterfaceInfo): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.mtu !== 0) {
      obj.mtu = Math.round(message.mtu);
    }
    if (message.hardwareAddr !== "") {
      obj.hardwareAddr = message.hardwareAddr;
    }
    if (message.flags !== "") {
      obj.flags = message.flags;
    }
    if (message.addresses?.length) {
      obj.addresses = message.addresses;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InterfaceInfo>, I>>(base?: I): InterfaceInfo {
    return InterfaceInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InterfaceInfo>, I>>(object: I): InterfaceInfo {
    const message = createBaseInterfaceInfo();
    message.name = object.name ?? "";
    message.mtu = object.mtu ?? 0;
    message.hardwareAddr = object.hardwareAddr ?? "";
    message.flags = object.flags ?? "";
    message.addresses = object.addresses?.map((e) => e) || [];
    return message;
  },
};

function createBaseServiceStatus(): ServiceStatus {
  return { mavlink: undefined, rtsp: undefined, modem: undefined, webrtc: undefined };
}

export const ServiceStatus = {
  encode(message: ServiceStatus, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mavlink !== undefined) {
      Event.encode(message.mavlink, writer.uint32(10).fork()).ldelim();
    }
    if (message.rtsp !== undefined) {
      Event.encode(message.rtsp, writer.uint32(18).fork()).ldelim();
    }
    if (message.modem !== undefined) {
      Event.encode(message.modem, writer.uint32(26).fork()).ldelim();
    }
    if (message.webrtc !== undefined) {
      Event.encode(message.webrtc, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ServiceStatus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.mavlink = Event.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.rtsp = Event.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.modem = Event.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.webrtc = Event.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceStatus {
    return {
      mavlink: isSet(object.mavlink) ? Event.fromJSON(object.mavlink) : undefined,
      rtsp: isSet(object.rtsp) ? Event.fromJSON(object.rtsp) : undefined,
      modem: isSet(object.modem) ? Event.fromJSON(object.modem) : undefined,
      webrtc: isSet(object.webrtc) ? Event.fromJSON(object.webrtc) : undefined,
    };
  },

  toJSON(message: ServiceStatus): unknown {
    const obj: any = {};
    if (message.mavlink !== undefined) {
      obj.mavlink = Event.toJSON(message.mavlink);
    }
    if (message.rtsp !== undefined) {
      obj.rtsp = Event.toJSON(message.rtsp);
    }
    if (message.modem !== undefined) {
      obj.modem = Event.toJSON(message.modem);
    }
    if (message.webrtc !== undefined) {
      obj.webrtc = Event.toJSON(message.webrtc);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServiceStatus>, I>>(base?: I): ServiceStatus {
    return ServiceStatus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServiceStatus>, I>>(object: I): ServiceStatus {
    const message = createBaseServiceStatus();
    message.mavlink = (object.mavlink !== undefined && object.mavlink !== null)
      ? Event.fromPartial(object.mavlink)
      : undefined;
    message.rtsp = (object.rtsp !== undefined && object.rtsp !== null) ? Event.fromPartial(object.rtsp) : undefined;
    message.modem = (object.modem !== undefined && object.modem !== null) ? Event.fromPartial(object.modem) : undefined;
    message.webrtc = (object.webrtc !== undefined && object.webrtc !== null)
      ? Event.fromPartial(object.webrtc)
      : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
